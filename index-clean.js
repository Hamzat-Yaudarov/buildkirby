/**
 * –û—á–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è index.js –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 */

console.log('[MAIN] Starting imports...');

const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç
const { BOT_CONFIG, LIMITS_CONFIG, REWARDS_CONFIG, isAdmin } = require('./config');
const db = require('./database');
const { throttler } = require('./message-throttler');
const { captchaSystem } = require('./captcha-system');
const { subgramAPI } = require('./subgram-api');

// –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
const { keyboards } = require('./keyboards');
const { editMessage, sendMessage, sendErrorMessage, cleanDisplayText } = require('./message-utils');
const { requireUser, withErrorHandling, withCooldown } = require('./middlewares');
const { createCallbackRouter } = require('./callback-router');

console.log('[MAIN] All modules imported successfully');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const userStates = new Map();
const withdrawalCooldowns = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = BOT_CONFIG.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: false });

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è callback
const callbackRouter = createCallbackRouter(bot, { db });

// –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
module.exports = { bot };

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendThrottledMessage(userId, message, options = {}) {
    return await throttler.sendMessage(() => bot.sendMessage(userId, message, options));
}

async function sendUniversalMessage(chatId, message, options = {}, useThrottling = false) {
    if (useThrottling) {
        return await sendThrottledMessage(chatId, message, options);
    } else {
        return await bot.sendMessage(chatId, message, options);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initializeBotMode() {
    try {
        console.log('üîÑ Clearing any existing webhook...');
        await bot.deleteWebHook();
        await new Promise(resolve => setTimeout(resolve, 1000));

        console.log('üîÑ Starting polling mode...');
        await bot.startPolling({ restart: true });
        console.log('‚úÖ Bot polling started successfully!');
    } catch (error) {
        console.error('‚ùå Error initializing bot mode:', error);
        throw error;
    }
}

async function startBot() {
    try {
        console.log('üöÄ Starting Telegram bot with PostgreSQL...');
        await db.initializeDatabase();
        await initializeBotMode();
        console.log('‚úÖ Bot started successfully!');
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
async function getRequiredChannels() {
    try {
        const result = await db.executeQuery('SELECT channel_id FROM required_channels WHERE is_active = TRUE');
        return result.rows.map(row => row.channel_id);
    } catch (error) {
        console.error('Error getting required channels:', error);
        return [];
    }
}

async function checkAllSubscriptionsDetailed(userId, recordStats = false) {
    const requiredChannels = await getRequiredChannels();
    if (requiredChannels.length === 0) {
        return { allSubscribed: true, channels: [], hasErrors: false };
    }

    const result = { allSubscribed: true, channels: [], hasErrors: false };

    try {
        const channelsData = await db.executeQuery(
            'SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE'
        );
        const channelMap = new Map();
        channelsData.rows.forEach(ch => {
            channelMap.set(ch.channel_id, ch.channel_name);
        });

        for (const channel of requiredChannels) {
            const channelInfo = {
                id: channel,
                name: channelMap.get(channel) || channel,
                subscribed: false,
                canCheck: true,
                error: null
            };

            try {
                const member = await bot.getChatMember(channel, userId);
                channelInfo.subscribed = !(member.status === 'left' || member.status === 'kicked');
            } catch (error) {
                console.log(`Cannot check subscription for channel ${channel}: ${error.message}`);
                channelInfo.canCheck = false;
                channelInfo.error = error.message;
                result.hasErrors = true;
                channelInfo.subscribed = true; // –°—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –µ—Å–ª–∏ –ΩÔøΩÔøΩ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
            }

            result.channels.push(channelInfo);

            if (!channelInfo.subscribed && channelInfo.canCheck) {
                result.allSubscribed = false;
            }
        }

        if (recordStats) {
            try {
                await db.recordSubscriptionCheck(userId, result.allSubscribed || result.hasErrors);
            } catch (statError) {
                console.error('Error recording subscription check:', statError);
            }
        }

        return result;
    } catch (error) {
        console.error('Error checking subscriptions:', error);
        return { allSubscribed: false, channels: [], hasErrors: true };
    }
}

async function checkAllSubscriptions(userId, recordStats = false) {
    const detailed = await checkAllSubscriptionsDetailed(userId, recordStats);
    return detailed.allSubscribed;
}

async function getEnhancedSubscriptionMessage(userId, showOnlyUnsubscribed = false) {
    let message = 'üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n';
    let buttons = [];
    let channelCount = 0;

    try {
        const subscriptionStatus = await checkAllSubscriptionsDetailed(userId, false);
        const channelsToShow = showOnlyUnsubscribed ?
            subscriptionStatus.channels.filter(channel => !channel.subscribed) :
            subscriptionStatus.channels;

        if (channelsToShow.length > 0) {
            message += 'üì∫ **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n';
            channelsToShow.forEach((channel, index) => {
                channelCount++;
                const statusIcon = channel.canCheck ? 'üì∫' : '';
                const statusText = channel.canCheck ? '' : ' (–Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)';

                message += `${channelCount}. ${channel.name}${statusText}\n`;

                const channelLink = channel.id.startsWith('@') ?
                    `https://t.me/${channel.id.substring(1)}` :
                    channel.id;

                buttons.push([{ text: `${statusIcon} ${channel.name}`, url: channelLink }]);
            });

            if (subscriptionStatus.hasErrors) {
                message += '\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n';
            }
        }

        // SubGram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        try {
            const user = await db.getUser(userId);
            if (user) {
                const subgramResponse = await subgramAPI.requestSponsors({
                    userId: userId.toString(),
                    chatId: userId.toString(),
                    firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    languageCode: 'ru',
                    premium: false,
                    maxOP: 3,
                    action: 'subscribe',
                    excludeChannelIds: []
                });

                if (subgramResponse.success && subgramResponse.data) {
                    const processedData = subgramAPI.processAPIResponse(subgramResponse.data);

                    await db.logSubGramAPIRequest(userId, 'request_sponsors', 
                        { action: 'subscribe', maxOP: 3 }, subgramResponse.data, true);
                    await db.saveSubGramUserSession(userId, subgramResponse.data, processedData);

                    if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
                        await db.saveSubGramChannels(userId, processedData.channelsToSubscribe);

                        message += '\nüéØ **–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:**\n';
                        processedData.channelsToSubscribe.forEach((channel, index) => {
                            channelCount++;
                            message += `${channelCount}. ${channel.name}\n`;
                            buttons.push([{ text: `üéØ ${channel.name}`, url: channel.link }]);
                        });
                    }

                    if (processedData.needsGender) {
                        message += '\nü§ñ **SubGram —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–ª–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤**';
                        buttons.push([
                            { text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'subgram_gender_male' },
                            { text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'subgram_gender_female' }
                        ]);
                    }
                }
            }
        } catch (subgramError) {
            console.error('[SUBGRAM] Error getting SubGram channels:', subgramError);
        }

        if (channelCount === 0) {
            message = '‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.';
            buttons.push([{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);
        } else {
            message += '\nüìå –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏';
            buttons.push([{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subgram-op' }]);
        }

        return { message, buttons, hasSubgram: true };

    } catch (error) {
        console.error('Error getting enhanced subscription message:', error);
        return {
            message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.',
            buttons: [[{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]],
            hasSubgram: false
        };
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start(.*)/, withErrorHandling(async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = msg.from;
    const referralCode = match ? match[1].trim() : null;
    
    try {
        let dbUser = await db.getUser(userId);

        if (!dbUser) {
            dbUser = await db.createOrUpdateUser(user);

            if (referralCode) {
                if (referralCode.startsWith('track_')) {
                    console.log(`[TRACKING] User ${userId} came from tracking link: ${referralCode}`);
                    try {
                        await db.executeQuery(
                            'INSERT INTO tracking_clicks (tracking_id, user_id, clicked_at) VALUES ($1, $2, NOW())',
                            [referralCode, userId]
                        );
                        await db.executeQuery(
                            'UPDATE tracking_links SET clicks_count = clicks_count + 1 WHERE tracking_id = $1',
                            [referralCode]
                        );
                    } catch (error) {
                        console.error('[TRACKING] Error recording click:', error);
                    }
                } else if (!isNaN(referralCode)) {
                    const referrerId = parseInt(referralCode);
                    const referrer = await db.getUser(referrerId);
                    if (referrer && referrerId !== userId) {
                        await db.updateUserField(userId, 'pending_referrer', referrerId);
                    }
                }
            }
        }

        const captchaPassed = await db.getCaptchaStatus(userId);

        if (!captchaPassed) {
            if (captchaSystem.hasActiveSession(userId)) {
                const currentQuestion = captchaSystem.getCurrentQuestion(userId);
                await bot.sendMessage(chatId, `ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç**\n\n–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:\n**${currentQuestion}**\n\nüí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18)`, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: [[{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]] }
                });
            } else {
                const question = captchaSystem.generateCaptcha(userId);
                await bot.sendMessage(chatId, `ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.\n\n–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:\n**${question}**\n\nüí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: [[{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]] }
                });
            }
            return;
        }

        const subscriptionDetails = await checkAllSubscriptionsDetailed(userId);
        const hasChannelsToShow = subscriptionDetails.channels.length > 0;

        if (hasChannelsToShow) {
            const alreadyNotified = await db.isSubscriptionNotified(userId);

            if (!alreadyNotified) {
                const subData = await getEnhancedSubscriptionMessage(userId);
                await bot.sendMessage(chatId, subData.message, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: subData.buttons }
                });
                await db.setSubscriptionNotified(userId, true);
                return;
            } else {
                const isSubscribed = await checkAllSubscriptions(userId, true);
                if (!isSubscribed) {
                    const subData = await getEnhancedSubscriptionMessage(userId);
                    await bot.sendMessage(chatId, subData.message, {
                        parse_mode: 'Markdown',
                        reply_markup: { inline_keyboard: subData.buttons }
                    });
                    return;
                }
            }
        }
        
        await db.updateUserField(userId, 'is_subscribed', true);

        try {
            await db.addWeeklyPoints(userId, 1, 'bot_activation');
        } catch (pointsError) {
            console.error('Error adding weekly points for bot activation:', pointsError);
        }
        
        if (dbUser.pending_referrer) {
            const invitedBy = dbUser.pending_referrer;
            await db.updateUserField(userId, 'pending_referrer', null);
            await db.updateUserField(userId, 'invited_by', invitedBy);
        }

        const welcomeMessage = `üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarBot!**\n\nüí∞ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–∞–±–æÔøΩÔøΩ–∫–∞ Telegram Stars**\n\nüéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∫–ª–∏–∫–µ—Ä–µ\n‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (3‚≠ê –∑–∞ –¥—Ä—É–≥–∞)\n‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö\n‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: { remove_keyboard: true },
            ...keyboards.getMainMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in start command:', error);
        await sendErrorMessage(bot, chatId, null, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', withErrorHandling(async (callbackQuery) => {
    try {
        await callbackRouter.route(callbackQuery);
        await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('Error in callback query:', error);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
}, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–ø—á–∞)
bot.on('message', withErrorHandling(async (msg) => {
    if (msg.text && msg.text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const messageText = msg.text;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
    if (captchaSystem.hasActiveSession(userId)) {
        const isCorrect = captchaSystem.checkAnswer(userId, messageText);
        
        if (isCorrect) {
            await db.setCaptchaPassed(userId, true);
            await bot.sendMessage(chatId, '‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'main_menu' }]]
                }
            });
        } else {
            if (captchaSystem.hasActiveSession(userId)) {
                const newQuestion = captchaSystem.generateCaptcha(userId);
                await bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n**${newQuestion}**`, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: [[{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]] }
                });
            } else {
                await bot.sendMessage(chatId, '‚è∞ –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.');
            }
        }
    }
}, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'));

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
bot.onText(/\/admin/, withErrorHandling(async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    try {
        const stats = await db.getUserStats();
        const message = `‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\nüìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}\nüí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            ...keyboards.getAdminMenuKeyboard()
        });
    } catch (error) {
        console.error('Error in admin command:', error);
        await sendErrorMessage(bot, chatId, null, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
    }
}, '–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã'));

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { 
    bot, 
    checkAllSubscriptions, 
    checkAllSubscriptionsDetailed, 
    getEnhancedSubscriptionMessage,
    sendUniversalMessage,
    sendThrottledMessage
};

console.log('‚úÖ Clean index.js loaded successfully - Code duplication eliminated!');
