/**
 * –°ÔøΩÔøΩ—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç SubGram
 * –ü—Ä–æ–±–ª–µ–º–∞: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç linkedCount: 0 - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
 */

const db = require('./database');
const { subgramAPI } = require('./subgram-api');
const axios = require('axios');

async function fixSubGramSponsorChannels() {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° SUBGRAM –°–ü–û–ù–°–û–†–°–ö–ò–ú–ò –ö–ê–ù–ê–õ–ê–ú–ò\n');

    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n');

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram...');
        let settings = await db.getSubGramSettings();
        
        if (!settings) {
            console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–æ–∑–¥–∞–µ–º...');
            await db.executeQuery(`
                INSERT INTO subgram_settings (api_key, api_url, enabled, max_sponsors, default_action)
                VALUES ($1, $2, $3, $4, $5)
                ON CONFLICT (id) DO UPDATE SET
                    api_key = EXCLUDED.api_key,
                    enabled = EXCLUDED.enabled,
                    max_sponsors = EXCLUDED.max_sponsors,
                    default_action = EXCLUDED.default_action
            `, [
                '5d4c6c5283559a05a9558b677669871d6ab58e00e71587546b25b4940ea6029d',
                'https://api.subgram.ru/request-op/',
                true,
                5,
                'subscribe'
            ]);
            
            settings = await db.getSubGramSettings();
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
        } else {
            console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
                enabled: settings.enabled,
                max_sponsors: settings.max_sponsors,
                hasApiKey: !!settings.api_key
            });
        }

        if (!settings.enabled) {
            console.log('‚ö†Ô∏è SubGram –æ—Ç–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∞–µ–º...');
            await db.executeQuery('UPDATE subgram_settings SET enabled = true');
            console.log('‚úÖ SubGram –≤–∫–ª—é—á–µ–Ω');
        }

        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞...');
        
        const testParams = [
            {
                name: '–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
                params: {
                    UserId: "7961237966",
                    ChatId: "7961237966", 
                    MaxOP: 5,
                    action: "subscribe",
                    exclude_channel_ids: []
                }
            },
            {
                name: '–° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º MaxOP',
                params: {
                    UserId: "7961237966",
                    ChatId: "7961237966",
                    MaxOP: 1,
                    action: "subscribe",
                    exclude_channel_ids: []
                }
            },
            {
                name: '–° –¥–µ–π—Å—Ç–≤–∏–µ–º newtask',
                params: {
                    UserId: "7961237966",
                    ChatId: "7961237966",
                    MaxOP: 3,
                    action: "newtask",
                    exclude_channel_ids: []
                }
            },
            {
                name: '–° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏',
                params: {
                    UserId: "7961237966",
                    ChatId: "7961237966",
                    MaxOP: 3,
                    action: "subscribe",
                    exclude_channel_ids: [],
                    first_name: "Test",
                    language_code: "ru"
                }
            }
        ];

        for (const test of testParams) {
            console.log(`\nüß™ –¢–µ—Å—Ç: ${test.name}`);
            try {
                const response = await axios.post(settings.api_url, test.params, {
                    headers: {
                        'Auth': settings.api_key,
                        'Content-Type': 'application/json'
                    },
                    timeout: 10000
                });

                console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.data.status}, –ö–æ–¥: ${response.data.code}`);
                console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, {
                    status: response.data.status,
                    code: response.data.code,
                    message: response.data.message,
                    linksCount: response.data.links?.length || 0,
                    linkedCount: response.data.linkedCount || 0
                });

                if (response.data.links && response.data.links.length > 0) {
                    console.log(`üéâ –ù–ê–ô–î–ï–ù–´ –ö–ê–ù–ê–õ–´! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${response.data.links.length}`);
                    response.data.links.slice(0, 3).forEach((link, i) => {
                        console.log(`  ${i+1}. ${link}`);
                    });
                    break; // –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
                await db.logSubGramAPIRequest(
                    7961237966,
                    `test_${test.name.toLowerCase().replace(/\s+/g, '_')}`,
                    test.params,
                    response.data,
                    true
                );

            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                if (error.response?.data) {
                    console.log(`üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, error.response.data);
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                await db.logSubGramAPIRequest(
                    7961237966,
                    `test_${test.name.toLowerCase().replace(/\s+/g, '_')}`,
                    test.params,
                    error.response?.data || {},
                    false,
                    error.message
                );
            }
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ SubGram
        console.log('\n3Ô∏è‚É£ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å API...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–µ—Ç –ª–∏ –±–æ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        try {
            const statusResponse = await axios.get('https://api.subgram.ru/bot-status/', {
                headers: {
                    'Auth': settings.api_key,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            });

            console.log('ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ SubGram:', statusResponse.data);
        } catch (statusError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞:', statusError.message);
        }

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ SubGram
        console.log('\n4Ô∏è‚É£ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–∞–Ω–∞–ª–æ–≤...');
        console.log('üîç –û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
        console.log('');
        console.log('1. ü§ñ –ë–û–¢ –ù–ï –î–û–ë–ê–í–õ–ï–ù –í SUBGRAM –° –¢–û–ö–ï–ù–û–ú');
        console.log('   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://subgram.ru');
        console.log('   - –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω');
        console.log('   - –í–ê–ñ–ù–û: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω "–° –¢–û–ö–ï–ù–û–ú"');
        console.log('');
        console.log('2. üö´ –ù–ï–¢ –†–ê–ó–†–ï–®–ï–ù–ò–ô –ù–ê –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ÔøΩÔøΩ—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ SubGram');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤" –≤–∫–ª—é—á–µ–Ω–æ');
        console.log('');
        console.log('3. üì≠ –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –°–ü–û–ù–°–û–†–°–ö–ò–• –ö–ê–ù–ê–õ–û–í');
        console.log('   - –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤');
        console.log('   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É SubGram');
        console.log('');
        console.log('4. üîß –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ SubGram –ø–∞–Ω–µ–ª–∏');
        console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ URL API –∞–∫—Ç—É–∞–ª—å–Ω—ã–π');

        // 6. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
        console.log('\n5Ô∏è‚É£ –†–ï–®–ï–ù–ò–Ø:');
        console.log('');
        console.log('A. üîÑ –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:');
        console.log('   1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://subgram.ru');
        console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤–∞—à –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω');
        console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω "–° –¢–û–ö–ï–ù–û–ú"');
        console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞ÔøΩÔøΩ–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ');
        console.log('');
        console.log('B. üõ†Ô∏è –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï:');
        console.log('   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã');
        console.log('   2. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        console.log('   3. –û—Ç–∫–ª—é—á–∏—Ç–µ SubGram –≤—Ä–µ–º–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞');
        console.log('');
        console.log('C. üîß –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:');
        console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ SubGram –ø–∞–Ω–µ–ª–∏');
        console.log('   3. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SubGram');

        // 7. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SubGram
        console.log('\n6Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–û–ï –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï SUBGRAM:');
        console.log('');
        console.log('–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞, –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å SubGram:');
        console.log('```sql');
        console.log('UPDATE subgram_settings SET enabled = false;');
        console.log('```');
        console.log('');
        console.log('–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏.');

        // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        const requiredChannels = await db.executeQuery(
            'SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE'
        );
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${requiredChannels.rows.length} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:`);
        requiredChannels.rows.forEach((ch, i) => {
            console.log(`  ${i+1}. ${ch.channel_name || ch.channel_id} (${ch.channel_id})`);
        });

        if (requiredChannels.rows.length === 0) {
            console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!');
            console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª:');
            console.log('```sql');
            console.log(`INSERT INTO required_channels (channel_id, channel_name, is_active) VALUES ('@your_channel', '–í–∞—à –∫–∞–Ω–∞–ª', true);`);
            console.log('```');
        } else {
            console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å');
        }

        console.log('\nüìä –†–ï–ó–Æ–ú–ï:');
        console.log('==========================================');
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
        console.log('‚úÖ API –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
        console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        console.log('');
        console.log('üéØ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ SubGram –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        console.log('üåê –°—Å—ã–ª–∫–∞: https://subgram.ru');

    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    fixSubGramSponsorChannels();
}

module.exports = { fixSubGramSponsorChannels };
