/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SubGram —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */

const { subgramAPI } = require('./subgram-api');
const db = require('./database');

async function testUpdatedSubGramIntegration() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π SubGram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        const config = subgramAPI.getConfig();
        console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:', {
            apiUrl: config.apiUrl,
            hasApiKey: config.hasApiKey,
            apiKeyLength: config.apiKeyLength
        });

        if (!config.hasApiKey) {
            console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
            return;
        }
        console.log('‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

        // 2. –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤...');
        const testUserId = 7972065986; // ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        const sponsorsResponse = await subgramAPI.requestSponsors({
            userId: testUserId.toString(),
            chatId: testUserId.toString(),
            firstName: 'TestUser',
            languageCode: 'ru',
            premium: false,
            maxOP: 3,
            action: 'subscribe',
            excludeChannelIds: []
        });

        console.log('üì° –û—Ç–≤–µ—Ç API:', {
            success: sponsorsResponse.success,
            status: sponsorsResponse.data?.status,
            code: sponsorsResponse.data?.code,
            message: sponsorsResponse.data?.message?.substring(0, 100) + '...'
        });

        if (!sponsorsResponse.success) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', sponsorsResponse.error);
            return;
        }

        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API
        console.log('3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API...');
        const processedData = subgramAPI.processAPIResponse(sponsorsResponse.data);
        
        console.log('üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
            status: processedData.status,
            needsSubscription: processedData.needsSubscription,
            needsGender: processedData.needsGender,
            allSubscribed: processedData.allSubscribed,
            channelsCount: processedData.channels?.length || 0,
            channelsToSubscribeCount: processedData.channelsToSubscribe?.length || 0
        });

        // 4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('4Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const formattedMessage = subgramAPI.formatChannelsMessage(processedData);
        
        console.log('üí¨ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
        console.log('   –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', formattedMessage.message.length);
        console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫:', formattedMessage.buttons.length);
        console.log('   –¢–µ–∫—Å—Ç:', formattedMessage.message.substring(0, 200) + '...');

        // 5. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        await db.logSubGramAPIRequest(
            testUserId,
            'test_request',
            { action: 'subscribe', maxOP: 3 },
            sponsorsResponse.data,
            true
        );
        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        await db.saveSubGramUserSession(testUserId, sponsorsResponse.data, processedData);
        console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
        const savedSession = await db.getSubGramUserSession(testUserId);
        console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', !!savedSession);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
            await db.saveSubGramChannels(testUserId, processedData.channelsToSubscribe);
            console.log('‚úÖ –ö–∞–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', processedData.channelsToSubscribe.length);
        }

        // 6. –¢–µ—Å—Ç callback —Å—Ü–µ–Ω–∞—Ä–∏—è
        console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback —Å—Ü–µ–Ω–∞—Ä–∏—è...');
        
        if (processedData.status === 'ok' && processedData.code === 200) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ');
        } else if (processedData.status === 'ok') {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É - –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ');
        } else if (processedData.status === 'warning') {
            console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã');
        } else if (processedData.status === 'gender') {
            console.log('‚ùì –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else {
            console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', processedData.status);
        }

        // 7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('7Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await db.deleteSubGramUserSession(testUserId);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n');

        console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('üìã –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SubGram —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ callback
        console.log('8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ callback...');
        console.log('‚úÖ Callback "subgram-op" - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');
        console.log('‚úÖ Callback "subgram_gender_male/female" - –≤—ã–±–æ—Ä –ø–æ–ª–∞');
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: ok, warning, gender');
        console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (Auth)');
        console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API\n');

        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    testUpdatedSubGramIntegration()
        .then(success => {
            if (success) {
                console.log('üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                process.exit(0);
            } else {
                console.log('üí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testUpdatedSubGramIntegration };
