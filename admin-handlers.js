const db = require('./database');

// Admin callback handler additions for index.js
async function handleAdminTasks(bot, chatId, messageId) {
    try {
        const message = `üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`—Ç–∏–ø|–Ω–∞–∑–≤–∞–Ω–∏–µ|–Ω–∞–≥—Ä–∞–¥–∞|–ª–∏–º–∏—Ç\`

–ü—Ä–∏–º–µ—Ä: \`–∫–∞–Ω–∞–ª|@example|1|100\`

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ /delete_task ID - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ /list_tasks - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã ÔøΩÔøΩ–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', callback_data: 'admin_list_tasks' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleAdminTasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminChannels(bot, chatId, messageId) {
    try {
        const message = `üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏**

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`@channel_name|–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\`

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ /remove_channel ID - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì∫ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤', callback_data: 'admin_list_channels' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleAdminChannels:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminLottery(bot, chatId, messageId) {
    try {
        const message = `üé∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–Ω–∞–∑–≤–∞–Ω–∏–µ|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–±–∏–ª–µ—Ç–æ–≤|—Ü–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π|–ø—Ä–æ—Ü–µ–Ω—Ç_–±–æ—Ç—É\`

–ü—Ä–∏–º–µ—Ä: \`–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è|100|5|10|20\`

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /create_lottery - —Å–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é
‚Ä¢ /end_lottery ID - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é
‚Ä¢ /list_lotteries - —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–µ—Ä–µ–π`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üé∞ –°–ø–∏—Å–æ–∫ –ª–æ—Ç–µ—Ä–µ–π', callback_data: 'admin_list_lotteries' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleAdminLottery:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ—è–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminPromocodes(bot, chatId, messageId) {
    try {
        const message = `üéÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ö–û–î|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤–µ–∑–¥|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∞–∫—Ç–∏–≤–∞—Ü–∏–π\`

–ü—Ä–∏–º–µ—Ä: \`WELCOME|0.5|100\`

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /create_promo - —Å–æ–∑–¥–∞—Ç—å ÔøΩÔøΩ—Ä–æ–º–æ–∫–æ–¥
‚Ä¢ /deactivate_promo –ö–û–î - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ /list_promos - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üéÅ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data: 'admin_list_promos' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleAdminPromocodes:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminBroadcast(bot, chatId, messageId) {
    try {
        const message = `üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è', callback_data: 'broadcast_tasks' }],
                    [{ text: 'üèÜ –ü–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø 5 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'broadcast_referrals' }],
                    [{ text: '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: 'broadcast_custom' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleAdminBroadcast:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

// Broadcast handlers
async function handleBroadcastTasks(bot, chatId, messageId) {
    try {
        const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');
        let successCount = 0;
        
        const message = `üìã **–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!**

–ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã!`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        for (const user of users.rows) {
            try {
                await bot.sendMessage(user.id, message, {
                    parse_mode: 'Markdown',
                    ...keyboard
                });
                successCount++;
                await new Promise(resolve => setTimeout(resolve, 50)); // Rate limiting
            } catch (error) {
                console.error(`Failed to send to user ${user.id}:`, error.message);
            }
        }

        await bot.editMessageText(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_broadcast' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error in broadcast tasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_broadcast' }]
                ]
            }
        });
    }
}

async function handleBroadcastReferrals(bot, chatId, messageId) {
    try {
        const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');
        let successCount = 0;
        
        const message = `üèÜ **–ü–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø 5 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∏ –ø–æ–ª—É—á–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã!**

–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'invite' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        for (const user of users.rows) {
            try {
                await bot.sendMessage(user.id, message, {
                    parse_mode: 'Markdown',
                    ...keyboard
                });
                successCount++;
                await new Promise(resolve => setTimeout(resolve, 50)); // Rate limiting
            } catch (error) {
                console.error(`Failed to send to user ${user.id}:`, error.message);
            }
        }

        await bot.editMessageText(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount} –∏–∑ ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_broadcast' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error in broadcast referrals:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_broadcast' }]
                ]
            }
        });
    }
}

// List handlers
async function handleAdminListTasks(bot, chatId, messageId) {
    try {
        const tasks = await db.executeQuery('SELECT * FROM tasks ORDER BY id');
        
        let message = 'üìã **–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π**\n\n';
        
        if (tasks.rows.length === 0) {
            message += '–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.';
        } else {
            tasks.rows.forEach((task, index) => {
                message += `${index + 1}. **${task.channel_name || task.channel_id}**\n`;
                message += `   ID: ${task.id}\n`;
                message += `   –ö–∞–Ω–∞–ª: ${task.channel_id}\n`;
                message += `   –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê\n`;
                message += `   –°—Ç–∞—Ç—É—Å: ${task.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_tasks' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error listing tasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_tasks' }]
                ]
            }
        });
    }
}

async function handleAdminListChannels(bot, chatId, messageId) {
    try {
        const channels = await db.executeQuery('SELECT * FROM required_channels ORDER BY id');
        
        let message = 'üì∫ **–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n';
        
        if (channels.rows.length === 0) {
            message += '–ö–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.';
        } else {
            channels.rows.forEach((channel, index) => {
                message += `${index + 1}. **${channel.channel_name || channel.channel_id}**\n`;
                message += `   ID: ${channel.id}\n`;
                message += `   –ö–∞–Ω–∞–ª: ${channel.channel_id}\n`;
                message += `   –°—Ç–∞—Ç—É—Å: ${channel.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_channels' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error listing channels:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_channels' }]
                ]
            }
        });
    }
}

async function handleAdminListLotteries(bot, chatId, messageId) {
    try {
        const lotteries = await db.executeQuery('SELECT * FROM lotteries ORDER BY id');
        
        let message = 'üé∞ **–°–ø–∏—Å–æ–∫ –ª–æ—Ç–µ—Ä–µ–π**\n\n';
        
        if (lotteries.rows.length === 0) {
            message += '–õ–æ—Ç–µ—Ä–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.';
        } else {
            lotteries.rows.forEach((lottery, index) => {
                message += `${index + 1}. **${lottery.name}**\n`;
                message += `   ID: ${lottery.id}\n`;
                message += `   –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} ‚≠ê\n`;
                message += `   –ë–∏–ª–µ—Ç–æ–≤: ${lottery.current_tickets}/${lottery.max_tickets}\n`;
                message += `   –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${lottery.winners_count}\n`;
                message += `   –°—Ç–∞—Ç—É—Å: ${lottery.is_active ? '‚úÖ –ê–∫—Ç–∏ÔøΩÔøΩ–Ω–æ' : '‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–æ'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_lottery' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error listing lotteries:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_lottery' }]
                ]
            }
        });
    }
}

async function handleAdminListPromos(bot, chatId, messageId) {
    try {
        const promos = await db.executeQuery('SELECT * FROM promocodes ORDER BY id');
        
        let message = 'üéÅ **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**\n\n';
        
        if (promos.rows.length === 0) {
            message += '–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.';
        } else {
            promos.rows.forEach((promo, index) => {
                message += `${index + 1}. **${promo.code}**\n`;
                message += `   ID: ${promo.id}\n`;
                message += `   –ù–∞–≥—Ä–∞–¥–∞: ${promo.reward} ‚≠ê\n`;
                message += `   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.current_uses}/${promo.max_uses || '‚àû'}\n`;
                message += `   –°—Ç–∞—Ç—É—Å: ${promo.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_promocodes' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error listing promocodes:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_promocodes' }]
                ]
            }
        });
    }
}

module.exports = {
    handleAdminTasks,
    handleAdminChannels,
    handleAdminLottery,
    handleAdminPromocodes,
    handleAdminBroadcast,
    handleBroadcastTasks,
    handleBroadcastReferrals,
    handleAdminListTasks,
    handleAdminListChannels,
    handleAdminListLotteries,
    handleAdminListPromos
};
