// –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

// –¢–∏—Ç—É–ª—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
const REFERRAL_TITLES = {
    0: { name: "–ù–æ–≤–∏—á–æ–∫", emoji: "üå±", benefits: [] },
    5: { name: "–ê–∫—Ç–∏–≤–∏—Å—Ç", emoji: "‚≠ê", benefits: ["daily_bonus"] },
    25: { name: "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä", emoji: "üèÜ", benefits: ["vip_chat", "early_access"] },
    100: { name: "–õ–µ–≥–µ–Ω–¥–∞", emoji: "üëë", benefits: ["personal_manager", "exclusive_features"] },
    500: { name: "–ú–∞—Å—Ç–µ—Ä", emoji: "üíé", benefits: ["all_privileges"] }
};

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const ACHIEVEMENTS = {
    first_friend: { name: "–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥", reward: 10, emoji: "üéâ" },
    social_butterfly: { name: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞", condition: "5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å", reward: 25 },
    family_circle: { name: "–°–µ–º–µ–π–Ω—ã–π –∫—Ä—É–≥", condition: "–ü—Ä–∏–≤–µ—Å—Ç–∏ 3 —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", reward: 50 },
    streak_week: { name: "–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è", condition: "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –Ω–æ–≤—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", reward: 100 },
    hundred_club: { name: "–ö–ª—É–± —Å—Ç–∞", condition: "100 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", reward: 500 }
};

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function calculateProgress(referrals) {
    const levels = Object.keys(REFERRAL_TITLES).map(Number).sort((a, b) => a - b);
    const currentLevel = levels.reverse().find(level => referrals >= level) || 0;
    const nextLevel = levels.find(level => level > referrals);
    
    return {
        current: REFERRAL_TITLES[currentLevel],
        next: nextLevel ? REFERRAL_TITLES[nextLevel] : null,
        progress: nextLevel ? referrals - currentLevel : 100,
        needed: nextLevel ? nextLevel - referrals : 0
    };
}

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã
const REFERRAL_CASES = {
    bronze: { requirement: 5, rewards: [10, 15, 20, 25], rarity: "common" },
    silver: { requirement: 25, rewards: [50, 75, 100], rarity: "rare" },
    gold: { requirement: 100, rewards: [200, 300, 500], rarity: "epic" },
    diamond: { requirement: 500, rewards: [1000, 1500, 2000], rarity: "legendary" }
};

// –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
class ReferralTournament {
    constructor() {
        this.participants = new Map();
        this.startTime = Date.now();
        this.duration = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
    }
    
    addReferral(userId) {
        const current = this.participants.get(userId) || 0;
        this.participants.set(userId, current + 1);
    }
    
    getLeaderboard() {
        return Array.from(this.participants.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10);
    }
    
    isActive() {
        return Date.now() - this.startTime < this.duration;
    }
}

// –°—Ç—Ä–∏–∫–∏ (—Å–µ—Ä–∏–∏)
function calculateStreak(user) {
    const today = new Date().toDateString();
    const lastReferral = user.last_referral_date;
    const currentStreak = user.referral_streak || 0;
    
    if (lastReferral === today) {
        return currentStreak; // –£–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞–ª —Å–µ–≥–æ–¥–Ω—è
    }
    
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    if (lastReferral === yesterday.toDateString()) {
        return currentStreak + 1; // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
    }
    
    return 1; // –ù–æ–≤–∞—è —Å–µ—Ä–∏—è
}

// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function createReferralTeam(leaderId, teamName) {
    return {
        id: generateTeamId(),
        name: teamName,
        leader: leaderId,
        members: [leaderId],
        totalReferrals: 0,
        goals: {
            weekly: 50,
            monthly: 200
        },
        rewards: {
            teamBonus: 1.2, // 20% –±–æ–Ω—É—Å –∫ –Ω–∞–≥—Ä–∞–¥–∞–º
            exclusiveAccess: true
        }
    };
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
const SPECIAL_EVENTS = {
    weekend_boost: {
        name: "–í—ã—Ö–æ–¥–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
        multiplier: 2,
        condition: (date) => date.getDay() === 0 || date.getDay() === 6
    },
    friend_week: {
        name: "–ù–µ–¥–µ–ª—è –¥—Ä—É–∑–µ–π",
        bonusRewards: [100, 200, 300],
        duration: 7 * 24 * 60 * 60 * 1000
    },
    holiday_special: {
        name: "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω",
        specialPrizes: ["premium_access", "exclusive_avatar", "bonus_multiplier"]
    }
};

// –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function sendAchievementNotification(userId, achievement) {
    const message = `
üéâ **–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!**

üèÜ **${achievement.name}**
${achievement.emoji} –ù–∞–≥—Ä–∞–¥–∞: +${achievement.reward} ‚≠ê

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!
    `;
    
    return message;
}

function sendProgressNotification(userId, progress) {
    const message = `
üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**

${progress.current.emoji} –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: **${progress.current.name}**

${progress.next ? `
üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${progress.needed} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${'‚ñà'.repeat(Math.floor(progress.progress/10))}${'‚ñë'.repeat(10-Math.floor(progress.progress/10))} ${Math.floor(progress.progress)}%

üéÅ **–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** ${progress.next.emoji} ${progress.next.name}
üíé **–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏:** ${progress.next.benefits.join(', ')}
` : 'üëë **–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!**'}
    `;
    
    return message;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
    REFERRAL_TITLES,
    ACHIEVEMENTS,
    calculateProgress,
    ReferralTournament,
    calculateStreak,
    createReferralTeam,
    SPECIAL_EVENTS,
    sendAchievementNotification,
    sendProgressNotification
};
