/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è SubGram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

const db = require('./database');
const { subgramAPI } = require('./subgram-api');

async function debugSubGramStatus() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SUBGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n');

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram –≤ –ë–î
        console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram –≤ –ë–î...');
        try {
            const settings = await db.getSubGramSettings();
            console.log('ÔøΩÔøΩÔøΩ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î:', {
                enabled: settings?.enabled,
                hasApiKey: !!settings?.api_key,
                apiKeyLength: settings?.api_key?.length,
                maxSponsors: settings?.max_sponsors,
                apiUrl: settings?.api_url
            });
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
        }
        console.log('');

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –º–æ–¥—É–ª—è
        console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –º–æ–¥—É–ª—è...');
        const config = subgramAPI.getConfig();
        console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:', config);
        console.log('');

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        console.log('4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ API –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)...');
        try {
            const logs = await db.getSubGramAPIRequestHistory(null, 10);
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${logs.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö`);
            
            if (logs.length > 0) {
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                const successCount = logs.filter(log => log.success).length;
                const errorCount = logs.length - successCount;
                console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}`);
                console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${errorCount}`);
                
                // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
                const recentErrors = logs.filter(log => !log.success).slice(0, 3);
                if (recentErrors.length > 0) {
                    console.log('\n‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:');
                    recentErrors.forEach((error, index) => {
                        console.log(`  ${index + 1}. [${error.created_at}] ${error.error_message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                        if (error.response_data?.status) {
                            console.log(`     API —Å—Ç–∞—Ç—É—Å: ${error.response_data.status}`);
                        }
                    });
                }
                
                // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                const recentSuccess = logs.filter(log => log.success).slice(0, 3);
                if (recentSuccess.length > 0) {
                    console.log('\n‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
                    recentSuccess.forEach((success, index) => {
                        console.log(`  ${index + 1}. [${success.created_at}] API —Å—Ç–∞—Ç—É—Å: ${success.api_status || 'unknown'}`);
                    });
                }
            } else {
                console.log('üì≠ –õ–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
        }
        console.log('');

        // 5. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        console.log('5Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ SubGram API...');
        const testUserId = '123456789';
        try {
            const apiResponse = await subgramAPI.requestSponsors({
                userId: testUserId,
                chatId: testUserId,
                maxOP: 3,
                action: 'subscribe',
                excludeChannelIds: [],
                withToken: true
            });

            console.log('üì° –†–µ–∑—É–ª—å—Ç–∞—Ç API –∑–∞–ø—Ä–æ—Å–∞:');
            console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${apiResponse.success}`);
            if (apiResponse.success && apiResponse.data) {
                console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${apiResponse.data.status}`);
                console.log(`  ‚Ä¢ –ö–æ–¥: ${apiResponse.data.code}`);
                console.log(`  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${apiResponse.data.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
                console.log(`  ‚Ä¢ –°—Å—ã–ª–æ–∫: ${apiResponse.data.links?.length || 0}`);
            } else {
                console.log(`  ‚Ä¢ –û—à–∏–±–∫–∞: ${apiResponse.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            }
            
            // –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ª–æ–≥–∏
            await db.logSubGramAPIRequest(
                parseInt(testUserId),
                'test_request',
                { test: true },
                apiResponse.data || {},
                apiResponse.success,
                apiResponse.error
            );
            
        } catch (error) {
            console.log(`  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        console.log('');

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        try {
            const sessions = await db.executeQuery(`
                SELECT COUNT(*) as count, 
                       MAX(last_check_at) as last_activity,
                       COUNT(CASE WHEN status = 'active' THEN 1 END) as active_sessions
                FROM subgram_user_sessions
                WHERE expires_at > NOW()
            `);
            
            if (sessions.rows.length > 0) {
                const stats = sessions.rows[0];
                console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:`);
                console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${stats.count}`);
                console.log(`  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: ${stats.active_sessions}`);
                console.log(`  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${stats.last_activity || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
            } else {
                console.log('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error.message);
        }
        console.log('');

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        console.log('7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        try {
            const channels = await db.executeQuery(`
                SELECT COUNT(*) as total_channels,
                       COUNT(DISTINCT user_id) as users_with_channels,
                       MAX(created_at) as last_channel_added
                FROM subgram_channels
            `);
            
            if (channels.rows.length > 0) {
                const stats = channels.rows[0];
                console.log(`üì∫ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:`);
                console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${stats.total_channels}`);
                console.log(`  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–Ω–∞–ª–∞–º–∏: ${stats.users_with_channels}`);
                console.log(`  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: ${stats.last_channel_added || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
            } else {
                console.log('üì≠ –ö–∞–Ω–∞–ª–æ–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error.message);
        }
        console.log('');

        // 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('8Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –í–´–í–û–î–´');
        console.log('==========================================');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        try {
            const errorStats = await db.executeQuery(`
                SELECT 
                    COUNT(*) as total_requests,
                    COUNT(CASE WHEN success = true THEN 1 END) as successful_requests,
                    COUNT(CASE WHEN success = false THEN 1 END) as failed_requests
                FROM subgram_api_requests 
                WHERE created_at > NOW() - INTERVAL '24 hours'
            `);
            
            if (errorStats.rows.length > 0) {
                const stats = errorStats.rows[0];
                const errorRate = stats.total_requests > 0 ? 
                    (stats.failed_requests / stats.total_requests * 100).toFixed(1) : 0;
                
                console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:`);
                console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.total_requests}`);
                console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successful_requests}`);
                console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${stats.failed_requests}`);
                console.log(`  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${errorRate}%`);
                
                if (errorRate > 50) {
                    console.log('üö® –í–´–°–û–ö–ò–ô –ü–†–û–¶–ï–ù–¢ –û–®–ò–ë–û–ö - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!');
                } else if (errorRate > 20) {
                    console.log('‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
                } else {
                    console.log('‚úÖ –ü—Ä–∏–µ–º–ª–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫');
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫');
        }

        console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('1. –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - ÔøΩÔøΩ—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ SubGram');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã');
        console.log('4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î');

    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    debugSubGramStatus();
}

module.exports = { debugSubGramStatus };
