console.log('üîß [FIX-REFERRALS] –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');

const db = require('./database');

async function fixReferralDuplicates() {
    try {
        console.log('üìä [FIX-REFERRALS] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();

        console.log('üîç [FIX-REFERRALS] –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
        const referrers = await db.executeQuery(`
            SELECT 
                id as referrer_id,
                first_name,
                username,
                referrals_count,
                balance
            FROM users 
            WHERE referrals_count > 0
            ORDER BY referrals_count DESC
        `);

        console.log(`üìà [FIX-REFERRALS] –ù–∞–π–¥–µ–Ω–æ ${referrers.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏`);

        let totalCorrections = 0;
        let totalStarsDeducted = 0;
        let totalUsersAffected = 0;

        for (const referrer of referrers.rows) {
            console.log(`üë§ [FIX-REFERRALS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${referrer.first_name} (ID: ${referrer.referrer_id})`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const invitedUsers = await db.executeQuery(`
                SELECT 
                    id,
                    first_name,
                    username,
                    captcha_passed,
                    is_subscribed,
                    referral_processed,
                    registered_at
                FROM users 
                WHERE invited_by = $1
            `, [referrer.referrer_id]);

            let activeReferrals = 0;
            let unprocessedActiveReferrals = 0;

            for (const invitedUser of invitedUsers.rows) {
                const isActive = invitedUser.captcha_passed && invitedUser.is_subscribed;
                
                if (isActive) {
                    activeReferrals++;
                    if (!invitedUser.referral_processed) {
                        unprocessedActiveReferrals++;
                    }
                }
            }

            const recordedReferrals = referrer.referrals_count;
            const shouldHaveReferrals = activeReferrals;
            const overcount = recordedReferrals - shouldHaveReferrals;

            console.log(`   üìã –ó–∞–ø–∏—Å–∞–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${recordedReferrals}`);
            console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${activeReferrals}`);
            console.log(`   üîÑ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${unprocessedActiveReferrals}`);
            console.log(`   ‚ö†Ô∏è –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ${overcount}`);

            if (overcount > 0) {
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–ø–ª–∞—Ç—É
                const starsToDeduct = overcount * 3;
                const newBalance = Math.max(0, referrer.balance - starsToDeduct);
                const actualDeducted = referrer.balance - newBalance;

                console.log(`   üí∏ –°–ø–∏—Å–∞–Ω–∏–µ: ${actualDeducted} –∑–≤—ë–∑–¥`);

                await db.executeQuery(`
                    UPDATE users 
                    SET 
                        balance = $1,
                        referrals_count = $2
                    WHERE id = $3
                `, [newBalance, shouldHaveReferrals, referrer.referrer_id]);

                totalCorrections++;
                totalStarsDeducted += actualDeducted;
                totalUsersAffected++;

                console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–∞–ª–∞–Ω—Å ${referrer.balance} ‚Üí ${newBalance}, —Ä–µ—Ñ–µ—Ä–∞–ª—ã ${recordedReferrals} ‚Üí ${shouldHaveReferrals}`);
            }

            // –û—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            if (unprocessedActiveReferrals > 0) {
                console.log(`   üîÑ –û—Ç–º–µ—á–∞–µ–º ${unprocessedActiveReferrals} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö...`);
                
                await db.executeQuery(`
                    UPDATE users 
                    SET referral_processed = TRUE 
                    WHERE invited_by = $1 
                    AND captcha_passed = TRUE 
                    AND is_subscribed = TRUE 
                    AND referral_processed = FALSE
                `, [referrer.referrer_id]);
            }
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º referral_processed
        console.log('üîç [FIX-REFERRALS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤ referral_processed...');
        
        const wrongFlags = await db.executeQuery(`
            SELECT 
                id, 
                first_name, 
                invited_by, 
                captcha_passed, 
                is_subscribed, 
                referral_processed 
            FROM users 
            WHERE invited_by IS NOT NULL 
            AND (
                (referral_processed = TRUE AND (captcha_passed = FALSE OR is_subscribed = FALSE))
                OR
                (referral_processed = FALSE AND captcha_passed = TRUE AND is_subscribed = TRUE)
            )
        `);

        if (wrongFlags.rows.length > 0) {
            console.log(`‚ö†Ô∏è [FIX-REFERRALS] –ù–∞–π–¥–µ–Ω–æ ${wrongFlags.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏`);
            
            for (const user of wrongFlags.rows) {
                const shouldBeProcessed = user.captcha_passed && user.is_subscribed;
                
                if (user.referral_processed !== shouldBeProcessed) {
                    await db.executeQuery(`
                        UPDATE users 
                        SET referral_processed = $1 
                        WHERE id = $2
                    `, [shouldBeProcessed, user.id]);
                    
                    console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ –¥–ª—è ${user.first_name} (ID: ${user.id}): ${user.referral_processed} ‚Üí ${shouldBeProcessed}`);
                }
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('\nüéØ [FIX-REFERRALS] –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('‚ïê'.repeat(50));
        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${referrers.rows.length}`);
        console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–µ—Ä–µ–ø–ª–∞—Ç–æ–π: ${totalUsersAffected}`);
        console.log(`üí∏ –í—Å–µ–≥–æ –∑–≤—ë–∑–¥ —Å–ø–∏—Å–∞–Ω–æ: ${totalStarsDeducted}`);
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–ª–∞–≥–æ–≤: ${wrongFlags.rows.length}`);
        console.log('‚ïê'.repeat(50));

        if (totalUsersAffected === 0) {
            console.log('üéâ [FIX-REFERRALS] –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        } else {
            console.log('‚úÖ [FIX-REFERRALS] –í—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('\nüìä [FIX-REFERRALS] –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
        
        const finalCheck = await db.executeQuery(`
            SELECT COUNT(*) as count 
            FROM users u1
            JOIN users u2 ON u1.id = u2.invited_by
            WHERE u2.captcha_passed = TRUE 
            AND u2.is_subscribed = TRUE 
            AND u2.referral_processed = FALSE
        `);

        const unprocessedActive = parseInt(finalCheck.rows[0].count);
        
        if (unprocessedActive > 0) {
            console.log(`‚ö†Ô∏è [FIX-REFERRALS] –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ ${unprocessedActive} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
            console.log('üîÑ [FIX-REFERRALS] –≠—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        } else {
            console.log('‚úÖ [FIX-REFERRALS] –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
        }

    } catch (error) {
        console.error('‚ùå [FIX-REFERRALS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    fixReferralDuplicates()
        .then(() => {
            console.log('üéØ [FIX-REFERRALS] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå [FIX-REFERRALS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { fixReferralDuplicates };
