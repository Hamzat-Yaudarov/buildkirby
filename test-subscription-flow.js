/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–æ–≤–æ–π –ø–æ—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã flow: —Å–ø–æ–Ω—Å–æ—Ä—ã ‚Üí –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
 */

const db = require('./database');
const subscriptionFlow = require('./subscription-flow-manager');

// –ú–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockBot = {
    async getChatMember(channelId, userId) {
        console.log(`[MOCK BOT] Checking ${channelId} for user ${userId}`);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (channelId.includes('sponsor')) {
            return { status: 'left' }; // –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        } else if (channelId.includes('required')) {
            return { status: 'member' }; // –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        }
        
        return { status: 'member' }; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–∞–Ω
    }
};

async function testSubscriptionFlow() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...\n');

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

        const testUserId = 123456789;

        // 1. –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏...');
        const stageInfo = await subscriptionFlow.getCurrentSubscriptionStage(testUserId);
        
        console.log(`üìã –≠—Ç–∞–ø: ${stageInfo.stage}`);
        console.log(`üéØ –î–µ–π—Å—Ç–≤–∏–µ: ${stageInfo.nextAction}`);
        console.log(`üì∫ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${stageInfo.sponsorChannels?.length || 0}`);
        console.log(`üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${stageInfo.requiredChannels?.length || 0}`);
        console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stageInfo.allCompleted}`);
        console.log(`üì§ –ö–∞–Ω–∞–ª–æ–≤ –∫ –ø–æ–∫–∞–∑—É: ${stageInfo.channelsToShow?.length || 0}\n`);

        // 2. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Å –±–æ—Ç–æ–º...');
        const updatedStageInfo = await subscriptionFlow.updateSubscriptionStage(mockBot, testUserId);
        
        console.log(`üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç—Ç–∞–ø: ${updatedStageInfo.stage}`);
        console.log(`üéØ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${updatedStageInfo.nextAction}`);
        console.log(`üèÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${updatedStageInfo.allCompleted}`);
        console.log(`üì§ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –∫ –ø–æ–∫–∞–∑—É: ${updatedStageInfo.channelsToShow?.length || 0}\n`);

        // 3. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...');
        const stageMessage = subscriptionFlow.formatStageMessage(updatedStageInfo);
        
        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:');
        console.log(stageMessage.message);
        console.log(`\nüîò –ö–Ω–æ–ø–æ–∫: ${stageMessage.buttons.length}\n`);

        // 4. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞...');
        const canAccess = await subscriptionFlow.canUserAccessBot(testUserId);
        console.log(`üîì –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞: ${canAccess}\n`);

        // 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        const sponsorChannels = await subscriptionFlow.getSponsorChannels(testUserId);
        console.log(`üíé –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${sponsorChannels.length}`);
        sponsorChannels.forEach((ch, i) => {
            console.log(`   ${i + 1}. ${ch.name} (${ch.link})`);
        });
        console.log();

        // 6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        const requiredChannels = await subscriptionFlow.getRequiredChannels();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${requiredChannels.length}`);
        requiredChannels.forEach((ch, i) => {
            console.log(`   ${i + 1}. ${ch.name} (${ch.link})`);
        });
        console.log();

        // 7. –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ flow
        console.log('7Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ flow –ø–æ–¥–ø–∏—Å–æ–∫...');
        
        let currentStage = stageInfo;
        let step = 1;
        
        while (!currentStage.allCompleted && step <= 3) {
            console.log(`   –®–∞–≥ ${step}: –≠—Ç–∞–ø ${currentStage.stage}`);
            console.log(`   –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${currentStage.channelsToShow?.length || 0}`);
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (currentStage.channelsToShow && currentStage.channelsToShow.length > 0) {
                currentStage.channelsToShow.forEach(ch => {
                    ch.subscribed = true; // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    console.log(`   ‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞: ${ch.name}`);
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            currentStage = await subscriptionFlow.updateSubscriptionStage(mockBot, testUserId);
            step++;
        }
        
        if (currentStage.allCompleted) {
            console.log('   üéâ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç.\n');
        } else {
            console.log('   ‚ö†ÔøΩÔøΩ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏.\n');
        }

        console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await db.closeConnection();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...\n');
testSubscriptionFlow();
