const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ÔøΩÔøΩ–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
const oldDbConfig = {
    connectionString: 'postgresql://neondb_owner:npg_kA5CYbq6KRQD@ep-late-math-a23qdcph-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require',
    ssl: { rejectUnauthorized: false }
};

const newDbConfig = {
    connectionString: 'postgresql://neondb_owner:npg_YC1S8JfBNKWg@ep-quiet-cloud-a2e7auqd-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require',
    ssl: { rejectUnauthorized: false }
};

const oldPool = new Pool(oldDbConfig);
const newPool = new Pool(newDbConfig);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
async function migrateTable(tableName, primaryKey = 'id') {
    try {
        console.log(`üìä –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
        const oldData = await oldPool.query(`SELECT * FROM ${tableName}`);
        console.log(`üì• –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å—Ç–∞—Ä–æ–π –ë–î: ${oldData.rows.length}`);

        if (oldData.rows.length === 0) {
            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return { migrated: 0, total: 0 };
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const columns = Object.keys(oldData.rows[0]);
        const columnsList = columns.join(', ');
        const valuesList = columns.map((_, index) => `$${index + 1}`).join(', ');

        let migratedCount = 0;
        let errorCount = 0;

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for (const row of oldData.rows) {
            try {
                const values = columns.map(col => row[col]);

                await newPool.query(`
                    INSERT INTO ${tableName} (${columnsList}) 
                    VALUES (${valuesList})
                    ON CONFLICT (${primaryKey}) DO UPDATE SET
                    ${columns.filter(col => col !== primaryKey).map(col => `${col} = EXCLUDED.${col}`).join(', ')}
                `, values);

                migratedCount++;
                
                if (migratedCount % 100 === 0) {
                    console.log(`üì§ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedCount}/${oldData.rows.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${tableName}`);
                }
            } catch (error) {
                errorCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ ${tableName}:`, error.message);
                if (errorCount > 10) {
                    console.error(`üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableName}, –ø—Ä–µ—Ä—ã–≤–∞–µ–º`);
                    break;
                }
            }
        }

        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${migratedCount}/${oldData.rows.length} –∑–∞–ø–∏—Å–µ–π`);
        return { migrated: migratedCount, total: oldData.rows.length, errors: errorCount };

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
        return { migrated: 0, total: 0, errors: 1 };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π –ë–î
async function createDatabaseStructure() {
    try {
        console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤–æ–π –ë–î...');
        
        const Database = require('./database');
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –ë–î
        const originalPool = Database.pool;
        Database.pool = newPool;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
        await Database.init();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        Database.pool = originalPool;
        
        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –≤ –Ω–æ–≤–æ–π –ë–î');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î:', error.message);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrateDatabase() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    console.log('üì° –°—Ç–∞—Ä–∞—è –ë–î:', oldDbConfig.connectionString.split('@')[1].split('/')[0]);
    console.log('üì° –ù–æ–≤–∞—è –ë–î:', newDbConfig.connectionString.split('@')[1].split('/')[0]);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...');
        await oldPool.query('SELECT NOW()');
        await newPool.query('SELECT NOW()');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã');

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –Ω–æ–≤–æ–π –ë–î
        await createDatabaseStructure();

        // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        const tablesToMigrate = [
            { name: 'users', primaryKey: 'user_id' },
            { name: 'tasks', primaryKey: 'id' },
            { name: 'user_tasks', primaryKey: 'id' },
            { name: 'promocodes', primaryKey: 'id' },
            { name: 'promocode_uses', primaryKey: 'id' },
            { name: 'lotteries', primaryKey: 'id' },
            { name: 'lottery_tickets', primaryKey: 'id' },
            { name: 'withdrawal_requests', primaryKey: 'id' },
            { name: 'bot_stats', primaryKey: 'id' },
            { name: 'subgram_tasks', primaryKey: 'id' },
            { name: 'sponsor_channels_stats', primaryKey: 'channel_identifier' },
            { name: 'sponsor_channel_user_checks', primaryKey: 'id' }
        ];

        const migrationResults = {};

        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for (const table of tablesToMigrate) {
            try {
                migrationResults[table.name] = await migrateTable(table.name, table.primaryKey);
            } catch (error) {
                console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${table.name}:`, error.message);
                migrationResults[table.name] = { migrated: 0, total: 0, errors: 1 };
            }
        }

        // –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        console.log('\nüìã –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò:');
        console.log('================================');
        
        let totalMigrated = 0;
        let totalRecords = 0;
        let totalErrors = 0;

        for (const [tableName, result] of Object.entries(migrationResults)) {
            const status = result.errors > 0 ? '‚ö†Ô∏è' : '‚úÖ';
            console.log(`${status} ${tableName}: ${result.migrated}/${result.total} (–æ—à–∏–±–æ–∫: ${result.errors || 0})`);
            
            totalMigrated += result.migrated;
            totalRecords += result.total;
            totalErrors += result.errors || 0;
        }

        console.log('================================');
        console.log(`üìä –ò–¢–û–ì–û: ${totalMigrated}/${totalRecords} –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);

        if (totalErrors === 0 && totalMigrated === totalRecords) {
            console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('üí° –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ config.js –Ω–∞ –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
            return true;
        } else {
            console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º.');
            return false;
        }

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
        return false;
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await oldPool.end();
        await newPool.end();
        console.log('üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã');
    }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
    migrateDatabase()
        .then((success) => {
            if (success) {
                console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
                console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ config.js');
                console.log('   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞');
                console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π');
                process.exit(0);
            } else {
                console.log('\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
                process.exit(1);
            }
        })
        .catch((error) => {
            console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { migrateDatabase };
