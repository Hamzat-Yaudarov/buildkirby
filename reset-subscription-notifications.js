const db = require('./database');

async function resetAllSubscriptionNotifications() {
    console.log('üîÑ –°–ë–†–û–° –°–¢–ê–¢–£–°–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    console.log('(–ö–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)');
    console.log('=' .repeat(50));

    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.initializeDatabase();

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ —Å–±—Ä–æ—Å–∞
        const statsBefore = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(*) FILTER (WHERE subscription_notified = TRUE) as notified_users,
                COUNT(*) FILTER (WHERE is_subscribed = TRUE) as subscribed_users
            FROM users
        `);

        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –°–ë–†–û–°–ê:');
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsBefore.rows[0].total_users}`);
        console.log(`   - –° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: ${statsBefore.rows[0].notified_users}`);
        console.log(`   - –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsBefore.rows[0].subscribed_users}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å
        console.log('\nüîÑ –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –°–ë–†–û–°...');
        const resetResult = await db.executeQuery('UPDATE users SET subscription_notified = FALSE');
        const resetCount = resetResult.rowCount;

        console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${resetCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        const statsAfter = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(*) FILTER (WHERE subscription_notified = TRUE) as notified_users,
                COUNT(*) FILTER (WHERE is_subscribed = TRUE) as subscribed_users
            FROM users
        `);

        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –°–ë–†–û–°–ê:');
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsAfter.rows[0].total_users}`);
        console.log(`   - –° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: ${statsAfter.rows[0].notified_users}`);
        console.log(`   - –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${statsAfter.rows[0].subscribed_users}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        const channels = await db.executeQuery(`
            SELECT channel_id, channel_name 
            FROM required_channels 
            WHERE is_active = TRUE 
            ORDER BY created_at
        `);

        console.log('\nüì∫ –ê–ö–¢–ò–í–ù–´–ï –ö–ê–ù–ê–õ–´:');
        if (channels.rows.length === 0) {
            console.log('   (–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)');
        } else {
            channels.rows.forEach((channel, index) => {
                console.log(`   ${index + 1}. ${channel.channel_name || channel.channel_id} (${channel.channel_id})`);
            });
        }

        console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ë–†–û–°–ê:');
        console.log(`   üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${resetCount}`);
        console.log(`   üì± –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º /start –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µÔøΩÔøΩ–∏ —É–≤–∏–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö`);
        console.log(`   üéØ –≠—Ç–æ —ç–º—É–ª–∏—Ä—É–µ—Ç "–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"`);

        console.log('\nüìù –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –î–ê–õ–¨–®–ï:');
        console.log('   1. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º /start –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö');
        console.log('   2. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ "—É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π"');
        console.log('   3. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');

    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–ë–†–û–°–ï:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    resetAllSubscriptionNotifications()
        .then(() => {
            console.log('\nüéâ –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
            console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É "–ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô:', error);
            process.exit(1);
        });
}

module.exports = { resetAllSubscriptionNotifications };
