/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ SubGram –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const db = require('./database');

async function checkSubGramLogs() {
    console.log('üìã –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í SUBGRAM\n');

    try {
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

        // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('1Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...');
        const totalStats = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_requests,
                COUNT(CASE WHEN success = true THEN 1 END) as successful_requests,
                COUNT(CASE WHEN success = false THEN 1 END) as failed_requests,
                MIN(created_at) as first_request,
                MAX(created_at) as last_request
            FROM subgram_api_requests
        `);

        if (totalStats.rows.length > 0) {
            const stats = totalStats.rows[0];
            const errorRate = stats.total_requests > 0 ? 
                (stats.failed_requests / stats.total_requests * 100).toFixed(1) : 0;

            console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.total_requests}`);
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successful_requests}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${stats.failed_requests}`);
            console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${errorRate}%`);
            console.log(`üìÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${stats.first_request || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
            console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: ${stats.last_request || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
        } else {
            console.log('üì≠ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        console.log('');

        // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        console.log('2Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...');
        const recentStats = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_requests,
                COUNT(CASE WHEN success = true THEN 1 END) as successful_requests,
                COUNT(CASE WHEN success = false THEN 1 END) as failed_requests,
                COUNT(DISTINCT user_id) as unique_users
            FROM subgram_api_requests 
            WHERE created_at > NOW() - INTERVAL '24 hours'
        `);

        if (recentStats.rows.length > 0) {
            const stats = recentStats.rows[0];
            const errorRate = stats.total_requests > 0 ? 
                (stats.failed_requests / stats.total_requests * 100).toFixed(1) : 0;

            console.log(`üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 24—á: ${stats.total_requests}`);
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successful_requests}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${stats.failed_requests}`);
            console.log(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.unique_users}`);
            console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: ${errorRate}%`);
        }
        console.log('');

        // 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ API
        console.log('3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ API –æ—Ç–≤–µ—Ç–æ–≤...');
        const statusStats = await db.executeQuery(`
            SELECT 
                api_status,
                COUNT(*) as count,
                COUNT(CASE WHEN success = true THEN 1 END) as successful
            FROM subgram_api_requests 
            WHERE created_at > NOW() - INTERVAL '24 hours'
            AND api_status IS NOT NULL
            GROUP BY api_status
            ORDER BY count DESC
        `);

        if (statusStats.rows.length > 0) {
            console.log('üìä –°—Ç–∞—Ç—É—Å—ã API –æ—Ç–≤–µ—Ç–æ–≤:');
            statusStats.rows.forEach(stat => {
                console.log(`  ‚Ä¢ ${stat.api_status}: ${stat.count} (—É—Å–ø–µ—à–Ω—ã—Ö: ${stat.successful})`);
            });
        } else {
            console.log('üì≠ –°—Ç–∞—Ç—É—Å—ã API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        console.log('');

        // 4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        console.log('4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (—Ç–æ–ø 10)...');
        const errors = await db.executeQuery(`
            SELECT 
                user_id,
                error_message,
                api_status,
                response_data,
                created_at
            FROM subgram_api_requests 
            WHERE success = false
            ORDER BY created_at DESC
            LIMIT 10
        `);

        if (errors.rows.length > 0) {
            console.log('‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:');
            errors.rows.forEach((error, index) => {
                const date = new Date(error.created_at).toLocaleString('ru-RU');
                console.log(`  ${index + 1}. [${date}] User ${error.user_id}`);
                console.log(`     –û—à–∏–±–∫–∞: ${error.error_message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                if (error.api_status) {
                    console.log(`     API —Å—Ç–∞—Ç—É—Å: ${error.api_status}`);
                }
                if (error.response_data && Object.keys(error.response_data).length > 0) {
                    console.log(`     –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(error.response_data).substring(0, 100)}...`);
                }
                console.log('');
            });
        } else {
            console.log('‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        console.log('');

        // 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        console.log('5Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ç–æ–ø 5)...');
        const successful = await db.executeQuery(`
            SELECT 
                user_id,
                api_status,
                response_data,
                created_at
            FROM subgram_api_requests 
            WHERE success = true
            ORDER BY created_at DESC
            LIMIT 5
        `);

        if (successful.rows.length > 0) {
            console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
            successful.rows.forEach((success, index) => {
                const date = new Date(success.created_at).toLocaleString('ru-RU');
                const links = success.response_data?.links?.length || 0;
                console.log(`  ${index + 1}. [${date}] User ${success.user_id}`);
                console.log(`     API —Å—Ç–∞—Ç—É—Å: ${success.api_status || 'unknown'}`);
                console.log(`     –°—Å—ã–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ: ${links}`);
                console.log('');
            });
        } else {
            console.log('üì≠ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        console.log('');

        // 6. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        console.log('6Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫...');
        const errorTypes = await db.executeQuery(`
            SELECT 
                CASE 
                    WHEN error_message LIKE '%timeout%' OR error_message LIKE '%ECONNREFUSED%' THEN '–°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏'
                    WHEN error_message LIKE '%401%' OR error_message LIKE '%unauthorized%' THEN '–û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                    WHEN error_message LIKE '%400%' OR error_message LIKE '%bad request%' THEN '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å'
                    WHEN error_message LIKE '%500%' OR error_message LIKE '%server error%' THEN '–û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞'
                    ELSE '–î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏'
                END as error_type,
                COUNT(*) as count
            FROM subgram_api_requests 
            WHERE success = false
            AND created_at > NOW() - INTERVAL '7 days'
            GROUP BY error_type
            ORDER BY count DESC
        `);

        if (errorTypes.rows.length > 0) {
            console.log('üîç –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:');
            errorTypes.rows.forEach(type => {
                console.log(`  ‚Ä¢ ${type.error_type}: ${type.count}`);
            });
        } else {
            console.log('‚úÖ –û—à–∏–±–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        console.log('');

        // 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('7Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
        console.log('==========================================');

        const recentData = recentStats.rows[0];
        if (recentData.total_requests === 0) {
            console.log('‚ö†Ô∏è –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–°–¢–ò: –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SubGram');
            console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç');
            console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–æ—Ç–∞');
        } else {
            const errorRate = (recentData.failed_requests / recentData.total_requests * 100);
            
            if (errorRate === 0) {
                console.log('üéâ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!');
            } else if (errorRate < 10) {
                console.log('‚úÖ –•–û–†–û–®–û: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫');
            } else if (errorRate < 30) {
                console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫');
                console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞');
                console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ SubGram');
            } else if (errorRate < 60) {
                console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫');
                console.log('   ‚Ä¢ –°—Ä–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SubGram');
                console.log('   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
            } else {
                console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫');
                console.log('   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log('   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ');
            }
        }

        console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ SubGram –ø–∞–Ω–µ–ª–∏');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
        console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞');
        console.log('4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É SubGram');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    checkSubGramLogs();
}

module.exports = { checkSubGramLogs };
