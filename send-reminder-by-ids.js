const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');
const config = require('./config');

const bot = new TelegramBot(config.BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∏—Ö ID
async function sendReminderToUserIds(userIds) {
    try {
        console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ª–æ–≥–æ–≤ Railway...\n');

        await Database.init();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {
            console.log('‚ùå –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        console.log(`üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);

        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const reminderMessage = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        const usersInDb = await Database.pool.query(`
            SELECT user_id, first_name, username, captcha_passed, referral_completed, created_at
            FROM users 
            WHERE user_id = ANY($1)
            ORDER BY created_at DESC
        `, [userIds]);

        const foundUserIds = usersInDb.rows.map(user => user.user_id);
        const notFoundUserIds = userIds.filter(id => !foundUserIds.includes(parseInt(id)));

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${foundUserIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        console.log(`‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: ${notFoundUserIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        if (notFoundUserIds.length > 0) {
            console.log('\nüëª –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ù–ï –ù–ê–ô–î–ï–ù–ù–´–ï –í –ë–î:');
            notFoundUserIds.forEach((userId, index) => {
                console.log(`   ${index + 1}. ID: ${userId} - ‚ö†Ô∏è –ù–ï –°–û–•–†–ê–ù–ò–õ–°–Ø –í –ë–î`);
            });
        }

        if (usersInDb.rows.length > 0) {
            console.log('\nüë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ù–ê–ô–î–ï–ù–ù–´–ï –í –ë–î:');
            usersInDb.rows.forEach((user, index) => {
                const date = new Date(user.created_at).toLocaleDateString('ru-RU');
                const captcha = user.captcha_passed ? '‚úÖ' : '‚ùå';
                const activated = user.referral_completed ? '‚úÖ' : '‚ùå';
                console.log(`   ${index + 1}. ${user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.user_id}) - ${date}`);
                console.log(`      ü§ñ –ö–∞–ø—á–∞: ${captcha} | üë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${activated}`);
            });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–∞–∂–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î)
        console.log(`\nüì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: "${reminderMessage}"`);
        console.log(`üì§ –ë—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–≤–∫–ª—é—á–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –ë–î)\n`);

        let successCount = 0;
        let errorCount = 0;
        let blockedCount = 0;
        let notFoundCount = 0;

        for (let i = 0; i < userIds.length; i++) {
            const userId = parseInt(userIds[i]);
            const progress = `[${i + 1}/${userIds.length}]`;
            const userInDb = usersInDb.rows.find(u => u.user_id === userId);
            const userName = userInDb ? userInDb.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏' : '–ù–ï –í –ë–î';
            
            try {
                await bot.sendMessage(userId, reminderMessage);
                
                const dbStatus = userInDb ? '(–≤ –ë–î)' : '(–ù–ï –í –ë–î)';
                console.log(`${progress} ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} (${userName}) ${dbStatus}`);
                successCount++;

                // –ó–∞–¥–µ—Ä–∂–∫–∞ 100ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                await new Promise(resolve => setTimeout(resolve, 100));

            } catch (error) {
                if (error.response && error.response.body) {
                    const errorCode = error.response.body.error_code;
                    const description = error.response.body.description;

                    if (errorCode === 403) {
                        console.log(`${progress} üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
                        blockedCount++;
                    } else if (errorCode === 400 && description.includes('chat not found')) {
                        console.log(`${progress} ‚ùå –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        notFoundCount++;
                    } else {
                        console.log(`${progress} ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${description}`);
                        errorCount++;
                    }
                } else {
                    console.log(`${progress} ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
                    errorCount++;
                }
            }
        }

        console.log('\nüìä –ò–¢–û–ì–ò –û–¢–ü–†–ê–í–ö–ò:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${blockedCount}`);
        console.log(`‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${notFoundCount}`);
        console.log(`‚ùå –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: ${errorCount}`);
        console.log(`üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount + blockedCount + notFoundCount + errorCount}`);

        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log('\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
        
        if (notFoundUserIds.length > 0) {
            console.log(`üëª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï –°–û–•–†–ê–ù–ï–ù–ù–´–ï –≤ –ë–î: ${notFoundUserIds.length}`);
            console.log('   ‚Ü≥ –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ—Ç–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª–æ–≥–æ–≤ Railway');
        }

        if (foundUserIds.length > 0) {
            console.log(`üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ê–ô–î–ï–ù–ù–´–ï –≤ –ë–î: ${foundUserIds.length}`);
            
            const captchaFailed = usersInDb.rows.filter(u => !u.captcha_passed).length;
            const notActivated = usersInDb.rows.filter(u => !u.referral_completed).length;
            
            if (captchaFailed > 0) {
                console.log(`   ü§ñ –ù–ï –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: ${captchaFailed}`);
            }
            if (notActivated > 0) {
                console.log(`   üì¢ –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã (–ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π): ${notActivated}`);
            }
        }

        return {
            totalProcessed: userIds.length,
            successCount,
            blockedCount,
            notFoundCount,
            errorCount,
            foundInDb: foundUserIds.length,
            notFoundInDb: notFoundUserIds.length
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
        throw error;
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ ID –∏–∑ –ª–æ–≥–æ–≤
async function exampleUsage() {
    try {
        // –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –°–ü–ò–°–û–ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –≤–∞—à–∏—Ö –ª–æ–≥–æ–≤ Railway
        const userIdsFromLogs = [
            123456789,   // –ü—Ä–∏–º–µ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            987654321,   // –ü—Ä–∏–º–µ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –ª–æ–≥–æ–≤ Railway
        ];

        await sendReminderToUserIds(userIdsFromLogs);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await Database.pool.end();
        process.exit(0);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è ID –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª —Å ID)
async function sendReminderFromFile(filePath) {
    try {
        const fs = require('fs');
        
        if (!fs.existsSync(filePath)) {
            console.log(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        const fileContent = fs.readFileSync(filePath, 'utf8');
        
        // –ü–∞—Ä—Å–∏ÔøΩÔøΩ ID –∏–∑ —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π ID –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
        const userIds = fileContent
            .split('\n')
            .map(line => line.trim())
            .filter(line => line && !isNaN(line))
            .map(line => parseInt(line));

        console.log(`üìÅ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${userIds.length} ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ ${filePath}`);

        if (userIds.length === 0) {
            console.log('‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        await sendReminderToUserIds(userIds);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    console.log('üöÄ –°–ö–†–ò–ü–¢ –û–¢–ü–†–ê–í–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ü–û –ö–û–ù–ö–†–ï–¢–ù–´–ú ID\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    if (args.length > 0 && args[0].endsWith('.txt')) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª —Å ID
        console.log(`üìÅ –†–µ–∂–∏–º —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞: ${args[0]}`);
        sendReminderFromFile(args[0]).then(() => {
            Database.pool.end();
            process.exit(0);
        });
    } else if (args.length > 0) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã ID –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        const userIds = args.map(id => parseInt(id)).filter(id => !isNaN(id));
        console.log(`üìã –†–µ–∂–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: ${userIds.length} ID`);
        sendReminderToUserIds(userIds).then(() => {
            Database.pool.end();
            process.exit(0);
        });
    } else {
        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ (–Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ID –≤ –∫–æ–¥–µ)
        console.log('‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–º–µ—Ä–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ userIdsFromLogs –≤ –∫–æ–¥–µ!');
        exampleUsage();
    }
}

module.exports = { sendReminderToUserIds, sendReminderFromFile };
