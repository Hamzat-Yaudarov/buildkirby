#!/usr/bin/env node
/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≤–æ–¥–æ–º
 */

const db = require('./database');

async function findProblematicUsers() {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –≤—ã–≤–æ–¥–∞...\n');
    
    try {
        await db.initializeDatabase();
        
        // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        console.log('1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏...');
        const badNameUsers = await db.executeQuery(`
            SELECT id, first_name, username, balance, referrals_count
            FROM users 
            WHERE balance >= 15 AND referrals_count >= 5
            AND (
                first_name IS NULL 
                OR LENGTH(first_name) > 100 
                OR first_name ~ '[\\x{FFFD}\\x{200D}\\x{200C}\\x{200B}]'
                OR first_name ~ '[\\x{2600}-\\x{26FF}\\x{2700}-\\x{27BF}]'
                OR LENGTH(TRIM(first_name)) = 0
            )
            LIMIT 10
        `);
        
        console.log(`Found ${badNameUsers.rows.length} users with problematic names:`);
        for (const user of badNameUsers.rows) {
            console.log(`  ‚Ä¢ ID: ${user.id}, Name: "${user.first_name}", Balance: ${user.balance}‚≠ê`);
        }
        
        // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ username
        console.log('\n2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ username...');
        const badUsernameUsers = await db.executeQuery(`
            SELECT id, first_name, username, balance, referrals_count
            FROM users 
            WHERE balance >= 15 AND referrals_count >= 5
            AND username IS NOT NULL
            AND LENGTH(username) > 32
            LIMIT 10
        `);
        
        console.log(`Found ${badUsernameUsers.rows.length} users with long usernames:`);
        for (const user of badUsernameUsers.rows) {
            console.log(`  ‚Ä¢ ID: ${user.id}, Username: "${user.username}", Length: ${user.username?.length}`);
        }
        
        // 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        console.log('\n3Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã...');
        const unsubscribedUsers = await db.executeQuery(`
            SELECT id, first_name, username, balance, referrals_count, registered_at
            FROM users 
            WHERE balance >= 15 AND referrals_count >= 5
            AND is_subscribed = FALSE
            ORDER BY balance DESC
            LIMIT 10
        `);
        
        console.log(`Found ${unsubscribedUsers.rows.length} eligible users not subscribed:`);
        for (const user of unsubscribedUsers.rows) {
            console.log(`  ‚Ä¢ ID: ${user.id}, Balance: ${user.balance}‚≠ê, Refs: ${user.referrals_count}`);
        }
        
        // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º –±–µ–∑ –∑–∞—è–≤–æ–∫
        console.log('\n4Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º –±–µ–∑ –∑–∞—è–≤–æ–∫...');
        const highBalanceUsers = await db.executeQuery(`
            SELECT u.id, u.first_name, u.username, u.balance, u.referrals_count, u.is_subscribed
            FROM users u
            LEFT JOIN withdrawal_requests wr ON u.id = wr.user_id 
                AND wr.created_at > NOW() - INTERVAL '30 days'
            WHERE u.balance >= 50 
            AND u.referrals_count >= 5
            AND u.is_subscribed = TRUE
            AND wr.id IS NULL
            ORDER BY u.balance DESC
            LIMIT 10
        `);
        
        console.log(`Found ${highBalanceUsers.rows.length} high-balance users without recent withdrawals:`);
        for (const user of highBalanceUsers.rows) {
            console.log(`  ‚Ä¢ ID: ${user.id}, Balance: ${user.balance}‚≠ê, Subscribed: ${user.is_subscribed}`);
        }
        
        // 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏)
        console.log('\n5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const recentActiveUsers = await db.executeQuery(`
            SELECT id, first_name, balance, referrals_count, is_subscribed, updated_at
            FROM users 
            WHERE updated_at > NOW() - INTERVAL '24 hours'
            AND balance >= 15 
            AND referrals_count >= 5
            ORDER BY updated_at DESC
            LIMIT 10
        `);
        
        console.log(`Found ${recentActiveUsers.rows.length} recently active eligible users:`);
        for (const user of recentActiveUsers.rows) {
            console.log(`  ‚Ä¢ ID: ${user.id}, Balance: ${user.balance}‚≠ê, Last activity: ${new Date(user.updated_at).toLocaleString()}`);
        }
        
        // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('\n6Ô∏è‚É£ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
        
        const allProblematicIds = [
            ...badNameUsers.rows.map(u => u.id),
            ...badUsernameUsers.rows.map(u => u.id),
            ...unsubscribedUsers.rows.slice(0, 3).map(u => u.id),
            ...highBalanceUsers.rows.slice(0, 3).map(u => u.id)
        ];
        
        const uniqueIds = [...new Set(allProblematicIds)];
        
        console.log('\n–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –±–æ—Ç–µ:');
        for (const userId of uniqueIds.slice(0, 5)) {
            console.log(`/diagnose_user ${userId}`);
        }
        
        // 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
        console.log('\n7Ô∏è‚É£ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:');
        
        const stats = await db.executeQuery(`
            SELECT 
                COUNT(*) FILTER (WHERE referrals_count < 5) as insufficient_referrals,
                COUNT(*) FILTER (WHERE balance < 15) as insufficient_balance,
                COUNT(*) FILTER (WHERE is_subscribed = FALSE) as not_subscribed,
                COUNT(*) FILTER (WHERE first_name IS NULL OR LENGTH(TRIM(first_name)) = 0) as no_name,
                COUNT(*) as total_users
            FROM users
        `);
        
        const stat = stats.rows[0];
        console.log(`üìä –ò–∑ ${stat.total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
        console.log(`  ‚Ä¢ ${stat.insufficient_referrals} —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ (<5)`);
        console.log(`  ‚Ä¢ ${stat.insufficient_balance} —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (<15‚≠ê)`);
        console.log(`  ‚Ä¢ ${stat.not_subscribed} –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã`);
        console.log(`  ‚Ä¢ ${stat.no_name} –±–µ–∑ –∏–º–µ–Ω–∏`);
        
        // 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\n8Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /diagnose_user');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è cleanDisplayText –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã');
        console.log('4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –øÔøΩÔøΩ–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    } finally {
        await db.closeConnection();
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
if (require.main === module) {
    findProblematicUsers();
}

module.exports = { findProblematicUsers };
