#!/usr/bin/env node
console.log('üîç [RAILWAY-DIAGNOSTIC] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Railway...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
console.log('üì¶ Node.js –≤–µ—Ä—Å–∏—è:', process.version);
console.log('üåç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', process.platform);
console.log('üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:', process.arch);
console.log('üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toISOString());
console.log('');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('üîß –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
console.log('========================');

const requiredVars = [
    'BOT_TOKEN',
    'DATABASE_URL',
    'NODE_ENV',
    'ADMIN_CHANNEL', 
    'PAYMENTS_CHANNEL'
];

const optionalVars = [
    'PORT',
    'RAILWAY_DEPLOYMENT_ID',
    'RAILWAY_ENVIRONMENT_NAME',
    'RAILWAY_PROJECT_NAME',
    'RAILWAY_SERVICE_NAME'
];

let missingRequired = [];
let hasOptional = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
requiredVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
        if (varName === 'BOT_TOKEN') {
            console.log(`‚úÖ ${varName}: ${value.substring(0, 10)}...${value.substring(value.length - 5)} (—Å–∫—Ä—ã—Ç)`);
        } else if (varName === 'DATABASE_URL') {
            console.log(`‚úÖ ${varName}: ${value.substring(0, 15)}...${value.substring(value.length - 10)} (—Å–∫—Ä—ã—Ç)`);
        } else {
            console.log(`‚úÖ ${varName}: ${value}`);
        }
    } else {
        console.log(`‚ùå ${varName}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê`);
        missingRequired.push(varName);
    }
});

console.log('\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:');
console.log('============================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
optionalVars.forEach(varName => {
    const value = process.env[varName];
    if (value) {
        console.log(`‚úÖ ${varName}: ${value}`);
        hasOptional.push(varName);
    } else {
        console.log(`‚ö™ ${varName}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
console.log('\nüìÅ –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê:');
console.log('=================');

const fs = require('fs');
const requiredFiles = [
    'index.js',
    'database.js', 
    'package.json',
    'captcha-system.js',
    'message-throttler.js'
];

requiredFiles.forEach(fileName => {
    if (fs.existsSync(fileName)) {
        console.log(`‚úÖ ${fileName}: –Ω–∞–π–¥–µ–Ω`);
    } else {
        console.log(`‚ùå ${fileName}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('\nüì¶ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò NODE.JS:');
console.log('=======================');

try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const dependencies = packageJson.dependencies || {};
    
    Object.keys(dependencies).forEach(dep => {
        try {
            require.resolve(dep);
            console.log(`‚úÖ ${dep}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        } catch (error) {
            console.log(`‚ùå ${dep}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù`);
        }
    });
} catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
console.log('\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:');
console.log('===============');

async function testDatabase() {
    try {
        const db = require('./database');
        console.log('‚úÖ –ú–æ–¥—É–ª—å database.js –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const result = await db.executeQuery('SELECT NOW() as current_time');
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ: ${result.rows[0].current_time}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        const tables = await db.executeQuery(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        `);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: ${tables.rows.length}`);
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API
console.log('\nü§ñ TELEGRAM BOT:');
console.log('================');

async function testBot() {
    try {
        const TelegramBot = require('node-telegram-bot-api');
        const token = process.env.BOT_TOKEN;
        
        if (!token) {
            console.log('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return;
        }
        
        const bot = new TelegramBot(token);
        const me = await bot.getMe();
        console.log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${me.username} (${me.first_name})`);
        console.log(`‚úÖ Bot ID: ${me.id}`);
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ Telegram Bot: ${error.message}`);
    }
}

// –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
console.log('========================');

if (missingRequired.length > 0) {
    console.log(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingRequired.join(', ')}`);
    console.log('');
    console.log('üîß –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í RAILWAY:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Railway Dashboard');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
    console.log('3. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "Variables"');
    console.log('4. –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    missingRequired.forEach(varName => {
        console.log(`   - ${varName}=–≤–∞—à–µ_–∑–Ω–∞—á–µ–Ω–∏–µ`);
    });
} else {
    console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (hasOptional.some(v => v.startsWith('RAILWAY_'))) {
    console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ Railway –æ–∫—Ä—É–∂–µ–Ω–∏–µ');
} else {
    console.log('‚ö†Ô∏è Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π');
}

// –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
Promise.all([
    testDatabase(),
    testBot()
]).then(() => {
    console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('');
    
    if (missingRequired.length === 0) {
        console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –Ω–∞ Railway');
    } else {
        console.log('‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - —Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ');
    }
    
    process.exit(missingRequired.length === 0 ? 0 : 1);
}).catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
});
