const db = require('./database');

async function testRatings() {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();
        
        console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞...');
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        const allUsers = await db.executeQuery('SELECT id, first_name, referrals_count, registered_at FROM users LIMIT 5');
        console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allUsers.rows.length);
        if (allUsers.rows.length > 0) {
            allUsers.rows.forEach(user => {
                console.log(`  - ${user.first_name} (ID: ${user.id}): ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
            });
        }
        
        // –¢–µ—Å—Ç 2: –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        console.log('\n2. –¢–µ—Å—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:');
        try {
            const ratingsAll = await db.executeQuery(`
                SELECT first_name, referrals_count
                FROM users
                WHERE referrals_count > 0
                ORDER BY referrals_count DESC
                LIMIT 10
            `);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:', ratingsAll.rows.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            ratingsAll.rows.forEach((user, index) => {
                console.log(`  ${index + 1}. ${user.first_name}: ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:', error.message);
        }
        
        // –¢–µ—Å—Ç 3: –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        console.log('\n3. –¢–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:');
        try {
            const ratingsWeek = await db.executeQuery(`
                SELECT first_name, referrals_count, registered_at, updated_at
                FROM users
                WHERE registered_at > NOW() - INTERVAL '7 days' OR updated_at > NOW() - INTERVAL '7 days'
                ORDER BY referrals_count DESC
                LIMIT 10
            `);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:', ratingsWeek.rows.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            ratingsWeek.rows.forEach((user, index) => {
                console.log(`  ${index + 1}. ${user.first_name}: ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:', error.message);
        }
        
        // –¢–µ—Å—Ç 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        console.log('\n4. –¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π):');
        try {
            const simpleWeekRating = await db.executeQuery(`
                SELECT first_name, referrals_count
                FROM users
                WHERE referrals_count > 0
                ORDER BY referrals_count DESC
                LIMIT 10
            `);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:', simpleWeekRating.rows.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            simpleWeekRating.rows.forEach((user, index) => {
                console.log(`  ${index + 1}. ${user.first_name}: ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ:', error.message);
        }
        
        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users
        console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users:');
        try {
            const tableInfo = await db.executeQuery(`
                SELECT column_name, data_type
                FROM information_schema.columns
                WHERE table_name = 'users'
                ORDER BY ordinal_position
            `);
            console.log('–ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users:');
            tableInfo.rows.forEach(col => {
                console.log(`  - ${col.column_name}: ${col.data_type}`);
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
        }
        
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await db.closeConnection();
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
    }
}

testRatings();
