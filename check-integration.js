#!/usr/bin/env node
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –∞–≥–µ–Ω—Ç–æ–º
 */

const { execSync } = require('child_process');

async function checkIntegration() {
    console.log('üîß –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ë–û–¢–ê –ò –ê–ì–ï–ù–¢–ê\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    console.log('üìÅ 1. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:');
    const files = [
        'userbot-agent.py',
        'agent-integration.js', 
        'userbot_session.session',
        'index.js'
    ];

    files.forEach(file => {
        try {
            const fs = require('fs');
            if (fs.existsSync(file)) {
                const stats = fs.statSync(file);
                console.log(`   ‚úÖ ${file} (${stats.size} bytes)`);
            } else {
                console.log(`   ‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù!`);
            }
        } catch (error) {
            console.log(`   ‚ùå ${file} - –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    });

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞
    console.log('\nüíæ 2. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ê–ì–ï–ù–¢–ê:');
    try {
        const dbCheck = execSync(`python3 -c "
import sqlite3
import os

db_path = 'userbot_queue.db'
if os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    cursor.execute(\\\"SELECT name FROM sqlite_master WHERE type='table'\\\")
    tables = cursor.fetchall()
    print('‚úÖ –ë–î –∞–≥–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    print('üìã –¢–∞–±–ª–∏—Ü—ã:', [table[0] for table in tables])
    
    # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
    try:
        cursor.execute('SELECT COUNT(*) FROM withdrawal_queue')
        total = cursor.fetchone()[0]
        print(f'üìä –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total}')
        
        cursor.execute('SELECT COUNT(*) FROM withdrawal_queue WHERE status = \\\"pending\\\"')
        pending = cursor.fetchone()[0]
        print(f'‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}')
        
        if pending > 0:
            cursor.execute('SELECT user_id, amount, created_at FROM withdrawal_queue WHERE status = \\\"pending\\\" ORDER BY created_at DESC LIMIT 3')
            tasks = cursor.fetchall()
            print('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:')
            for task in tasks:
                print(f'   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {task[0]}: {task[1]} –∑–≤—ë–∑–¥ ({task[2]})')
    except Exception as e:
        print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {e}')
    
    conn.close()
else:
    print('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
"`, { encoding: 'utf8' });

        console.log('   ' + dbCheck.trim().replace(/\n/g, '\n   '));
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    console.log('\n‚ö° 3. –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–û–í:');
    try {
        const processes = execSync('ps aux | grep -E "(node|python)" | grep -v grep', { encoding: 'utf8' });
        const lines = processes.split('\\n').filter(line => line.trim());
        
        console.log(`   üìü –ù–∞–π–¥–µ–Ω–æ ${lines.length} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:`);
        lines.forEach((line, index) => {
            if (line.includes('index.js')) {
                console.log(`   ‚úÖ ${index + 1}. –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${line.split(/\\s+/).slice(10).join(' ')}`);
            } else if (line.includes('userbot-agent.py')) {
                console.log(`   ‚úÖ ${index + 1}. –ê–≥–µ–Ω—Ç: ${line.split(/\\s+/).slice(10).join(' ')}`);
            } else {
                console.log(`   üìÑ ${index + 1}. ${line.split(/\\s+/).slice(10).join(' ')}`);
            }
        });
    } catch (error) {
        console.log(`   ÔøΩÔøΩÔøΩÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${error.message}`);
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞
    console.log('\\nüìù 4. –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò –ê–ì–ï–ù–¢–ê:');
    try {
        const fs = require('fs');
        if (fs.existsSync('userbot-agent.log')) {
            const logs = fs.readFileSync('userbot-agent.log', 'utf8');
            const lines = logs.split('\\n').filter(line => line.trim());
            
            console.log('   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:');
            lines.slice(-5).forEach(line => {
                if (line.includes('‚úÖ') || line.includes('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')) {
                    console.log(`   ‚úÖ ${line.trim()}`);
                } else if (line.includes('‚ùå') || line.includes('ERROR')) {
                    console.log(`   ‚ùå ${line.trim()}`);
                } else if (line.includes('‚ö†Ô∏è') || line.includes('WARNING')) {
                    console.log(`   ‚ö†Ô∏è ${line.trim()}`);
                } else {
                    console.log(`   üìÑ ${line.trim()}`);
                }
            });
        } else {
            console.log('   ‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`);
    }

    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\\nüéØ 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   üí° –ï—Å–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:');
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ 5-10 –∑–≤—ë–∑–¥');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ–ø–∞–ª–∞ –≤ –ë–î –∞–≥–µ–Ω—Ç–∞');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (00:00-23:00)');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—à–∏–±–∫–∏');
    console.log('   5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /agent_stats –≤ –±–æ—Ç–µ');

    console.log('\\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–ê');
}

checkIntegration().catch(console.error);
