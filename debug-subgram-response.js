/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤ SubGram API
 * –ü–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
 */

const { subgramAPI } = require('./subgram-api');
const db = require('./database');

async function debugSubGramResponse() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ SubGram API...\n');

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ΩÔøΩÔøΩ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

        // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID –∞–¥–º–∏–Ω–∞)
        const testUserId = 7972065986;

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await db.getSubGramSettings();
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram:');
        console.log(`   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: ${settings?.enabled}`);
        console.log(`   ‚Ä¢ API –∫–ª—é—á: ${settings?.api_key ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
        console.log(`   ‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${settings?.max_sponsors}`);
        console.log('');

        if (!settings || !settings.enabled) {
            console.log('‚ùå SubGram –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!');
            return;
        }

        console.log('üåê –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ SubGram API...');

        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const apiResponse = await subgramAPI.requestSponsors({
            userId: testUserId.toString(),
            chatId: testUserId.toString(),
            maxOP: settings.max_sponsors || 3,
            action: settings.default_action || 'subscribe',
            excludeChannelIds: [],
            withToken: true
        });

        console.log('üì• RAW API Response:');
        console.log('   ‚Ä¢ Success:', apiResponse.success);
        if (apiResponse.error) {
            console.log('   ‚Ä¢ Error:', apiResponse.error);
        }
        if (apiResponse.data) {
            console.log('   ‚Ä¢ Data:', JSON.stringify(apiResponse.data, null, 2));
        }
        console.log('');

        if (!apiResponse.success) {
            console.log('‚ùå API –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω');
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const processedData = subgramAPI.processAPIResponse(apiResponse.data);
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
        console.log('   ‚Ä¢ Status:', processedData.status);
        console.log('   ‚Ä¢ Code:', processedData.code);
        console.log('   ‚Ä¢ Message:', processedData.message);
        console.log('   ‚Ä¢ NeedsSubscription:', processedData.needsSubscription);
        console.log('   ‚Ä¢ AllSubscribed:', processedData.allSubscribed);
        console.log('   ‚Ä¢ CanProceed:', processedData.canProceed);
        console.log('   ‚Ä¢ Channels count:', processedData.channels.length);
        console.log('   ‚Ä¢ ChannelsToSubscribe count:', processedData.channelsToSubscribe?.length || 0);
        console.log('');

        if (processedData.channels.length > 0) {
            console.log('üì∫ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:');
            processedData.channels.forEach((channel, index) => {
                console.log(`   ${index + 1}. ${channel.name}`);
                console.log(`      ‚Ä¢ Link: ${channel.link}`);
                console.log(`      ‚Ä¢ Status: ${channel.status}`);
                console.log(`      ‚Ä¢ Needs subscription: ${channel.needsSubscription}`);
                console.log('');
            });
        }

        if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
            console.log('‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:');
            processedData.channelsToSubscribe.forEach((channel, index) => {
                console.log(`   ${index + 1}. ${channel.name}`);
                console.log(`      ‚Ä¢ Link: ${channel.link}`);
                console.log('');
            });
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –±–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –≤–∏–¥–µ—Ç—å –∫–∞–Ω–∞–ª—ã
        console.log('üéØ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:');
        console.log('='.repeat(50));

        if (processedData.status === 'ok' && processedData.code === 200) {
            console.log('‚ö†Ô∏è SubGram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç status="ok" –∏ code=200');
            console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã');
            console.log('   –ò–õ–ò –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞ÔøΩÔøΩ–æ–≤');
            
            if (processedData.channels.length === 0) {
                console.log('‚úÖ –ö–∞–Ω–∞–ª–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            } else {
                console.log('‚ùì –ö–∞–Ω–∞–ª—ã –µ—Å—Ç—å, –Ω–æ —Å—Ç–∞—Ç—É—Å OK - –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞');
            }
        }

        if (processedData.status === 'warning') {
            console.log('üö® SubGram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç status="warning"');
            console.log('   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
            
            if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
                console.log('‚úÖ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–π–¥–µ–Ω—ã - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å');
            } else {
                console.log('‚ùå –°—Ç–∞—Ç—É—Å warning, –Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        const savedChannels = await db.executeQuery(`
            SELECT * FROM subgram_channels
            WHERE user_id = $1
            ORDER BY created_at DESC
            LIMIT 10
        `, [testUserId]);

        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ:');
        if (savedChannels.rows.length === 0) {
            console.log('   –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
        } else {
            savedChannels.rows.forEach((channel, index) => {
                console.log(`   ${index + 1}. ${channel.channel_name}`);
                console.log(`      ‚Ä¢ Link: ${channel.channel_link}`);
                console.log(`      ‚Ä¢ Created: ${channel.created_at}`);
                console.log('');
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('='.repeat(50));
        
        if (processedData.status === 'ok' && processedData.channels.length === 0) {
            console.log('‚úÖ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –Ω–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤');
            console.log('   –ë–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø');
        }
        
        if (processedData.status === 'ok' && processedData.channels.length > 0) {
            console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ª–æ–≥–∏–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ processAPIResponse –≤ subgram-api.js');
        }
        
        if (processedData.status === 'warning' && processedData.channelsToSubscribe?.length > 0) {
            console.log('üö® –ö–∞–Ω–∞–ª—ã –µ—Å—Ç—å - –±–æ—Ç –î–û–õ–ñ–ï–ù –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø');
            console.log('   –ï—Å–ª–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        try {
            await db.closeConnection();
            console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeError);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
if (require.main === module) {
    debugSubGramResponse().then(() => {
        console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        process.exit(0);
    }).catch(error => {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
        process.exit(1);
    });
}

module.exports = { debugSubGramResponse };
