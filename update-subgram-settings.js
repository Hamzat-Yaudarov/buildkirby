/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const db = require('./database');

async function updateSubGramSettings() {
    console.log('‚öôÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö SUBGRAM\n');

    try {
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        const currentSettings = await db.getSubGramSettings();
        
        if (currentSettings) {
            console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
            console.log(`  ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: ${currentSettings.enabled}`);
            console.log(`  ‚Ä¢ API URL: ${currentSettings.api_url}`);
            console.log(`  ‚Ä¢ API –∫–ª—é—á: ${currentSettings.api_key ? currentSettings.api_key.substring(0, 20) + '...' : '–ù–ï–¢'}`);
            console.log(`  ‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${currentSettings.max_sponsors}`);
            console.log(`  ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: ${currentSettings.default_action}`);
            console.log(`  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${currentSettings.updated_at || '–ù–∏–∫–æ–≥–¥–∞'}`);
        } else {
            console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ');
        }
        console.log('');

        // 2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º
        console.log('2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º...');
        
        const correctSettings = {
            apiKey: '5d4c6c5283559a05a9558b677669871d6ab58e00e71587546b25b4940ea6029d',
            apiUrl: 'https://api.subgram.ru/request-op/',
            enabled: true,
            maxSponsors: 3,
            defaultAction: 'subscribe'
        };

        console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
        console.log(`  ‚Ä¢ API URL: ${correctSettings.apiUrl}`);
        console.log(`  ‚Ä¢ API –∫–ª—é—á: ${correctSettings.apiKey.substring(0, 20)}...`);
        console.log(`  ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: ${correctSettings.enabled}`);
        console.log(`  ‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${correctSettings.maxSponsors}`);
        console.log(`  ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${correctSettings.defaultAction}`);

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            const checkSettings = await db.executeQuery('SELECT COUNT(*) as count FROM subgram_settings');
            const hasSettings = parseInt(checkSettings.rows[0].count) > 0;

            if (hasSettings) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                const updated = await db.updateSubGramSettings(correctSettings);
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                console.log(`üìÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updated?.updated_at || new Date().toISOString()}`);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await db.executeQuery(`
                    INSERT INTO subgram_settings (api_key, api_url, enabled, max_sponsors, default_action)
                    VALUES ($1, $2, $3, $4, $5)
                `, [
                    correctSettings.apiKey,
                    correctSettings.apiUrl,
                    correctSettings.enabled,
                    correctSettings.maxSponsors,
                    correctSettings.defaultAction
                ]);
                console.log('‚úÖ –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
            throw error;
        }
        console.log('');

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        const updatedSettings = await db.getSubGramSettings();
        
        if (updatedSettings) {
            console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
            console.log(`  ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: ${updatedSettings.enabled}`);
            console.log(`  ‚Ä¢ API URL: ${updatedSettings.api_url}`);
            console.log(`  ‚Ä¢ API –∫–ª—é—á: ${updatedSettings.api_key ? updatedSettings.api_key.substring(0, 20) + '...' : '–ù–ï–¢'}`);
            console.log(`  ‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${updatedSettings.max_sponsors}`);
            console.log(`  ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: ${updatedSettings.default_action}`);
            console.log(`  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: ${updatedSettings.created_at || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
            console.log(`  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedSettings.updated_at || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        }
        console.log('');

        // 5. –¢–µ—Å—Ç API —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...');
        
        const { subgramAPI } = require('./subgram-api');
        
        const testResponse = await subgramAPI.requestSponsors({
            userId: '123456789',
            chatId: '123456789',
            maxOP: updatedSettings.max_sponsors,
            action: updatedSettings.default_action,
            excludeChannelIds: [],
            withToken: true
        });

        if (testResponse.success) {
            console.log('‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${testResponse.data?.status}`);
            console.log(`üìà –ö–æ–¥: ${testResponse.data?.code}`);
            console.log(`üì∫ –°—Å—ã–ª–æ–∫: ${testResponse.data?.links?.length || 0}`);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç –≤ –ª–æ–≥–∏
            await db.logSubGramAPIRequest(
                123456789,
                'settings_update_test',
                { settings_update: true },
                testResponse.data,
                true
            );
        } else {
            console.log('‚ùå API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω');
            console.log(`üö® –û—à–∏–±–∫–∞: ${testResponse.error}`);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥–∏
            await db.logSubGramAPIRequest(
                123456789,
                'settings_update_test',
                { settings_update: true },
                testResponse.details || {},
                false,
                testResponse.error
            );
        }
        console.log('');

        // 6. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        console.log('6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π...');
        try {
            const deletedSessions = await db.executeQuery(`
                DELETE FROM subgram_user_sessions 
                WHERE expires_at < NOW() 
                OR last_check_at < NOW() - INTERVAL '2 days'
                RETURNING user_id
            `);
            
            console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deletedSessions.rows.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π`);
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', error.message);
        }
        console.log('');

        // 7. –ò—Ç–æ–≥–∏
        console.log('7Ô∏è‚É£ –ò–¢–û–ì–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø');
        console.log('==========================================');
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        console.log('‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º');
        
        if (testResponse.success) {
            console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            console.log('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
        } else {
            console.log('‚ö†Ô∏è API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ SubGram');
        }

        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤');
        console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ SubGram —Å —Ç–æ–∫–µ–Ω–æ–º');

    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    updateSubGramSettings();
}

module.exports = { updateSubGramSettings };
