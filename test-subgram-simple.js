/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç SubGram API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–æ–º
 */

const axios = require('axios');

const API_KEY = '5d4c6c5283559a05a9558b677669871d6ab58e00e71587546b25b4940ea6029d';
const API_URL = 'https://api.subgram.ru/request-op/';

async function testSubGramAPI() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SubGram API —Å —Ç–æ–∫–µ–Ω–æ–º...\n');

    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–û–ö–ï–ù–û–ú (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π)
    const requestData = {
        UserId: "123456789",
        ChatId: "123456789", 
        MaxOP: 3,
        action: "subscribe",
        exclude_channel_ids: []
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º first_name, language_code, Premium 
        // —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ SubGram –° –¢–û–ö–ï–ù–û–ú
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ SubGram API:');
    console.log('URL:', API_URL);
    console.log('API Key (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', API_KEY.substring(0, 20) + '...');
    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestData, null, 2));
    console.log('');

    try {
        const response = await axios.post(API_URL, requestData, {
            headers: {
                'Auth': API_KEY,
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });

        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç SubGram API:');
        console.log('HTTP Status:', response.status);
        console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));

        // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        const { status, code, message } = response.data;
        console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:');
        console.log('‚Ä¢ –°—Ç–∞—Ç—É—Å:', status);
        console.log('‚Ä¢ –ö–æ–¥:', code);
        console.log('‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ:', message);

        if (status === 'warning') {
            console.log('üîî –°—Ç–∞—Ç—É—Å "warning" –æ–∑ÔøΩÔøΩ–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã');
            console.log('‚úÖ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else if (status === 'ok') {
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å "ok" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã');
        } else if (status === 'gender') {
            console.log('üë§ –°—Ç–∞—Ç—É—Å "gender" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } else if (status === 'error') {
            console.log('‚ùå –°—Ç–∞—Ç—É—Å "error" –æ–∑–Ω–∞—á–∞–µ—Ç –æ—à–∏–±–∫—É –≤ API');
        }

        if (response.data.links && response.data.links.length > 0) {
            console.log(`\nüì∫ –ü–æ–ª—É—á–µ–Ω–æ ${response.data.links.length} —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:`);
            response.data.links.slice(0, 3).forEach((link, index) => {
                console.log(`${index + 1}. ${link}`);
            });
        }

        if (response.data.additional?.sponsors) {
            console.log(`\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${response.data.additional.sponsors.length} —Å–ø–æ–Ω—Å–æ—Ä–∞—Ö:`);
            response.data.additional.sponsors.slice(0, 3).forEach((sponsor, index) => {
                console.log(`${index + 1}. ${sponsor.resource_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} - ${sponsor.status}`);
            });
        }

        console.log('\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!');
        console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å—ã —Å —Ç–æ–∫–µ–Ω–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê:', error.message);

        if (error.response) {
            console.error('HTTP Status:', error.response.status);
            console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(error.response.data, null, 2));
            
            if (error.response.status === 401) {
                console.error('üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á');
            } else if (error.response.status === 400) {
                console.error('üìù –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞');
            } else if (error.response.status === 404) {
                console.error('üîç API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } else if (error.request) {
            console.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
        } else {
            console.error('‚öôÔ∏è –û—à–∏–±–∫–∞ –ΩÔøΩÔøΩ—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
        }

        console.log('\nüõ†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SubGram —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ SubGram —Å —Ç–æ–∫–µ–Ω–æ–º');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testSubGramAPI();
}

module.exports = { testSubGramAPI };
