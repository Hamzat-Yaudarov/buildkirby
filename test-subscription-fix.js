/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ SubGram
 * –≠–º—É–ª–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
 */

const smartSubGram = require('./subgram-smart-handler');
const db = require('./database');

async function testSubscriptionFix() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ SubGram...\n');

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n');

        const testUserId = 7972065986; // ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

        console.log('üìã –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π');
        console.log('='.repeat(60));

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const initialState = await smartSubGram.getSubGramState(testUserId);
        console.log(`üîç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${initialState.state}`);
        console.log(`üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${initialState.shouldBlock}`);
        console.log(`üì∫ –ö–∞–Ω–∞–ª–æ–≤: ${initialState.channels.length}`);

        if (initialState.channels.length === 0) {
            console.log('‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            console.log('üìù SubGram –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n');
        } else {
            console.log('üìù –ù–∞–π–¥–µ–Ω—ã –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n');
        }

        console.log('üìã –¢–ï–°–¢ 2: –≠–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏');
        console.log('='.repeat(60));

        // –≠–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        if (initialState.channels.length > 0) {
            console.log('üéØ –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (—ç–º—É–ª—è—Ü–∏—è –øÔøΩÔøΩ–¥–ø–∏—Å–∫–∏)...');
            await db.executeQuery('DELETE FROM subgram_channels WHERE user_id = $1', [testUserId]);
            
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
            const refreshedState = await smartSubGram.forceRefreshSubGramState(testUserId);
            
            console.log(`‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ "–ø–æ–¥–ø–∏—Å–∫–∏": ${refreshedState.state}`);
            console.log(`üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ${refreshedState.shouldBlock}`);
            console.log(`üì∫ –ö–∞–Ω–∞–ª–æ–≤: ${refreshedState.channels.length}\n`);
        } else {
            console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ - –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤\n');
        }

        console.log('üìã –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ checkUserSubscriptions');
        console.log('='.repeat(60));

        // –ú–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const mockBot = {
            getChatMember: async (chat, userId) => {
                console.log(`   [MOCK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: user ${userId} in ${chat}`);
                // –≠–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
                return { status: 'member' };
            }
        };

        const subscriptionCheck = await smartSubGram.checkUserSubscriptions(mockBot, testUserId);
        console.log(`‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionCheck.allSubscribed}`);
        console.log(`üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${subscriptionCheck.channels.length}`);
        console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${subscriptionCheck.refreshed || false}\n`);

        console.log('üìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–µ');
        console.log('='.repeat(60));

        const accessDecision = await smartSubGram.shouldBlockBotAccess(testUserId);
        console.log(`üéØ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø: ${accessDecision.shouldBlock}`);
        console.log(`üìù –ü—Ä–∏—á–∏–Ω–∞: ${accessDecision.reason}`);
        console.log(`üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${accessDecision.channels.length}\n`);

        console.log('üìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('='.repeat(60));

        const userMessage = await smartSubGram.getSubscriptionMessage(testUserId);
        console.log(`üë§ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: ${userMessage.accessAllowed}`);
        console.log(`üìù –ü—Ä–∏—á–∏–Ω–∞: ${userMessage.reason || 'N/A'}`);
        
        if (!userMessage.accessAllowed) {
            console.log(`üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${userMessage.channelsCount}`);
        }
        console.log('');

        // –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('='.repeat(60));

        const testResults = analyzeTestResults(initialState, accessDecision, userMessage);
        
        if (testResults.success) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
            console.log(`‚úÖ ${testResults.summary}`);
            
            console.log('\nüìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
            console.log('1. ‚úÖ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - —Ä–∞–∑–Ω—ã–µ)');
            console.log('2. ‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è');
            console.log('3. ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏" —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            console.log('4. ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
            
        } else {
            console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
            console.log(`‚ö†Ô∏è ${testResults.summary}`);
            
            console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
            console.log('2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /debug_subgram –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram');
        }

        console.log('\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('/check_smart_state - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
        console.log('/force_refresh_subgram - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        console.log('/admin_subgram_test - –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        try {
            await db.closeConnection();
            console.log('\nüîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã:', closeError);
        }
    }
}

function analyzeTestResults(initialState, accessDecision, userMessage) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã
        if (initialState.channels.length === 0) {
            // –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ - –¥–æ—Å—Ç—É–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω
            if (!accessDecision.shouldBlock && userMessage.accessAllowed) {
                return {
                    success: true,
                    summary: '–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ ‚Üí –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                };
            } else {
                return {
                    success: false,
                    summary: '–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –Ω–æ –¥–æ—Å—Ç—É–ø –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è - –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ'
                };
            }
        } else {
            // –ï—Å—Ç—å –∫–∞–Ω–∞–ª—ã - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            if (accessDecision.shouldBlock && !userMessage.accessAllowed) {
                return {
                    success: true,
                    summary: '–ï—Å—Ç—å –∫–∞–Ω–∞–ª—ã ‚Üí –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–Ω–∞–ª—ã'
                };
            } else if (!accessDecision.shouldBlock && userMessage.accessAllowed) {
                return {
                    success: true,
                    summary: '–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã ‚Üí –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                };
            } else {
                return {
                    success: false,
                    summary: '–ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π'
                };
            }
        }
        
    } catch (error) {
        return {
            success: false,
            summary: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`
        };
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
    testSubscriptionFix().then(() => {
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
    }).catch(error => {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = { testSubscriptionFix };
