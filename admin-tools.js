const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('bot.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
function addTask(channelId, channelName, reward = 1) {
    return new Promise((resolve, reject) => {
        db.run(
            'INSERT INTO tasks (channel_id, channel_name, reward) VALUES (?, ?, ?)',
            [channelId, channelName, reward],
            function(err) {
                if (err) {
                    reject(err);
                } else {
                    console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${channelName} (ID: ${this.lastID})`);
                    resolve(this.lastID);
                }
            }
        );
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏
function addLottery(name, ticketPrice, maxTickets, winnersCount) {
    return new Promise((resolve, reject) => {
        db.run(
            'INSERT INTO lotteries (name, ticket_price, max_tickets, winners_count) VALUES (?, ?, ?, ?)',
            [name, ticketPrice, maxTickets, winnersCount],
            function(err) {
                if (err) {
                    reject(err);
                } else {
                    console.log(`üé∞ –õ–æ—Ç–µ—Ä–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${name} (ID: ${this.lastID})`);
                    resolve(this.lastID);
                }
            }
        );
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function getStats() {
    return new Promise((resolve, reject) => {
        db.all(`
            SELECT 
                COUNT(*) as total_users,
                SUM(balance) as total_balance,
                SUM(referrals_count) as total_referrals
            FROM users
        `, [], (err, stats) => {
            if (err) {
                reject(err);
            } else {
                console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:');
                console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats[0].total_users}`);
                console.log(`‚≠êÔ∏è –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats[0].total_balance || 0}`);
                console.log(`üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats[0].total_referrals || 0}`);
                resolve(stats[0]);
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getTopUsers() {
    return new Promise((resolve, reject) => {
        db.all(`
            SELECT first_name, referrals_count, balance 
            FROM users 
            ORDER BY referrals_count DESC 
            LIMIT 10
        `, [], (err, users) => {
            if (err) {
                reject(err);
            } else {
                console.log('\nüèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
                users.forEach((user, index) => {
                    console.log(`${index + 1}. ${user.first_name} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ªÔøΩÔøΩ–≤, ${user.balance} ‚≠êÔ∏è`);
                });
                resolve(users);
            }
        });
    });
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function main() {
    try {
        console.log('üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞\n');
        
        // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        /*
        await addTask('@yourchannel1', '–í–∞—à –∫–∞–Ω–∞–ª 1', 2);
        await addTask('@yourchannel2', '–í–∞—à –∫–∞–Ω–∞–ª 2', 2);
        await addTask('@yourchannel3', '–í–∞—à –∫–∞–Ω–∞–ª 3', 3);
        */
        
        // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ª–æ—Ç–µ—Ä–µ–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        /*
        await addLottery('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è', 5, 100, 10);
        await addLottery('–ú–µ–≥–∞-–ª–æ—Ç–µ—Ä–µ—è', 10, 50, 5);
        */
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await getStats();
        await getTopUsers();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        db.close();
    }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = {
    addTask,
    addLottery,
    getStats,
    getTopUsers
};
