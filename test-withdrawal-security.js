#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
 * 1. –†–∞–∑—Ä–µ—à–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
 * 2. –ù–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –∑–≤—ë–∑–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 * 3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤—ë–∑–¥—ã –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫
 */

const db = require('./database');

async function testWithdrawalSecurity() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞...\n');
    
    try {
        await db.initializeDatabase();
        
        // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUserId = 999999999;
        const testUser = {
            id: testUserId,
            username: 'test_user',
            first_name: 'Test User'
        };
        
        console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        await db.createOrUpdateUser(testUser);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        await db.updateUserBalance(testUserId, 100); // 100 –∑–≤—ë–∑–¥
        await db.executeQuery('UPDATE users SET referrals_count = 10 WHERE id = $1', [testUserId]);
        
        const user = await db.getUser(testUserId);
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω. –ë–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê, –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.referrals_count}`);
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥...');
        
        try {
            // –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
            await db.executeQuery('BEGIN');
            
            await db.executeQuery(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES ($1, $2, $3)',
                [testUserId, 15, 'stars']
            );
            
            await db.executeQuery(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES ($1, $2, $3)',
                [testUserId, 15, 'stars']
            );
            
            await db.executeQuery(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES ($1, $2, $3)',
                [testUserId, 25, 'stars']
            );
            
            await db.executeQuery('COMMIT');
            
            const pendingRequests = await db.executeQuery(
                'SELECT COUNT(*) as count FROM withdrawal_requests WHERE user_id = $1 AND status = $2',
                [testUserId, 'pending']
            );
            
            console.log(`‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã! –°–æ–∑–¥–∞–Ω–æ ${pendingRequests.rows[0].count} –∑–∞—è–≤–æ–∫`);
            
        } catch (error) {
            await db.executeQuery('ROLLBACK');
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', error.message);
        }
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤...');
        
        const balanceBeforeRejection = await db.getUser(testUserId);
        console.log(`–ë–∞–ª–∞–Ω—Å –¥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${balanceBeforeRejection.balance} ‚≠ê`);
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        const requestToReject = await db.executeQuery(
            'SELECT id, amount FROM withdrawal_requests WHERE user_id = $1 AND status = $2 LIMIT 1',
            [testUserId, 'pending']
        );
        
        if (requestToReject.rows.length > 0) {
            const withdrawalId = requestToReject.rows[0].id;
            const amount = requestToReject.rows[0].amount;
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
            await db.updateUserBalance(testUserId, -amount);
            
            const balanceAfterDeduction = await db.getUser(testUserId);
            console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: ${balanceAfterDeduction.balance} ‚≠ê`);
            
            // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞)
            const rejectedId = await db.rejectWithdrawalRequestById(withdrawalId, testUserId, '–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ');
            
            const balanceAfterRejection = await db.getUser(testUserId);
            console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${balanceAfterRejection.balance} ‚≠ê`);
            
            if (parseFloat(balanceAfterRejection.balance) === parseFloat(balanceBeforeRejection.balance)) {
                console.log('‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!');
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞: —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!');
            }
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...');
        
        const requestToApprove = await db.executeQuery(
            'SELECT id, amount FROM withdrawal_requests WHERE user_id = $1 AND status = $2 LIMIT 1',
            [testUserId, 'pending']
        );
        
        if (requestToApprove.rows.length > 0) {
            const withdrawalId = requestToApprove.rows[0].id;
            
            const approvedId = await db.approveWithdrawalRequestById(withdrawalId, testUserId);
            
            if (approvedId) {
                console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${approvedId} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞!`);
                
                const approvedRequest = await db.getWithdrawalById(approvedId);
                console.log(`ÔøΩÔøΩ—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: ${approvedRequest.status}`);
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏');
            }
        }
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log('\n5Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...');
        
        const finalUser = await db.getUser(testUserId);
        console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalUser.balance} ‚≠ê`);
        
        const allRequests = await db.executeQuery(
            'SELECT status, COUNT(*) as count FROM withdrawal_requests WHERE user_id = $1 GROUP BY status',
            [testUserId]
        );
        
        console.log('\n–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:');
        for (const row of allRequests.rows) {
            console.log(`  ${row.status}: ${row.count} –∑–∞—è–≤–æ–∫`);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('\n6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await db.executeQuery('DELETE FROM withdrawal_requests WHERE user_id = $1', [testUserId]);
        await db.executeQuery('DELETE FROM users WHERE id = $1', [testUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        
        console.log('\nÔøΩÔøΩ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        console.log('  ‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã');
        console.log('  ‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
        console.log('  ‚úÖ –ó–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–¥–æ–±—Ä—è—é—Ç—Å—è');
        console.log('  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await db.closeConnection();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testWithdrawalSecurity();
}

module.exports = { testWithdrawalSecurity };
