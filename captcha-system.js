/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–ø—á–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤
 * –í–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–æ–∫: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —ç–º–æ–¥–∑–∏, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏,
 * –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 */

const crypto = require('crypto');

class CaptchaSystem {
    constructor() {
        // –¢–∏–ø—ã –∫–∞–ø—á–∏
        this.CAPTCHA_TYPES = {
            MATH: 'math',
            EMOJI: 'emoji', 
            LOGIC: 'logic',
            SEQUENCE: 'sequence',
            TEXT: 'text',
            BEHAVIOR: 'behavior'
        };

        // –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–∞–ø—á–∏ - —Ç–æ–ª—å–∫–æ 2 —É—Ä–æ–≤–Ω—è
        this.DIFFICULTY_LEVELS = {
            EASY: 1,
            HARD: 2
        };

        // Emoji –Ω–∞–±–æ—Ä—ã –¥–ª—è –∫–∞–ø—á–∏
        this.EMOJI_SETS = {
            animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üê∏', 'üê∑', 'üêµ'],
            fruits: ['üçé', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçë', 'ü•≠', 'üçç', 'ü•ù', 'üçí', 'ü••'],
            transport: ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üõª', 'üöö', 'üöõ', 'üöú'],
            nature: ['üå≤', 'üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üçÉ', 'ü™¥', 'üå±', 'üå∏', 'üå∫', 'üåª'],
            objects: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí']
        };

        // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        this.MATH_OPERATIONS = ['+', '-', '√ó', '√∑'];

        // –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        this.LOGIC_PATTERNS = [
            '—á–µ—Ç–Ω–æ–µ_–Ω–µ—á–µ—Ç–Ω–æ–µ',
            '–±–æ–ª—å—à–µ_–º–µ–Ω—å—à–µ', 
            '—Ü–≤–µ—Ç_—Ñ–æ—Ä–º–∞',
            '–∞–ª—Ñ–∞–≤–∏—Ç_–ø–æ—Ä—è–¥–æ–∫'
        ];

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–æ–≤
        this.TIMING_THRESHOLDS = {
            MIN_SOLVE_TIME: 3000,  // –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã
            MAX_SOLVE_TIME: 300000, // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            SUSPICIOUS_FAST: 1000,  // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ
            SUSPICIOUS_PATTERN: 5   // –û–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Ä–µ–º—è 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        };

        // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
        this.userAttempts = new Map();
        this.userTimings = new Map();
        this.userBehavior = new Map();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–∞–ø—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    generateCaptcha(userId, difficulty = this.DIFFICULTY_LEVELS.EASY) {
        const captchaId = this.generateId();
        const types = Object.values(this.CAPTCHA_TYPES);
        const randomType = types[Math.floor(Math.random() * (types.length - 1))]; // –ò—Å–∫–ª—é—á–∞–µ–º behavior
        
        let captcha;
        
        switch (randomType) {
            case this.CAPTCHA_TYPES.MATH:
                captcha = this.generateMathCaptcha(difficulty);
                break;
            case this.CAPTCHA_TYPES.EMOJI:
                captcha = this.generateEmojiCaptcha(difficulty);
                break;
            case this.CAPTCHA_TYPES.LOGIC:
                captcha = this.generateLogicCaptcha(difficulty);
                break;
            case this.CAPTCHA_TYPES.SEQUENCE:
                captcha = this.generateSequenceCaptcha(difficulty);
                break;
            case this.CAPTCHA_TYPES.TEXT:
                captcha = this.generateTextCaptcha(difficulty);
                break;
            default:
                captcha = this.generateMathCaptcha(difficulty);
        }

        captcha.id = captchaId;
        captcha.userId = userId;
        captcha.createdAt = Date.now();
        captcha.type = randomType;
        captcha.difficulty = difficulty;
        captcha.attempts = 0;
        captcha.maxAttempts = 3;

        return captcha;
    }

    /**
     * –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ø—á–∞
     */
    generateMathCaptcha(difficulty) {
        let num1, num2, operation, answer, question;

        switch (difficulty) {
            case this.DIFFICULTY_LEVELS.EASY:
                // –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ 10
                num1 = Math.floor(Math.random() * 10) + 1;
                num2 = Math.floor(Math.random() * 10) + 1;
                operation = ['+', '-'][Math.floor(Math.random() * 2)];
                break;
            case this.DIFFICULTY_LEVELS.HARD:
                // –°–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ 50 —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –∏ –¥–µ–ª–µ–Ω–∏–µ–º
                num1 = Math.floor(Math.random() * 50) + 1;
                num2 = Math.floor(Math.random() * 20) + 1;
                operation = this.MATH_OPERATIONS[Math.floor(Math.random() * 4)];

                // –î–ª—è –¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–±–∏—Ä–∞–µ–º –¥–µ–ª–∏–º—ã–µ —á–∏—Å–ª–∞
                if (operation === '√∑') {
                    num2 = Math.floor(Math.random() * 9) + 2; // 2-10
                    num1 = num2 * (Math.floor(Math.random() * 8) + 2); // –î–µ–ª–∏–º–æ–µ —á–∏—Å–ª–æ
                }
                break;
        }

        if (!question) {
            question = `${num1} ${operation} ${num2}`;
            answer = this.calculateMath(num1, operation, num2);
        }

        return {
            question: `üßÆ **–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:**\n\n${question} = ?`,
            answer: answer.toString(),
            acceptedAnswers: [answer.toString(), answer],
            hints: difficulty >= this.DIFFICULTY_LEVELS.HARD ? 
                [`–†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–∂–¥—É ${Math.floor(answer/2)} –∏ ${answer * 2}`] : []
        };
    }

    /**
     * Emoji –∫–∞–ø—á–∞
     */
    generateEmojiCaptcha(difficulty) {
        const categories = Object.keys(this.EMOJI_SETS);
        const category = categories[Math.floor(Math.random() * categories.length)];
        const emojis = this.EMOJI_SETS[category];
        
        let question, answer, variants;

        switch (difficulty) {
            case this.DIFFICULTY_LEVELS.EASY:
                // –ù–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
                const targetEmoji = emojis[Math.floor(Math.random() * emojis.length)];
                const count = Math.floor(Math.random() * 3) + 2; // 2-4
                const emojiLine = Array(count).fill(targetEmoji).join('');
                const mixedEmojis = this.shuffleArray([...emojiLine, ...this.getRandomEmojis(emojis, 3, targetEmoji)]).join('');

                question = `üîç **–°–∫–æ–ª—å–∫–æ ${targetEmoji} –≤—ã –≤–∏–¥–∏—Ç–µ?**\n\n${mixedEmojis}`;
                answer = count.toString();
                break;

            case this.DIFFICULTY_LEVELS.HARD:
                // –ù–∞–π—Ç–∏ –ª–∏—à–Ω–∏–π —ç–º–æ–¥–∑–∏ + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)
                if (Math.random() > 0.5) {
                    // –õ–∏—à–Ω–∏–π —ç–º–æ–¥–∑–∏
                    const correctEmojis = this.getRandomEmojis(emojis, 4);
                    const wrongEmoji = this.getRandomEmojis(this.getAllEmojisExcept(category), 1)[0];
                    const allEmojis = this.shuffleArray([...correctEmojis, wrongEmoji]);

                    question = `üéØ **–ù–∞–π–¥–∏—Ç–µ –ª–∏—à–Ω–∏–π —ç–º–æ–¥–∑–∏ (${this.getCategoryName(category)}):**\n\n${allEmojis.join(' ')}`;
                    answer = wrongEmoji;
                } else {
                    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –ø—Ä–æ–ø—É—Å–∫–æ–º
                    const sequence = this.getRandomEmojis(emojis, 5);
                    const missingIndex = Math.floor(Math.random() * 5);
                    const missing = sequence[missingIndex];
                    sequence[missingIndex] = '‚ùì';

                    question = `üß© **–ß—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?**\n\n${sequence.join(' ‚Üí ')}`;
                    answer = missing;
                }
                break;
        }

        return {
            question,
            answer,
            acceptedAnswers: [answer],
            hints: [`–≠—Ç–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${this.getCategoryName(category)}`]
        };
    }

    /**
     * –õ–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞–ø—á–∞
     */
    generateLogicCaptcha(difficulty) {
        const patterns = [
            this.generateNumberLogic.bind(this),
            this.generateWordLogic.bind(this),
            this.generatePatternLogic.bind(this)
        ];

        const generator = patterns[Math.floor(Math.random() * patterns.length)];
        return generator(difficulty);
    }

    /**
     * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
     */
    generateSequenceCaptcha(difficulty) {
        switch (difficulty) {
            case this.DIFFICULTY_LEVELS.EASY:
                // –ü—Ä–æ—Å—Ç–∞—è —á–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                return this.generateNumberSequence(3);
            case this.DIFFICULTY_LEVELS.HARD:
                // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –±—É–∫–≤—ã –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–µ —á–∏—Å–ª–∞
                if (Math.random() > 0.5) {
                    return this.generateLetterSequence();
                } else {
                    return this.generateComplexSequence();
                }
        }
    }

    /**
     * –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–∞–ø—á–∞
     */
    generateTextCaptcha(difficulty) {
        const words = [
            '–ó–í–ï–ó–î–ê', '–¢–ï–õ–ï–ì–†–ê–ú', '–ö–ê–ü–ß–ê', '–ó–ê–©–ò–¢–ê', '–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨',
            '–ü–†–û–í–ï–†–ö–ê', '–°–ò–°–¢–ï–ú–ê', '–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨', '–†–û–ë–û–¢', '–ß–ï–õ–û–í–ï–ö'
        ];

        const word = words[Math.floor(Math.random() * words.length)];
        let question, answer;

        switch (difficulty) {
            case this.DIFFICULTY_LEVELS.EASY:
                // –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                question = `‚úèÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ:**\n\n${word}`;
                answer = word;
                break;
            case this.DIFFICULTY_LEVELS.HARD:
                // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
                const taskType = Math.floor(Math.random() * 3);
                switch (taskType) {
                    case 0:
                        // –ù–∞–æ–±–æ—Ä–æ—Ç
                        question = `üîÑ **–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞–æ–±–æ—Ä–æ—Ç:**\n\n${word}`;
                        answer = word.split('').reverse().join('');
                        break;
                    case 1:
                        // –ë–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –±—É–∫–≤—ã
                        const excludeLetter = word[Math.floor(Math.random() * word.length)];
                        question = `üö´ **–£–±–µ—Ä–∏—Ç–µ –≤—Å–µ –±—É–∫–≤—ã "${excludeLetter}" –∏–∑ —Å–ª–æ–≤–∞:**\n\n${word}`;
                        answer = word.replace(new RegExp(excludeLetter, 'g'), '');
                        break;
                    case 2:
                        // –ê–Ω–∞–≥—Ä–∞–º–º–∞
                        const shuffled = this.shuffleArray(word.split('')).join('');
                        question = `üé≤ **–°–æ—Å—Ç–∞–≤—å—Ç–µ —ÅÔøΩÔøΩ–æ–≤–æ –∏–∑ –±—É–∫–≤:**\n\n${shuffled}`;
                        answer = word;
                        break;
                }
                break;
        }

        return {
            question,
            answer,
            acceptedAnswers: [answer, answer.toLowerCase()],
            hints: [`–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–ª–æ–≤–æ –∏–∑ ${word.length} –±—É–∫–≤`]
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async verifyCaptcha(captcha, userAnswer, responseTime, db) {
        const userId = captcha.userId;
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        this.analyzeBehavior(userId, responseTime, userAnswer);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if (responseTime < this.TIMING_THRESHOLDS.MIN_SOLVE_TIME) {
            this.markSuspicious(userId, 'too_fast', responseTime);
            return {
                success: false,
                reason: '–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                suspicious: true
            };
        }

        if (responseTime > this.TIMING_THRESHOLDS.MAX_SOLVE_TIME) {
            return {
                success: false,
                reason: '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                expired: true
            };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        const isCorrect = this.checkAnswer(captcha, userAnswer);
        
        if (isCorrect) {
            // –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            await this.recordCaptchaSuccess(userId, captcha.type, responseTime, db);
            this.clearUserAttempts(userId);
            
            return {
                success: true,
                message: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
            };
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            this.incrementAttempts(userId);
            captcha.attempts++;

            if (captcha.attempts >= captcha.maxAttempts) {
                this.markSuspicious(userId, 'max_attempts', captcha.attempts);
                return {
                    success: false,
                    reason: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    blocked: true
                };
            }

            return {
                success: false,
                reason: `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${captcha.maxAttempts - captcha.attempts}`,
                remainingAttempts: captcha.maxAttempts - captcha.attempts
            };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ—Å—Ç–∏ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async needsCaptcha(userId, db) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
            const result = await db.executeQuery(
                'SELECT * FROM user_captcha_status WHERE user_id = $1',
                [userId]
            );

            if (result.rows.length === 0) {
                return true; // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω—É–∂–Ω–∞ –∫–∞–ø—á–∞
            }

            const status = result.rows[0];
            
            // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–µ–ª –∏ –Ω–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
            if (status.is_verified && !status.is_suspicious) {
                return false;
            }

            // –ï—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π - –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if (status.is_suspicious) {
                return true;
            }

            // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª - –Ω—É–∂–Ω–∞ –∫–∞–ø—á–∞
            return !status.is_verified;

        } catch (error) {
            console.error('Error checking captcha need:', error);
            return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É–µ–º –∫–∞–ø—á—É
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    analyzeBehavior(userId, responseTime, answer) {
        if (!this.userBehavior.has(userId)) {
            this.userBehavior.set(userId, {
                responseTimes: [],
                answers: [],
                patterns: {}
            });
        }

        const behavior = this.userBehavior.get(userId);
        behavior.responseTimes.push(responseTime);
        behavior.answers.push(answer);

        // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if (behavior.responseTimes.length >= 3) {
            const recent = behavior.responseTimes.slice(-3);
            const avgTime = recent.reduce((a, b) => a + b, 0) / recent.length;
            const variance = recent.reduce((acc, time) => acc + Math.pow(time - avgTime, 2), 0) / recent.length;
            
            // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
            if (variance < 100) {
                this.markSuspicious(userId, 'consistent_timing', variance);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        if (behavior.answers.length >= 5) {
            const recentAnswers = behavior.answers.slice(-5);
            const uniqueAnswers = new Set(recentAnswers).size;
            
            // –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if (uniqueAnswers <= 2) {
                this.markSuspicious(userId, 'repetitive_answers', uniqueAnswers);
            }
        }
    }

    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ
     */
    markSuspicious(userId, reason, value) {
        console.log(`[CAPTCHA-SECURITY] User ${userId} marked suspicious: ${reason} (${value})`);
        
        if (!this.userBehavior.has(userId)) {
            this.userBehavior.set(userId, { suspicious: [] });
        }
        
        const behavior = this.userBehavior.get(userId);
        if (!behavior.suspicious) behavior.suspicious = [];
        
        behavior.suspicious.push({
            reason,
            value,
            timestamp: Date.now()
        });
    }

    /**
     * –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ë–î
     */
    async recordCaptchaSuccess(userId, captchaType, responseTime, db) {
        try {
            const behavior = this.userBehavior.get(userId);
            const suspiciousEvents = behavior?.suspicious || [];
            const isSuspicious = suspiciousEvents.length > 0;

            await db.executeQuery(`
                INSERT INTO user_captcha_status (user_id, is_verified, captcha_type, response_time, is_suspicious, verification_date)
                VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    is_verified = $2,
                    captcha_type = $3,
                    response_time = $4,
                    is_suspicious = $5,
                    verification_date = CURRENT_TIMESTAMP,
                    attempt_count = 0
            `, [userId, true, captchaType, responseTime, isSuspicious]);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            if (isSuspicious) {
                for (const event of suspiciousEvents) {
                    await db.executeQuery(`
                        INSERT INTO captcha_suspicious_activity (user_id, activity_type, activity_value, detected_at)
                        VALUES ($1, $2, $3, $4)
                    `, [userId, event.reason, event.value.toString(), new Date(event.timestamp)]);
                }
            }

        } catch (error) {
            console.error('Error recording captcha success:', error);
        }
    }

    // ============ –í–°ÔøΩÔøΩ–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ============

    generateId() {
        return crypto.randomBytes(16).toString('hex');
    }

    calculateMath(num1, operation, num2, operation2 = null, num3 = null) {
        let result;
        switch (operation) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '√ó':
                result = num1 * num2;
                break;
            case '√∑':
                result = Math.floor(num1 / num2);
                break;
        }

        if (operation2 && num3 !== null) {
            switch (operation2) {
                case '+':
                    result = result + num3;
                    break;
                case '-':
                    result = result - num3;
                    break;
                case '√ó':
                    result = result * num3;
                    break;
                case '√∑':
                    result = Math.floor(result / num3);
                    break;
            }
        }

        return result;
    }

    checkAnswer(captcha, userAnswer) {
        const cleanAnswer = userAnswer.toString().toLowerCase().trim();
        return captcha.acceptedAnswers.some(answer => 
            answer.toString().toLowerCase().trim() === cleanAnswer
        );
    }

    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }

    getRandomEmojis(emojis, count, exclude = null) {
        const filtered = exclude ? emojis.filter(e => e !== exclude) : emojis;
        const shuffled = this.shuffleArray(filtered);
        return shuffled.slice(0, count);
    }

    getAllEmojisExcept(excludeCategory) {
        const allEmojis = [];
        for (const [category, emojis] of Object.entries(this.EMOJI_SETS)) {
            if (category !== excludeCategory) {
                allEmojis.push(...emojis);
            }
        }
        return allEmojis;
    }

    getCategoryName(category) {
        const names = {
            animals: '–∂–∏–≤–æ—Ç–Ω—ã–µ',
            fruits: '—Ñ—Ä—É–∫—Ç—ã',
            transport: '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
            nature: '–ø—Ä–∏—Ä–æ–¥–∞',
            objects: '–ø—Ä–µ–¥–º–µ—Ç—ã'
        };
        return names[category] || category;
    }

    generateEmojiPattern(emojis) {
        const emoji1 = emojis[0];
        const emoji2 = emojis[1];
        const pattern = [emoji1, emoji2, emoji1, emoji2, '‚ùì'];
        
        return {
            question: pattern.join(' ‚Üí '),
            answer: emoji1
        };
    }

    generateNumberLogic(difficulty) {
        switch (difficulty) {
            case this.DIFFICULTY_LEVELS.EASY:
                // –ü—Ä–æ—Å—Ç—ã–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
                const nums = [2, 4, 6, 8];
                return {
                    question: `üî¢ **–ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å:**\n\n${nums.join(', ')}, ?`,
                    answer: '10',
                    acceptedAnswers: ['10'],
                    hints: ['–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞']
                };

            case this.DIFFICULTY_LEVELS.HARD:
                // –ö–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if (Math.random() > 0.5) {
                    const sequence = [1, 4, 9, 16];
                    return {
                        question: `üßÆ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n\n${sequence.join(', ')}, ?`,
                        answer: '25',
                        acceptedAnswers: ['25'],
                        hints: ['–ö–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª: 1¬≤, 2¬≤, 3¬≤, 4¬≤, ?']
                    };
                } else {
                    const sequence = [2, 6, 12, 20];
                    return {
                        question: `üß† **–ö–∞–∫–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ:**\n\n${sequence.join(', ')}, ?`,
                        answer: '30',
                        acceptedAnswers: ['30'],
                        hints: ['n√ó(n+1): 1√ó2, 2√ó3, 3√ó4, 4√ó5, ?']
                    };
                }

            default:
                return this.generateNumberLogic(this.DIFFICULTY_LEVELS.EASY);
        }
    }

    generateWordLogic(difficulty) {
        const words = ['–ö–û–¢', '–°–û–ë–ê–ö–ê', '–ú–´–®–¨'];
        return {
            question: `üìù **–ß—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç—Ç–∏ —Å–ª–æ–≤–∞?**\n\n${words.join(', ')}`,
            answer: '–ñ–ò–í–û–¢–ù–´–ï',
            acceptedAnswers: ['–ñ–ò–í–û–¢–ù–´–ï', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–ó–í–ï–†–ò', '–∑–≤–µ—Ä–∏'],
            hints: ['–û–Ω–∏ –≤—Å–µ –∂–∏–≤—ã–µ']
        };
    }

    generatePatternLogic(difficulty) {
        return {
            question: `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:**\n\nüî¥üîµ ‚Üí üîµüî¥\nüü°üü¢ ‚Üí ?`,
            answer: 'üü¢üü°',
            acceptedAnswers: ['üü¢üü°'],
            hints: ['–ü–æ—Ä—è–¥–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è –º–µ—Å—Ç–∞–º–∏']
        };
    }

    generateNumberSequence(length) {
        const start = Math.floor(Math.random() * 10) + 1;
        const step = Math.floor(Math.random() * 5) + 1;
        const sequence = [];
        
        for (let i = 0; i < length; i++) {
            sequence.push(start + (i * step));
        }
        
        const next = start + (length * step);
        
        return {
            question: `üî¢ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n\n${sequence.join(', ')}, ?`,
            answer: next.toString(),
            acceptedAnswers: [next.toString()],
            hints: [`–†–∞–∑–Ω–æ—Å—Ç—å: ${step}`]
        };
    }

    generateLetterSequence() {
        const letters = ['–ê', '–ë', '–í', '–ì'];
        return {
            question: `üî§ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ:**\n\n${letters.join(', ')}, ?`,
            answer: '–î',
            acceptedAnswers: ['–î', '–¥'],
            hints: ['–ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫']
        };
    }

    generateComplexSequence() {
        const fib = [1, 1, 2, 3];
        return {
            question: `üåÄ **–ù–∞–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ:**\n\n${fib.join(', ')}, ?`,
            answer: '5',
            acceptedAnswers: ['5'],
            hints: ['–°—É–º–º–∞ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö']
        };
    }

    incrementAttempts(userId) {
        const current = this.userAttempts.get(userId) || 0;
        this.userAttempts.set(userId, current + 1);
    }

    clearUserAttempts(userId) {
        this.userAttempts.delete(userId);
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ø—á–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
     */
    async getCaptchaStats(db) {
        try {
            const result = await db.executeQuery(`
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(*) FILTER (WHERE is_verified = true) as verified_users,
                    COUNT(*) FILTER (WHERE is_suspicious = true) as suspicious_users,
                    AVG(response_time) as avg_response_time,
                    COUNT(*) FILTER (WHERE captcha_type = 'math') as math_captchas,
                    COUNT(*) FILTER (WHERE captcha_type = 'emoji') as emoji_captchas,
                    COUNT(*) FILTER (WHERE captcha_type = 'logic') as logic_captchas
                FROM user_captcha_status
            `);

            return result.rows[0];
        } catch (error) {
            console.error('Error getting captcha stats:', error);
            return null;
        }
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
     */
    async resetUserCaptcha(userId, db) {
        try {
            await db.executeQuery('DELETE FROM user_captcha_status WHERE user_id = $1', [userId]);
            await db.executeQuery('DELETE FROM captcha_suspicious_activity WHERE user_id = $1', [userId]);
            
            // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.userAttempts.delete(userId);
            this.userBehavior.delete(userId);
            this.userTimings.delete(userId);
            
            return true;
        } catch (error) {
            console.error('Error resetting user captcha:', error);
            return false;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const captchaSystem = new CaptchaSystem();

module.exports = {
    CaptchaSystem,
    captchaSystem
};
