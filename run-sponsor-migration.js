#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
// –ó–∞–ø—É—Å–∫: node run-sponsor-migration.js

const Database = require('./database');

async function runMigration() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await Database.init();
        
        console.log('üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        await Database.pool.query(`
            CREATE TABLE IF NOT EXISTS sponsor_channels_stats (
                id SERIAL PRIMARY KEY,
                channel_identifier VARCHAR(255) UNIQUE NOT NULL,
                channel_title VARCHAR(255) NOT NULL,
                channel_url VARCHAR(500) NOT NULL,
                is_enabled BOOLEAN DEFAULT true,
                total_checks INTEGER DEFAULT 0,
                unique_users_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤
        await Database.pool.query(`
            CREATE TABLE IF NOT EXISTS sponsor_channel_user_checks (
                id SERIAL PRIMARY KEY,
                channel_identifier VARCHAR(255) NOT NULL,
                user_id BIGINT NOT NULL,
                first_check_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_check_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_checks INTEGER DEFAULT 1,
                UNIQUE(channel_identifier, user_id)
            )
        `);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await Database.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_sponsor_channels_enabled 
            ON sponsor_channels_stats(is_enabled)
        `);
        
        await Database.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_sponsor_channel_user_checks_channel 
            ON sponsor_channel_user_checks(channel_identifier)
        `);
        
        await Database.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_sponsor_channel_user_checks_user 
            ON sponsor_channel_user_checks(user_id)
        `);

        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        try {
            const config = require('./config');
            if (config.PERSONAL_SPONSOR_CHANNELS && config.PERSONAL_SPONSOR_CHANNELS.length > 0) {
                console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
                
                for (const channelInput of config.PERSONAL_SPONSOR_CHANNELS) {
                    const channelData = normalizeChannelIdentifier(channelInput);
                    
                    try {
                        await Database.pool.query(`
                            INSERT INTO sponsor_channels_stats (
                                channel_identifier, 
                                channel_title, 
                                channel_url, 
                                is_enabled
                            ) VALUES ($1, $2, $3, $4)
                            ON CONFLICT (channel_identifier) DO NOTHING
                        `, [
                            channelData.identifier,
                            channelData.title,
                            channelData.url,
                            true
                        ]);
                        
                        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: ${channelData.identifier}`);
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelInput}:`, error.message);
                    }
                }
            } else {
                console.log('‚ÑπÔ∏è –í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤');
            }
        } catch (configError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', configError.message);
        }
        
        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
        console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞');
        console.log('2. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (/admin)');
        console.log('3. –í—ã–±–µ—Ä–∏—Ç–µ "üì∫ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã"');
        console.log('4. –ù–∞–∂–º–∏—Ç–µ "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å config" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤');
        
        process.exit(0);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
function normalizeChannelIdentifier(channelInput) {
    if (channelInput.startsWith('https://t.me/')) {
        const username = channelInput.replace('https://t.me/', '');
        return {
            identifier: `@${username}`,
            title: username,
            url: channelInput
        };
    } else if (channelInput.startsWith('@')) {
        return {
            identifier: channelInput,
            title: channelInput.replace('@', ''),
            url: `https://t.me/${channelInput.replace('@', '')}`
        };
    } else {
        return {
            identifier: `@${channelInput}`,
            title: channelInput,
            url: `https://t.me/${channelInput}`
        };
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runMigration();
