#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ Telegram
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Python —Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import os
import sys
import json
import asyncio
import argparse
from datetime import datetime

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ JavaScript config)
API_CONFIG = {
    "api_id": 28085629,
    "api_hash": "78027b2ae19b9ec44a6e03bf5cc1299f",
    "phone_number": "+7972065986",
    "phone_number_alt": "+79639887777"
}

# –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
SESSION_FILE = "telegram_session.session"

async def create_session(api_id, api_hash, phone_number, session_name=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é Telegram"""
    try:
        from pyrogram import Client
        
        if not session_name:
            session_name = SESSION_FILE.replace('.session', '')
        
        print(f"üì± –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
        print(f"üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_name}.session")
        
        client = Client(
            session_name,
            api_id=api_id,
            api_hash=api_hash,
            phone_number=phone_number
        )
        
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        me = await client.get_me()
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
        print(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {me.phone_number}")
        print(f"üÜî ID: {me.id}")
        
        await client.stop()
        return True
        
    except ImportError:
        print("‚ùå Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyrogram tgcrypto")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—ÅÔøΩÔøΩ–∏: {e}")
        return False

async def test_session(session_name=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
    try:
        from pyrogram import Client
        
        if not session_name:
            session_name = SESSION_FILE.replace('.session', '')
        
        session_file = f"{session_name}.session"
        
        if not os.path.exists(session_file):
            print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {session_file}")
        
        client = Client(session_name, **API_CONFIG)
        await client.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        me = await client.get_me()
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''}")
        
        await client.stop()
        return True
        
    except ImportError:
        print("‚ùå Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyrogram tgcrypto")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        return False

async def test_stars_sending(session_name=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–≤—ë–∑–¥ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)"""
    try:
        from pyrogram import Client
        
        if not session_name:
            session_name = SESSION_FILE.replace('.session', '')
        
        print(f"‚≠ê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥...")
        
        client = Client(session_name, **API_CONFIG)
        await client.start()
        
        me = await client.get_me()
        print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name}")
        
        # –ó–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥
        # –ù–û –º—ã –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ")
        print("‚ö†Ô∏è  –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        await client.stop()
        return True
        
    except ImportError:
        print("‚ùå Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def list_sessions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π"""
    print("üìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π...")
    
    session_files = [f for f in os.listdir('.') if f.endswith('.session')]
    
    if not session_files:
        print("‚ùå –§–∞–π–ª—ã —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(session_files)}")
    for i, session_file in enumerate(session_files, 1):
        stat = os.stat(session_file)
        modified = datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
        print(f"  {i}. {session_file} (–∏–∑–º–µ–Ω–µ–Ω: {modified})")

def cleanup_sessions():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π...")
    
    session_files = [f for f in os.listdir('.') if f.endswith('.session')]
    
    if not session_files:
        print("‚ùå –§–∞–π–ª—ã —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    for session_file in session_files:
        try:
            os.remove(session_file)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {session_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {session_file}: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π Telegram')
    parser.add_argument('action', choices=['create', 'test', 'test-stars', 'list', 'cleanup'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--session', '-s', default=None, 
                       help='–ò–º—è —Å–µ—Å—Å–∏–∏ (–±–µ–∑ .session)')
    parser.add_argument('--phone', '-p', default=API_CONFIG['phone_number'], 
                       help='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    
    args = parser.parse_args()
    
    print(f"üöÄ Telegram Session Manager")
    print(f"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {args.action}")
    print("-" * 50)
    
    if args.action == 'create':
        success = await create_session(
            API_CONFIG['api_id'], 
            API_CONFIG['api_hash'], 
            args.phone, 
            args.session
        )
        sys.exit(0 if success else 1)
        
    elif args.action == 'test':
        success = await test_session(args.session)
        sys.exit(0 if success else 1)
        
    elif args.action == 'test-stars':
        success = await test_stars_sending(args.session)
        sys.exit(0 if success else 1)
        
    elif args.action == 'list':
        list_sessions()
        
    elif args.action == 'cleanup':
        cleanup_sessions()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
