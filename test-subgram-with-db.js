/**
 * –¢–µ—Å—Ç SubGram API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

const db = require('./database');
const { subgramAPI } = require('./subgram-api');
const axios = require('axios');

async function testSubGramWithDB() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SUBGRAM API –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –ò–ó –ë–î\n');

    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        console.log('1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n');

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
        console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram –∏–∑ –ë–î...');
        const settings = await db.getSubGramSettings();
        
        if (!settings) {
            console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        } else {
            console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î:');
            console.log(`  ‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: ${settings.enabled}`);
            console.log(`  ‚Ä¢ API URL: ${settings.api_url}`);
            console.log(`  ‚Ä¢ API –∫–ª—é—á: ${settings.api_key ? settings.api_key.substring(0, 20) + '...' : '–ù–ï–¢'}`);
            console.log(`  ‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${settings.max_sponsors}`);
            console.log(`  ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${settings.default_action}`);
        }
        console.log('');

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è
        console.log('3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è subgram-api.js...');
        const moduleConfig = subgramAPI.getConfig();
        console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è:', moduleConfig);
        console.log('');

        // 4. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î
        console.log('4Ô∏è‚É£ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î...');
        
        const apiKey = settings?.api_key || '5d4c6c5283559a05a9558b677669871d6ab58e00e71587546b25b4940ea6029d';
        const apiUrl = settings?.api_url || 'https://api.subgram.ru/request-op/';
        
        const directTestData = {
            UserId: "123456789",
            ChatId: "123456789",
            MaxOP: settings?.max_sponsors || 3,
            action: settings?.default_action || "subscribe",
            exclude_channel_ids: []
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å...');
        console.log('URL:', apiUrl);
        console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(directTestData, null, 2));

        try {
            const directResponse = await axios.post(apiUrl, directTestData, {
                headers: {
                    'Auth': apiKey,
                    'Content-Type': 'application/json'
                },
                timeout: 15000
            });

            console.log('‚úÖ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!');
            console.log('üì• –û—Ç–≤–µ—Ç:', JSON.stringify(directResponse.data, null, 2));
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î
            await db.logSubGramAPIRequest(
                123456789,
                'direct_test',
                directTestData,
                directResponse.data,
                true
            );
            
        } catch (directError) {
            console.log('‚ùå –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω:', directError.message);
            
            if (directError.response) {
                console.log('HTTP —Å—Ç–∞—Ç—É—Å:', directError.response.status);
                console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(directError.response.data, null, 2));
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
            await db.logSubGramAPIRequest(
                123456789,
                'direct_test',
                directTestData,
                directError.response?.data || {},
                false,
                directError.message
            );
        }
        console.log('');

        // 5. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å subgram-api.js
        console.log('5Ô∏è‚É£ –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å subgram-api.js...');
        
        const moduleTestData = {
            userId: "987654321",
            chatId: "987654321",
            maxOP: 3,
            action: 'subscribe',
            excludeChannelIds: [],
            withToken: true
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å...');
        
        const moduleResponse = await subgramAPI.requestSponsors(moduleTestData);
        
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥—É–ª—è:');
        console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${moduleResponse.success}`);
        if (moduleResponse.success && moduleResponse.data) {
            console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${moduleResponse.data.status}`);
            console.log(`  ‚Ä¢ –ö–æ–¥: ${moduleResponse.data.code}`);
            console.log(`  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${moduleResponse.data.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}`);
            console.log(`  ‚Ä¢ –°—Å—ã–ª–æ–∫: ${moduleResponse.data.links?.length || 0}`);
            
            if (moduleResponse.data.links && moduleResponse.data.links.length > 0) {
                console.log('üì∫ –ü–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏:');
                moduleResponse.data.links.slice(0, 3).forEach((link, index) => {
                    console.log(`    ${index + 1}. ${link}`);
                });
            }
        } else {
            console.log(`  ‚Ä¢ –û—à–∏–±–∫–∞: ${moduleResponse.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            if (moduleResponse.details) {
                console.log(`  ‚Ä¢ –î–µ—Ç–∞–ª–∏: ${JSON.stringify(moduleResponse.details, null, 2)}`);
            }
        }
        console.log('');

        // 6. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if (moduleResponse.success && moduleResponse.data) {
            console.log('6Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
            
            const processedData = subgramAPI.processAPIResponse(moduleResponse.data);
            console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
            console.log(`  ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${processedData.status}`);
            console.log(`  ‚Ä¢ –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: ${processedData.needsSubscription}`);
            console.log(`  ‚Ä¢ –ù—É–∂–µ–Ω –ø–æ–ª: ${processedData.needsGender}`);
            console.log(`  ‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: ${processedData.allSubscribed}`);
            console.log(`  ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å: ${processedData.canProceed}`);
            console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${processedData.channels.length}`);
            console.log(`  ‚Ä¢ –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${processedData.channelsToSubscribe.length}`);
            
            if (processedData.channelsToSubscribe.length > 0) {
                console.log('üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:');
                processedData.channelsToSubscribe.slice(0, 3).forEach((channel, index) => {
                    console.log(`    ${index + 1}. ${channel.name} - ${channel.link}`);
                });
            }
            console.log('');
        }

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
        console.log('7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ API –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å...');
        try {
            const recentLogs = await db.executeQuery(`
                SELECT * FROM subgram_api_requests 
                WHERE created_at > NOW() - INTERVAL '1 hour'
                ORDER BY created_at DESC
                LIMIT 10
            `);
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${recentLogs.rows.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å`);
            
            if (recentLogs.rows.length > 0) {
                const successCount = recentLogs.rows.filter(log => log.success).length;
                const errorCount = recentLogs.rows.length - successCount;
                
                console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${successCount}`);
                console.log(`  ‚Ä¢ –û—à–∏–±–æ–∫: ${errorCount}`);
                
                if (errorCount > 0) {
                    console.log('\n‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:');
                    recentLogs.rows.filter(log => !log.success).slice(0, 3).forEach((error, index) => {
                        console.log(`    ${index + 1}. ${error.error_message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                    });
                }
                
                if (successCount > 0) {
                    console.log('\n‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
                    recentLogs.rows.filter(log => log.success).slice(0, 3).forEach((success, index) => {
                        const status = success.response_data?.status || 'unknown';
                        const links = success.response_data?.links?.length || 0;
                        console.log(`    ${index + 1}. –°—Ç–∞—Ç—É—Å: ${status}, –°—Å—ã–ª–æ–∫: ${links}`);
                    });
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
        }
        console.log('');

        // 8. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        console.log('8Ô∏è‚É£ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
        console.log('========================================');
        
        console.log('‚úÖ –ü–†–û–í–ï–†–ï–ù–û:');
        console.log('  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î');
        console.log('  ‚Ä¢ –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å');
        console.log('  ‚Ä¢ –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å');
        console.log('  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
        console.log('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
        
        console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('1. –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
        console.log('2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ÔøΩÔøΩ—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ SubGram');
        console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º');
        console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ SubGram –ø–∞–Ω–µ–ª–∏');

    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testSubGramWithDB();
}

module.exports = { testSubGramWithDB };
