console.log('[ADMIN-FINAL] Loading final admin handlers...');

const db = require('./database');
const { throttler } = require('./message-throttler');

// Final working admin handlers based on successful test
async function handleAdminTasks(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminTasks called');
    
    try {
        const message = `üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏**

üõ†Ô∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:**
‚Ä¢ \`/create_task –∫–∞–Ω–∞–ª|–Ω–∞–∑–≤–∞–Ω–∏–µ|–Ω–∞–≥—Ä–∞–¥–∞|–ª–∏–º–∏—Ç\` - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ \`/delete_task ID\` - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å –ª–∏–º–∏—Ç–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ \`/create_task @myChannel|–ú–æ–π –∫–∞–Ω–∞–ª|2\` - –±–µ–∑ –ª–∏–º–∏—Ç–∞
‚Ä¢ \`/create_task @myChannel|–ú–æ–π –∫–∞–Ω–∞–ª|2|100\` - —Å –ª–∏–º–∏—Ç–æ–º 100 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ \`/delete_task 5\` (–≥–¥–µ 5 - ID –∑–∞–¥–∞–Ω–∏—è)

üî¢ **–û –ª–∏–º–∏—Ç–∞—Ö:**
‚Ä¢ –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ –° –ª–∏–º–∏—Ç–æ–º - –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ N –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –í —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', callback_data: 'admin_list_tasks' }],
                    [{ text: ' –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
        
        console.log('[ADMIN-FINAL] handleAdminTasks completed successfully');
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in handleAdminTasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminChannels(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminChannels called');
    
    try {
        const message = `üì∫ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏**

üõ†Ô∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏:**
‚Ä¢ \`/add_channel @channel|–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\` - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ \`/delete_channel ID\` - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª

üì∫ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ \`/add_channel @myChannel|–ú–æ–π –∫—Ä—É—Ç–æ–π –∫–∞–Ω–∞–ª\`
‚Ä¢ \`/delete_channel 3\` (–≥–¥–µ 3 - ID –∫–∞–Ω–∞–ª–∞)`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì∫ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤', callback_data: 'admin_list_channels' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
        
        console.log('[ADMIN-FINAL] handleAdminChannels completed successfully');
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in handleAdminChannels:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminLottery(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminLottery called');
    
    try {
        const message = `üé∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏**

üõ†Ô∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ—è–º–∏:**

**–û–±—ã—á–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏:**
‚Ä¢ \`/create_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|–±–∏–ª–µ—Ç—ã|—Ü–µ–Ω–∞|–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏|–ø—Ä–æ—Ü–µ–Ω—Ç\` - —Å–æ–∑–¥–∞—Ç—å –æ–±—ã—á–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é
‚Ä¢ \`/endlottery ID\` - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é –≤—Ä—É—á–Ω—É—é

**–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏:**
‚Ä¢ \`/create_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|—á–∞—Å–æ–≤|—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤|—Ü–µ–Ω–∞|1:–ø—Ä–∏–∑1|2:–ø—Ä–∏–∑2\` - —Å —É—Å–ª–æ–≤–∏–µ–º
‚Ä¢ \`/create_auto_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|—á–∞—Å–æ–≤|1:–ø—Ä–∏–∑1|2:–ø—Ä–∏–∑2\` - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏:**
‚Ä¢ \`/select_lottery_winners ID 1:userID 2:userID\` - –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é

üé∞ **–¢–∏–ø—ã –ª–æ—Ç–µ—Ä–µ–π:**
‚Ä¢ **–û–±—ã—á–Ω–∞—è** - –ø–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞ –∑–≤–µ–∑–¥—ã
‚Ä¢ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è** - –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å N —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ + –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ–ø. –±–∏–ª–µ—Ç—ã
‚Ä¢ **–ê–≤—Ç–æ-—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è** - –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∏–ª–µ—Ç

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ \`/create_lottery –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è|100|5|10|20\`
‚Ä¢ \`/create_referral_lottery –†–µ—Ñ|168|3|1.5|1:50|2:30|3:20\`
‚Ä¢ \`/create_auto_referral_lottery –ê–≤—Ç–æ|72|1:100|2:60|3:40\`
‚Ä¢ \`/select_lottery_winners 5 1:123456 2:789012 3:345678\`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –ø–æ –±–∏–ª–µ—Ç–∞–º!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üé∞ –°–ø–∏—Å–æ–∫ –ª–æ—Ç–µ—Ä–µ–π', callback_data: 'admin_list_lotteries' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
        
        console.log('[ADMIN-FINAL] handleAdminLottery completed successfully');
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in handleAdminLottery:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ—è–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminPromocodes(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminPromocodes called');
    
    try {
        const message = `üéÅ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏**

üõ†Ô∏è **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:**
‚Ä¢ \`/create_promo –ö–û–î|–Ω–∞–≥—Ä–∞–¥–∞|–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\` - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
‚Ä¢ \`/delete_promo ID\` - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥

üéÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

üí° **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ \`/create_promo WELCOME|0.5|100\`
‚Ä¢ \`/delete_promo 7\` (–≥–¥–µ 7 - ID –ø—Ä–æ–º–æ–∫–æ–¥–∞)`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üéÅ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data: 'admin_list_promos' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
        
        console.log('[ADMIN-FINAL] handleAdminPromocodes completed successfully');
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in handleAdminPromocodes:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminBroadcast(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminBroadcast called');
    
    try {
        const message = `üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –û –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö', callback_data: 'broadcast_tasks' }],
                    [{ text: 'üèÜ –û —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö', callback_data: 'broadcast_referrals' }],
                    [{ text: '‚úèÔ∏è –°–≤–æ—è —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data: 'broadcast_custom' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in handleAdminBroadcast:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

// List functions with database integration
async function handleAdminListTasks(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminListTasks called');

    try {
        const tasks = await db.getAllTasksStats();

        let message = 'üìã **–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π**\n\n';

        if (tasks.length === 0) {
            message += '‚ùå –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n';
            message += 'üí° **–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:**\n';
            message += '`/create_task –∫–∞–Ω–∞–ª|–Ω–∞–∑–≤–∞–Ω–∏–µ|–Ω–∞–≥—Ä–∞–¥–∞|–ª–∏–º–∏—Ç`';
        } else {
            tasks.forEach((task, index) => {
                message += `${index + 1}. **${task.channel_name || task.channel_id}**\n`;
                message += `   ‚Ä¢ ID: ${task.id}\n`;
                message += `   ‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê\n`;
                message += `   ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${task.current_completions}`;

                if (task.max_completions) {
                    message += `/${task.max_completions} (–æ—Å—Ç–∞–ª–æ—Å—å: ${task.remaining_completions})\n`;
                    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    const progress = Math.round((task.current_completions / task.max_completions) * 10);
                    const progressBar = '‚ñà'.repeat(progress) + '‚ñë'.repeat(10 - progress);
                    message += `   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: [${progressBar}] ${Math.round((task.current_completions / task.max_completions) * 100)}%\n`;
                } else {
                    message += ' (–±–µ–∑ –ª–∏–º–∏—Ç–∞)\n';
                }

                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${task.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º', callback_data: 'admin_tasks' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error listing tasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º', callback_data: 'admin_tasks' }]
                ]
            }
        });
    }
}

async function handleAdminListChannels(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminListChannels called');
    
    try {
        const channels = await db.executeQuery('SELECT * FROM required_channels ORDER BY id');
        
        let message = 'üì∫ **–°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤**\n\n';
        
        if (channels.rows.length === 0) {
            message += '‚ùå –ö–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n';
            message += 'üí° **–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π:**\n';
            message += '`/add_channel @channel|–ù–∞–∑–≤–∞–Ω–∏–µ`';
        } else {
            channels.rows.forEach((channel, index) => {
                message += `${index + 1}. **${channel.channel_name || channel.channel_id}**\n`;
                message += `   ‚Ä¢ ID: ${channel.id}\n`;
                message += `   ‚Ä¢ –ö–∞–Ω–∞–ª: ${channel.channel_id}\n`;
                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${channel.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º', callback_data: 'admin_channels' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error listing channels:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º', callback_data: 'admin_channels' }]
                ]
            }
        });
    }
}

async function handleAdminListLotteries(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminListLotteries called');

    try {
        // Get all lotteries including referral ones
        const lotteries = await db.executeQuery(`
            SELECT l.*, rl.required_referrals, rl.referral_time_hours,
                   rl.additional_ticket_price, rl.ends_at as ref_ends_at,
                   rl.winners_selected
            FROM lotteries l
            LEFT JOIN referral_lotteries rl ON l.id = rl.lottery_id
            ORDER BY l.id
        `);

        let message = 'üé∞ **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ—Ç–µ—Ä–µ–π**\n\n';

        if (lotteries.rows.length === 0) {
            message += '‚ùå –õ–æ—Ç–µ—Ä–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n';
            message += 'üí° **–°–æ–∑–¥–∞–π—Ç–µ –ª–æ—Ç–µ—Ä–µ—é –∫–æ–º–∞–Ω–¥–æ–π:**\n';
            message += '`/create_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|100|5|10|20` - –æ–±—ã—á–Ω–∞—è\n';
            message += '`/create_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|168|3|1.5|1:50|2:30` - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è';
        } else {
            lotteries.rows.forEach((lottery, index) => {
                const lotteryType = lottery.lottery_type || 'standard';
                const typeEmoji = lotteryType === 'standard' ? 'üé´' :
                                lotteryType === 'referral_condition' ? 'üë•' : 'üîÑ';
                const typeName = lotteryType === 'standard' ? '–æ–±—ã—á–Ω–∞—è' :
                               lotteryType === 'referral_condition' ? '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è' : '–∞–≤—Ç–æ-—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è';

                message += `${index + 1}. ${typeEmoji} **${lottery.name}** (${typeName})\n`;
                message += `   ‚Ä¢ ID: ${lottery.id}\n`;

                if (lotteryType === 'standard') {
                    message += `   ‚Ä¢ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} ‚≠ê\n`;
                    message += `   ‚Ä¢ –ë–∏–ª–µ—Ç–æ–≤: ${lottery.current_tickets}/${lottery.max_tickets}\n`;
                } else {
                    // Referral lottery
                    if (lottery.ref_ends_at) {
                        const timeLeft = new Date(lottery.ref_ends_at) - new Date();
                        const hoursLeft = Math.max(0, Math.floor(timeLeft / (1000 * 60 * 60)));
                        message += `   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${hoursLeft} —á–∞—Å–æ–≤\n`;
                    }

                    if (lotteryType === 'referral_condition') {
                        message += `   ‚Ä¢ –£—Å–ª–æ–≤–∏–µ: ${lottery.required_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
                        message += `   ‚Ä¢ –î–æ–ø. –±–∏–ª–µ—Ç: ${lottery.additional_ticket_price} ‚≠ê\n`;
                    }

                    if (lottery.winners_selected) {
                        message += `   ‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ‚úÖ –í—ã–±—Ä–∞–Ω—ã\n`;
                    } else {
                        message += `   ‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã\n`;
                    }
                }

                message += `   ‚Ä¢ –ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: ${lottery.winners_count}\n`;
                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${lottery.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∞'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'admin_lottery' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error listing lotteries:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–µ—Ä–µ–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'admin_lottery' }]
                ]
            }
        });
    }
}

async function handleAdminListPromos(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminListPromos called');
    
    try {
        const promos = await db.executeQuery('SELECT * FROM promocodes ORDER BY id');
        
        let message = 'üéÅ **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**\n\n';
        
        if (promos.rows.length === 0) {
            message += '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n';
            message += 'üí° **–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π:**\n';
            message += '`/create_promo –ö–û–î|0.5|100`';
        } else {
            promos.rows.forEach((promo, index) => {
                message += `${index + 1}. **${promo.code}**\n`;
                message += `   ‚Ä¢ ID: ${promo.id}\n`;
                message += `   ‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞: ${promo.reward} ‚≠ê\n`;
                message += `   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${promo.current_uses}/${promo.max_uses || '‚àû'}\n`;
                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${promo.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º', callback_data: 'admin_promocodes' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error listing promocodes:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º', callback_data: 'admin_promocodes' }]
                ]
            }
        });
    }
}

// Broadcast functions
async function handleBroadcastTasks(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleBroadcastTasks called');
    
    try {
        const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');

        const message = `üìã **–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å!**

üéØ –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã!
üí∞ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        // Use throttler for broadcast
        const result = await throttler.broadcastMessages(
            users.rows,
            (user) => bot.sendMessage(user.id, message, {
                parse_mode: 'Markdown',
                ...keyboard
            })
        );

        await bot.editMessageText(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.success} –∏–∑ ${result.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚ùå –û—à–∏–±–æ–∫: ${result.errors}`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]
                ]
            }
        });

    } catch (error) {
        console.error('[ADMIN-FINAL] Error in broadcast tasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]
                ]
            }
        });
    }
}

async function handleBroadcastReferrals(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleBroadcastReferrals called');
    
    try {
        const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');

        const message = `üèÜ **–ü–æ–ø–∞–¥–∏—Ç–µ –≤ —Ç–æ–ø-5 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º!**

üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!
üéÅ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 ‚≠ê`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'invite' }],
                    [{ text: 'üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'ratings' }]
                ]
            }
        };

        // Use throttler for broadcast
        const result = await throttler.broadcastMessages(
            users.rows,
            (user) => bot.sendMessage(user.id, message, {
                parse_mode: 'Markdown',
                ...keyboard
            })
        );

        await bot.editMessageText(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.success} –∏–∑ ${result.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚ùå –û—à–∏–±–æ–∫: ${result.errors}`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]
                ]
            }
        });

    } catch (error) {
        console.error('[ADMIN-FINAL] Error in broadcast referrals:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]
                ]
            }
        });
    }
}

// Custom broadcast handler - —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ inline interface –≤ main file

// ============ CAPTCHA ADMIN FUNCTIONS ============

async function handleAdminCaptcha(bot, chatId, messageId) {
    console.log('[ADMIN-FINAL] handleAdminCaptcha called');

    try {
        const { captchaSystem } = require('./captcha-system');
        const stats = await captchaSystem.getCaptchaStats(db);

        const message = `üõ°Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∫–∞–ø—á–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats?.total_users || 0}
‚úÖ –ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: ${stats?.verified_users || 0}
‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ: ${stats?.suspicious_users || 0}
‚è±Ô∏è ÔøΩÔøΩ—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(stats?.avg_response_time/1000) || 0}—Å

üìà **–ü–æ —Ç–∏–ø–∞–º –∫–∞–ø—á–∏:**
üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ: ${stats?.math_captchas || 0}
üòÄ Emoji: ${stats?.emoji_captchas || 0}
üß© –õ–æ–≥–∏—á–µ—Å–∫–∏–µ: ${stats?.logic_captchas || 0}

üõ†Ô∏è **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ \`/captcha_stats\` - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ \`/suspicious_users\` - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
‚Ä¢ \`/reset_captcha USER_ID\` - —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ \`/captcha_settings\` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_captcha_detailed' },
                        { text: '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ', callback_data: 'admin_captcha_suspicious' }
                    ],
                    [
                        { text: 'üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π', callback_data: 'admin_captcha_cleanup' },
                        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_captcha_settings' }
                    ],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });

        console.log('[ADMIN-FINAL] handleAdminCaptcha completed successfully');
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in handleAdminCaptcha:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–ø—á–µ–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

async function handleAdminCaptchaDetailed(bot, chatId, messageId) {
    try {
        const stats = await db.getCaptchaStatistics();

        let message = 'üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ø—á–∏**\n\n';

        if (stats.length === 0) {
            message += '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ø—á–µ.\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.';
        } else {
            for (const stat of stats) {
                const typeNames = {
                    'math': 'üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ',
                    'emoji': 'üòÄ Emoji',
                    'logic': 'üß© –õ–æ–≥–∏—á–µ—Å–∫–∏–µ',
                    'sequence': 'üî¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                    'text': '‚úèÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–µ'
                };

                const typeName = typeNames[stat.captcha_type] || stat.captcha_type;
                const successRate = Math.round(stat.success_rate || 0);
                const avgTime = Math.round(stat.avg_response_time/1000) || 0;

                message += `${typeName}:\n`;
                message += `  üìà –°–æ–∑–¥–∞–Ω–æ: ${stat.total_generated}\n`;
                message += `  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${stat.total_completed}\n`;
                message += `  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${stat.total_failed}\n`;
                message += `  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%\n`;
                message += `  ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime}—Å\n\n`;
            }
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in detailed captcha stats:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    }
}

async function handleAdminCaptchaSuspicious(bot, chatId, messageId) {
    try {
        const suspiciousUsers = await db.getSuspiciousUsers(20);

        let message = '‚ö†Ô∏è **–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n';

        if (suspiciousUsers.length === 0) {
            message += '‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
        } else {
            message += `–ù–∞–π–¥–µ–Ω–æ: ${suspiciousUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n`;

            for (let i = 0; i < Math.min(suspiciousUsers.length, 10); i++) {
                const user = suspiciousUsers[i];
                const displayName = user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const username = user.username ? `@${user.username}` : '';
                const responseTime = Math.round(user.response_time/1000) || 0;

                message += `${i+1}. **${displayName}** ${username}\n`;
                message += `   ID: ${user.user_id}\n`;
                message += `   –ö–∞–ø—á–∞: ${user.captcha_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
                message += `   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}—Å\n`;
                message += `   –ü–æ–ø—ã—Ç–æ–∫: ${user.attempt_count}\n`;
                message += `   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${user.suspicious_activities}\n\n`;
            }

            if (suspiciousUsers.length > 10) {
                message += `... –∏ –µ—â–µ ${suspiciousUsers.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
            }
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error getting suspicious users:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    }
}

async function handleAdminCaptchaCleanup(bot, chatId, messageId) {
    try {
        const cleaned = await db.cleanupExpiredCaptchaSessions();

        const message = `üßπ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–µ—Å—Å–∏–π: ${cleaned}\n\nüí° –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –µ—ë –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_captcha_cleanup' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in captcha cleanup:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    }
}

async function handleAdminCaptchaSettings(bot, chatId, messageId) {
    try {
        const message = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—á–∏**

üõ°Ô∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 3 —Å–µ–∫—É–Ω–¥—ã
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 5 –º–∏–Ω—É—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: 3
‚Ä¢ –¢–∏–ø—ã –∫–∞–ø—á–∏: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, emoji, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç–µ–∫—Å—Ç–æ–≤—ã–µ

üéØ **–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –õ–µ–≥–∫–∏–π: –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –°–ª–æ–∂–Ω—ã–π: –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π: –¥–ª—è –±–æ—Ç–æ–≤

‚ö†Ô∏è **–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫

üí° –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞.`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    } catch (error) {
        console.error('[ADMIN-FINAL] Error in captcha settings:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ø—á–µ', callback_data: 'admin_captcha' }]
                ]
            }
        });
    }
}

console.log('[ADMIN-FINAL] All functions defined, exporting...');

module.exports = {
    handleAdminTasks,
    handleAdminChannels,
    handleAdminLottery,
    handleAdminPromocodes,
    handleAdminBroadcast,
    handleBroadcastTasks,
    handleBroadcastReferrals,
    handleAdminListTasks,
    handleAdminListChannels,
    handleAdminListLotteries,
    handleAdminListPromos,
    // Captcha admin functions
    handleAdminCaptcha,
    handleAdminCaptchaDetailed,
    handleAdminCaptchaSuspicious,
    handleAdminCaptchaCleanup,
    handleAdminCaptchaSettings
};

console.log('[ADMIN-FINAL] Final admin handlers export completed');
