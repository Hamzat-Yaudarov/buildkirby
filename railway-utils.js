const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool({
    connectionString: config.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Railway

async function analyzeUserLoss() {
    try {
        console.log('üîç –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–†–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ù–ê RAILWAY\n');
        
        const total = await pool.query('SELECT COUNT(*) as count FROM users');
        console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${total.rows[0].count}`);

        const recent = await pool.query(`
            SELECT COUNT(*) as count FROM users 
            WHERE created_at >= CURRENT_DATE - INTERVAL '7 days'
        `);
        console.log(`üìÖ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: ${recent.rows[0].count}`);

        const captcha = await pool.query(`
            SELECT captcha_passed, COUNT(*) as count 
            FROM users 
            GROUP BY captcha_passed
        `);
        console.log('\nü§ñ –ö–ê–ü–ß–ê:');
        captcha.rows.forEach(row => {
            const status = row.captcha_passed ? '–ü—Ä–æ—à–ª–∏' : '–ù–ï –ø—Ä–æ—à–ª–∏';
            console.log(`   ${status}: ${row.count}`);
        });

        const languages = await pool.query(`
            SELECT language_code, COUNT(*) as count 
            FROM users 
            GROUP BY language_code 
            ORDER BY count DESC LIMIT 10
        `);
        console.log('\nüåê –¢–û–ü –Ø–ó–´–ö–ò:');
        languages.rows.forEach(row => {
            const blocked = ['fa', 'ar'].includes(row.language_code) ? 'üö´' : '‚úÖ';
            console.log(`   ${blocked} ${row.language_code}: ${row.count}`);
        });

        const dates = await pool.query(`
            SELECT DATE(created_at) as date, COUNT(*) as count
            FROM users 
            WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
            GROUP BY DATE(created_at)
            ORDER BY date DESC LIMIT 5
        `);
        console.log('\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 5 –î–ù–ï–ô:');
        dates.rows.forEach(row => {
            console.log(`   ${row.date}: ${row.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    } finally {
        await pool.end();
    }
}

async function mergeDatabases() {
    console.log('üîÑ –ó–ê–ü–£–°–ö –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ë–ê–ó –ù–ê RAILWAY...\n');
    
    const DB1_URL = config.DATABASE_URL; // –¢–µ–∫—É—â–∞—è
    const DB2_URL = 'postgresql://neondb_owner:npg_kA5CYbq6KRQD@ep-late-math-a23qdcph-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require';
    
    const db1 = new Pool({ connectionString: DB1_URL, ssl: { rejectUnauthorized: false } });
    const db2 = new Pool({ connectionString: DB2_URL, ssl: { rejectUnauthorized: false } });
    
    try {
        // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        await db1.query('SELECT NOW()');
        await db2.query('SELECT NOW()');
        console.log('‚úÖ –û–±–µ –±–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
        
        // –ê–Ω–∞–ª–∏–∑
        const db1Users = await db1.query('SELECT COUNT(*) as count FROM users');
        const db2Users = await db2.query('SELECT COUNT(*) as count FROM users');
        
        console.log(`DB1 (—Ç–µ–∫—É—â–∞—è): ${db1Users.rows[0].count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        console.log(`DB2 (—Å—Ç–∞—Ä–∞—è): ${db2Users.rows[0].count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        if (parseInt(db2Users.rows[0].count) > parseInt(db1Users.rows[0].count)) {
            console.log('\nüîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ DB2...');
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î
            const oldUsers = await db2.query('SELECT * FROM users ORDER BY created_at ASC');
            
            let added = 0;
            let skipped = 0;
            
            for (const user of oldUsers.rows) {
                try {
                    await db1.query(`
                        INSERT INTO users (
                            user_id, username, first_name, language_code, is_premium,
                            balance, total_earned, referral_earned, total_referrals,
                            referrer_id, referral_completed, captcha_passed, created_at
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
                        ON CONFLICT (user_id) DO UPDATE SET
                            balance = GREATEST(users.balance, EXCLUDED.balance),
                            total_earned = GREATEST(users.total_earned, EXCLUDED.total_earned)
                    `, [
                        user.user_id, user.username, user.first_name, user.language_code, user.is_premium,
                        user.balance, user.total_earned, user.referral_earned, user.total_referrals,
                        user.referrer_id, user.referral_completed, user.captcha_passed, user.created_at
                    ]);
                    added++;
                } catch (error) {
                    skipped++;
                }
                
                if ((added + skipped) % 100 === 0) {
                    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${added + skipped}, –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${added}`);
                }
            }
            
            console.log(`\n‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${added}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skipped}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    } finally {
        await db1.end();
        await db2.end();
    }
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∑–∞—è–≤–æ–∫
async function fixWithdrawalNumbering() {
    try {
        console.log('üî¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–£–ú–ï–†–ê–¶–ò–ò –ó–ê–Ø–í–û–ö...');
        
        const result = await pool.query(`
            SELECT setval('withdrawal_requests_id_seq', 520, true);
        `);
        
        console.log('‚úÖ –ù—É–º–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å 521');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ
const command = process.argv[2];

switch (command) {
    case 'analyze':
        analyzeUserLoss();
        break;
    case 'merge':
        mergeDatabases();
        break;
    case 'fix-numbering':
        fixWithdrawalNumbering();
        break;
    default:
        console.log('üöÄ RAILWAY –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ë–û–¢–ê\n');
        console.log('–ö–æ–º–∞–Ω–¥—ã:');
        console.log('node railway-utils.js analyze      - –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log('node railway-utils.js merge        - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö');
        console.log('node railway-utils.js fix-numbering - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 521');
        break;
}
