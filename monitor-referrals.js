console.log('üîç [MONITOR-REFERRALS] –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');

const db = require('./database');

async function monitorReferrals() {
    try {
        console.log('üìä [MONITOR-REFERRALS] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();

        console.log('üîç [MONITOR-REFERRALS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
        const inconsistentFlags = await db.executeQuery(`
            SELECT 
                id,
                first_name,
                invited_by,
                captcha_passed,
                is_subscribed,
                referral_processed,
                referrals_count,
                balance
            FROM users 
            WHERE invited_by IS NOT NULL 
            AND (
                (referral_processed = TRUE AND (captcha_passed = FALSE OR is_subscribed = FALSE))
                OR
                (referral_processed = FALSE AND captcha_passed = TRUE AND is_subscribed = TRUE)
            )
        `);

        if (inconsistentFlags.rows.length > 0) {
            console.log(`‚ö†Ô∏è [MONITOR-REFERRALS] –ù–∞–π–¥–µ–Ω–æ ${inconsistentFlags.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏:`);
            for (const user of inconsistentFlags.rows) {
                console.log(`   üë§ ${user.first_name} (ID: ${user.id})`);
                console.log(`      –ö–∞–ø—á–∞: ${user.captcha_passed}, –ü–æ–¥–ø–∏—Å–∫–∞: ${user.is_subscribed}, –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${user.referral_processed}`);
            }
        } else {
            console.log('‚úÖ [MONITOR-REFERRALS] –í—Å–µ —Ñ–ª–∞–≥–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã');
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—á—ë—Ç—á–∏–∫–∞–º–∏
        const potentialIssues = await db.executeQuery(`
            SELECT 
                r.id as referrer_id,
                r.first_name as referrer_name,
                r.referrals_count as recorded_referrals,
                r.balance,
                COUNT(CASE WHEN i.captcha_passed = TRUE AND i.is_subscribed = TRUE THEN 1 END) as active_referrals,
                COUNT(CASE WHEN i.captcha_passed = TRUE AND i.is_subscribed = TRUE AND i.referral_processed = TRUE THEN 1 END) as processed_referrals,
                COUNT(i.id) as total_invited
            FROM users r
            LEFT JOIN users i ON r.id = i.invited_by
            WHERE r.referrals_count > 0
            GROUP BY r.id, r.first_name, r.referrals_count, r.balance
            HAVING r.referrals_count != COUNT(CASE WHEN i.captcha_passed = TRUE AND i.is_subscribed = TRUE THEN 1 END)
            ORDER BY r.referrals_count DESC
        `);

        if (potentialIssues.rows.length > 0) {
            console.log(`‚ö†Ô∏è [MONITOR-REFERRALS] –ù–∞–π–¥–µ–Ω–æ ${potentialIssues.rows.length} —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏:`);
            for (const issue of potentialIssues.rows) {
                const overcount = issue.recorded_referrals - issue.active_referrals;
                console.log(`   ÔøΩÔøΩÔøΩ ${issue.referrer_name} (ID: ${issue.referrer_id})`);
                console.log(`      –ó–∞–ø–∏—Å–∞–Ω–æ: ${issue.recorded_referrals}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${issue.active_referrals}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${issue.processed_referrals}`);
                console.log(`      –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ${overcount}, –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: ${issue.total_invited}`);
            }
        } else {
            console.log('‚úÖ [MONITOR-REFERRALS] –í—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª—ã
        const selfReferrals = await db.executeQuery(`
            SELECT id, first_name, invited_by
            FROM users 
            WHERE id = invited_by
        `);

        if (selfReferrals.rows.length > 0) {
            console.log(`üö® [MONITOR-REFERRALS] –ö–†–ò–¢–ò–ß–ù–û! –ù–∞–π–¥–µ–Ω–æ ${selfReferrals.rows.length} —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:`);
            for (const selfRef of selfReferrals.rows) {
                console.log(`   üë§ ${selfRef.first_name} (ID: ${selfRef.id}) –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–∞–º —Å–µ–±—è!`);
            }
        } else {
            console.log('‚úÖ [MONITOR-REFERRALS] –°–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        const cyclicReferrals = await db.executeQuery(`
            WITH RECURSIVE referral_chain AS (
                SELECT id, invited_by, 1 as depth, ARRAY[id] as chain
                FROM users
                WHERE invited_by IS NOT NULL
                
                UNION ALL
                
                SELECT u.id, u.invited_by, rc.depth + 1, rc.chain || u.id
                FROM users u
                JOIN referral_chain rc ON u.invited_by = rc.id
                WHERE rc.depth < 10 AND u.id != ALL(rc.chain)
            )
            SELECT DISTINCT chain
            FROM referral_chain rc1
            WHERE EXISTS (
                SELECT 1 FROM referral_chain rc2 
                WHERE rc1.id = rc2.invited_by AND rc2.id = ANY(rc1.chain)
            )
        `);

        if (cyclicReferrals.rows.length > 0) {
            console.log(`üö® [MONITOR-REFERRALS] –ö–†–ò–¢–ò–ß–ù–û! –ù–∞–π–¥–µ–Ω–æ ${cyclicReferrals.rows.length} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫:`);
            for (const cycle of cyclicReferrals.rows) {
                console.log(`   üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞: ${cycle.chain.join(' ‚Üí ')}`);
            }
        } else {
            console.log('‚úÖ [MONITOR-REFERRALS] –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // 5. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const generalStats = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN invited_by IS NOT NULL THEN 1 END) as users_with_referrer,
                COUNT(CASE WHEN referrals_count > 0 THEN 1 END) as users_with_referrals,
                COUNT(CASE WHEN captcha_passed = TRUE THEN 1 END) as users_with_captcha,
                COUNT(CASE WHEN is_subscribed = TRUE THEN 1 END) as subscribed_users,
                COUNT(CASE WHEN referral_processed = TRUE THEN 1 END) as processed_referrals,
                SUM(referrals_count) as total_referral_count,
                SUM(balance) as total_balance
            FROM users
        `);

        const stats = generalStats.rows[0];
        console.log('\nüìä [MONITOR-REFERRALS] –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('‚ïê'.repeat(50));
        console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}`);
        console.log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${stats.users_with_referrer}`);
        console.log(`üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${stats.users_with_referrals}`);
        console.log(`ü§ñ –ü—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: ${stats.users_with_captcha}`);
        console.log(`üì∫ –ü–æ–¥–ø–∏—Å–∞–Ω—ã: ${stats.subscribed_users}`);
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.processed_referrals}`);
        console.log(`üî¢ –û–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.total_referral_count}`);
        console.log(`‚≠ê –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance}`);
        console.log('‚ïê'.repeat(50));

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        const systemHealth = 
            inconsistentFlags.rows.length === 0 &&
            potentialIssues.rows.length === 0 &&
            selfReferrals.rows.length === 0 &&
            cyclicReferrals.rows.length === 0;

        if (systemHealth) {
            console.log('üéâ [MONITOR-REFERRALS] –°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            return { status: 'healthy', issues: [] };
        } else {
            const issues = [];
            if (inconsistentFlags.rows.length > 0) issues.push(`${inconsistentFlags.rows.length} –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤`);
            if (potentialIssues.rows.length > 0) issues.push(`${potentialIssues.rows.length} –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—á—ë—Ç—á–∏–∫–∞–º–∏`);
            if (selfReferrals.rows.length > 0) issues.push(`${selfReferrals.rows.length} —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
            if (cyclicReferrals.rows.length > 0) issues.push(`${cyclicReferrals.rows.length} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–æ—á–µ–∫`);

            console.log(`‚ö†Ô∏è [MONITOR-REFERRALS] –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${issues.join(', ')}`);
            console.log('üîß [MONITOR-REFERRALS] –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run fix-referrals');
            
            return { 
                status: 'issues_found', 
                issues: issues,
                inconsistentFlags: inconsistentFlags.rows.length,
                potentialIssues: potentialIssues.rows.length,
                selfReferrals: selfReferrals.rows.length,
                cyclicReferrals: cyclicReferrals.rows.length
            };
        }

    } catch (error) {
        console.error('‚ùå [MONITOR-REFERRALS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:', error);
        return { status: 'error', message: error.message };
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    monitorReferrals()
        .then((result) => {
            console.log(`üéØ [MONITOR-REFERRALS] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°—Ç–∞—Ç—É—Å: ${result.status}`);
            process.exit(result.status === 'healthy' ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå [MONITOR-REFERRALS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { monitorReferrals };
