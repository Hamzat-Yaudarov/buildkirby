#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö API –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Star –ø–æ–¥–∞—Ä–∫–æ–≤
"""

import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_CONFIG = {
    "api_id": 28085629,
    "api_hash": "78027b2ae19b9ec44a6e03bf5cc1299f",
    "phone_number": "+79639887777",
    "username": "kirbystarsagent"
}

async def test_pyrogram_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pyrogram API"""
    try:
        from pyrogram import Client
        from pyrogram.raw import functions, types as raw_types
        
        logger.info("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤ÔøΩÔøΩ–Ω–∏–µ Pyrogram API...")
        
        app = Client(
            "test_session",
            api_id=API_CONFIG["api_id"],
            api_hash=API_CONFIG["api_hash"],
            phone_number=API_CONFIG["phone_number"]
        )
        
        await app.start()
        me = await app.get_me()
        logger.info(f"‚úÖ Pyrogram: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        try:
            result = await app.invoke(functions.payments.GetStarGifts())
            logger.info(f"‚úÖ Pyrogram: –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(result.gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–¥–∞—Ä–∫–∞
            for i, gift in enumerate(result.gifts[:3]):
                logger.info(f"   üéÅ –ü–æ–¥–∞—Ä–æ–∫ {i+1}: {gift.stars} –∑–≤—ë–∑–¥ (ID: {gift.id})")
                
            await app.stop()
            return True, "Pyrogram API —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
        except Exception as api_error:
            logger.error(f"‚ùå Pyrogram API –æ—à–∏–±–∫–∞: {api_error}")
            await app.stop()
            return False, str(api_error)
            
    except Exception as e:
        logger.error(f"‚ùå Pyrogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False, str(e)

async def test_telethon_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon API"""
    try:
        from telethon import TelegramClient, functions
        
        logger.info("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon API...")
        
        client = TelegramClient(
            'test_telethon',
            API_CONFIG["api_id"],
            API_CONFIG["api_hash"]
        )
        
        await client.start(phone=API_CONFIG["phone_number"])
        me = await client.get_me()
        logger.info(f"‚úÖ Telethon: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        try:
            result = await client(functions.payments.GetStarGiftsRequest())
            logger.info(f"‚úÖ Telethon: –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(result.gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–¥–∞—Ä–∫–∞
            for i, gift in enumerate(result.gifts[:3]):
                logger.info(f"   üéÅ –ü–æ–¥–∞—Ä–æ–∫ {i+1}: {gift.stars} –∑–≤—ë–∑–¥ (ID: {gift.id})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SendStarsFormRequest
            if hasattr(functions.payments, 'SendStarsFormRequest'):
                logger.info("‚úÖ Telethon: SendStarsFormRequest –¥–æ—Å—Ç—É–ø–µ–Ω!")
            else:
                logger.warning("‚ö†Ô∏è Telethon: SendStarsFormRequest –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            await client.disconnect()
            return True, "Telethon API —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
        except Exception as api_error:
            logger.error(f"‚ùå Telethon API –æ—à–∏–±–∫–∞: {api_error}")
            await client.disconnect()
            return False, str(api_error)
            
    except Exception as e:
        logger.error(f"‚ùå Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False, str(e)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ú–ï–¢–û–î–û–í –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò STAR –ü–û–î–ê–†–ö–û–í\n")
    
    results = {}
    
    # –¢–µ—Å—Ç Pyrogram
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pyrogram...")
    pyrogram_success, pyrogram_msg = await test_pyrogram_api()
    results['pyrogram'] = (pyrogram_success, pyrogram_msg)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if pyrogram_success else '‚ùå'} {pyrogram_msg}\n")
    
    # –¢–µ—Å—Ç Telethon
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon...")
    telethon_success, telethon_msg = await test_telethon_api()
    results['telethon'] = (telethon_success, telethon_msg)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if telethon_success else '‚ùå'} {telethon_msg}\n")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if pyrogram_success and telethon_success:
        print("‚úÖ –û–±–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telethon —Å SendStarsFormRequest")
        print("üìÅ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ: python3 userbot-telethon.py")
    elif telethon_success:
        print("‚úÖ Telethon —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telethon –≤–µ—Ä—Å–∏—é")
        print("üìÅ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ: python3 userbot-telethon.py")
    elif pyrogram_success:
        print("‚úÖ Pyrogram —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é Pyrogram –≤–µ—Ä—Å–∏—é")
        print("üìÅ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ: python3 userbot-agent-correct.py")
    else:
        print("‚ùå –û–±–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install -r requirements-updated.txt")
        print("   2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞")
        print("   3. –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å API –º–µ—Ç–æ–¥–æ–≤")
    
    print("\n" + "="*50)
    return results

if __name__ == "__main__":
    try:
        results = asyncio.run(main())
        print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
