#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞–Ω–∏–π userbot
"""

import sqlite3
import asyncio
from datetime import datetime
from pyrogram import Client

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_CONFIG = {
    "api_id": 28085629,
    "api_hash": "78027b2ae19b9ec44a6e03bf5cc1299f",
    "phone_number": "+79639887777"
}

async def fix_queue_issues():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞–Ω–∏–π"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –û–ß–ï–†–ï–î–¨–Æ –ó–ê–î–ê–ù–ò–ô\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = "userbot_queue.db"
    if not sqlite3:
        print("‚ùå SQLite –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # 2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    print("üìã –¢–ï–ö–£–©–ò–ï –ó–ê–î–ê–ù–ò–Ø –í –û–ß–ï–†–ï–î–ò:")
    cursor.execute("""
        SELECT id, user_id, amount, withdrawal_type, status, attempts, created_at, error_message
        FROM withdrawal_queue 
        ORDER BY created_at DESC
        LIMIT 10
    """)
    
    tasks = cursor.fetchall()
    
    if not tasks:
        print("   üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
    else:
        for task in tasks:
            task_id, user_id, amount, w_type, status, attempts, created_at, error = task
            print(f"   üìù ID:{task_id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:{user_id} | {amount}‚≠ê | {status} | –ü–æ–ø—ã—Ç–æ–∫:{attempts}")
            if error:
                print(f"       ‚ùå –û—à–∏–±–∫–∞: {error}")
    
    # 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        app = Client(
            "userbot_session",
            api_id=API_CONFIG["api_id"],
            api_hash=API_CONFIG["api_hash"]
        )
        
        await app.start()
        me = await app.get_me()
        print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫–∞–∫: {me.first_name} (@{me.username})")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        
        problem_users = []
        for task in tasks:
            task_id, user_id, amount, w_type, status, attempts, created_at, error = task
            
            if status == 'pending' or '–Ω–µ –Ω–∞–π–¥–µ–Ω' in str(error):
                try:
                    user = await app.get_users(user_id)
                    print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user.first_name} (@{user.username or '–±–µ–∑ username'})")
                except Exception as e:
                    print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {str(e)}")
                    problem_users.append(task_id)
        
        # 5. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–¥ÔøΩÔøΩ–Ω–∏–π
        if problem_users:
            print(f"\nüóëÔ∏è –û–ß–ò–°–¢–ö–ê {len(problem_users)} –ü–†–û–ë–õ–ï–ú–ù–´–• –ó–ê–î–ê–ù–ò–ô:")
            
            for task_id in problem_users:
                cursor.execute("""
                    UPDATE withdrawal_queue 
                    SET status = 'failed', error_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                    WHERE id = ?
                """, (task_id,))
                print(f"   ‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            
            conn.commit()
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–µ–±—è
        print("\nüß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ó–ê–î–ê–ù–ò–Ø:")
        
        cursor.execute("""
            INSERT INTO withdrawal_queue (user_id, amount, withdrawal_type, status)
            VALUES (?, ?, ?, ?)
        """, (me.id, 1, 'test', 'pending'))
        
        conn.commit()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: 1 –∑–≤–µ–∑–¥–∞ –¥–ª—è {me.first_name}")
        
        await app.stop()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
    
    # 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n‚öôÔ∏è –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–´–• –ù–ê–°–¢–†–û–ï–ö:")
    
    cursor.execute("""
        UPDATE agent_settings 
        SET daily_limit = 80, hourly_limit = 10, max_amount = 25
        WHERE id = 1
    """)
    
    conn.commit()
    print("   ‚úÖ –õ–∏–º–∏—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: 80/–¥–µ–Ω—å, 10/—á–∞—Å, 25 –∑–∞ —Ä–∞–∑")
    
    # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:")
    
    cursor.execute("SELECT COUNT(*) FROM withdrawal_queue WHERE status = 'pending'")
    pending = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM withdrawal_queue WHERE status = 'failed'")
    failed = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM withdrawal_queue WHERE status = 'completed'")
    completed = cursor.fetchone()[0]
    
    print(f"   üìã –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}")
    
    conn.close()
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. ‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ userbot: python3 userbot-agent.py")
    print("2. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏")
    print("3. üì± –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ 15-25 –∑–≤—ë–∑–¥")
    print("4. üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏: tail -f userbot-agent.log")
    
    return True

if __name__ == "__main__":
    print("ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞–Ω–∏–π userbot\n")
    
    result = asyncio.run(fix_queue_issues())
    
    if result:
        print("\nüéâ –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ")
    else:
        print("\n‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
