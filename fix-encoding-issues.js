#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ —Ñ–∞–π–ª–∞—Ö
 */

const fs = require('fs');
const path = require('path');

// –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
const encodingFixes = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    'ÔøΩÔøΩ': '',  // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –∑–∞–º–µ—â–µ–Ω–∏—è
    'ÔøΩÔøΩÔøΩ': '‚≠ê',  // –ó–≤–µ–∑–¥–∞
    'ÔøΩÔøΩ—ã': '—ã',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '—ã'
    'ÔøΩÔøΩ–∞': '–∞',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–∞' 
    'ÔøΩÔøΩ–µ': '–µ',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–µ'
    'ÔøΩÔøΩ–∏': '–∏',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–∏'
    'ÔøΩÔøΩ–æ': '–æ',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–æ'
    'ÔøΩÔøΩ—É': '—É',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '—É'
    'ÔøΩÔøΩ—Ç': '—Ç',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '—Ç'
    'ÔøΩÔøΩ–Ω': '–Ω',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–Ω'
    'ÔøΩÔøΩ–∫': '–∫',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–∫'
    'ÔøΩÔøΩ–ª': '–ª',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–ª'
    'ÔøΩÔøΩ–º': '–º',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–º'
    'ÔøΩÔøΩ—Ä': '—Ä',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '—Ä'
    'ÔøΩÔøΩ—Å': '—Å',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '—Å'
    'ÔøΩÔøΩ–≤': '–≤',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–≤'
    'ÔøΩÔøΩ–∑': '–∑',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–∑'
    'ÔøΩÔøΩ–≥': '–≥',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–≥'
    'ÔøΩÔøΩ–¥': '–¥',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '–¥'
    'ÔøΩÔøΩ—Ñ': '—Ñ',   // –û–∫–æ–Ω—á–∞–Ω–∏–µ '—Ñ'
    'ÔøΩÔøΩ—å': '—å',   // –ú—è–≥–∫–∏–π –∑–Ω–∞–∫
    'ÔøΩÔøΩ—ä': '—ä',   // –¢–≤–µ—Ä–¥—ã–π –∑–Ω–∞–∫
    'ÔøΩÔøΩ–π': '–π',   // –ô
    'ÔøΩÔøΩ—Ü': '—Ü',   // –¶
    'ÔøΩÔøΩ—á': '—á',   // –ß
    'ÔøΩÔøΩ—à': '—à',   // –®
    'ÔøΩÔøΩ—â': '—â',   // –©
    'ÔøΩÔøΩ—é': '—é',   // –Æ
    'ÔøΩÔøΩ—è': '—è',   // –Ø
    'ÔøΩÔøΩ—ë': '—ë',   // –Å
    'ÔøΩÔøΩ–∂': '–∂',   // –ñ
    'ÔøΩÔøΩ—Ö': '—Ö',   // –•
    'ÔøΩÔøΩ–ø': '–ø',   // –ü
    'ÔøΩÔøΩ–±': '–±',   // –ë
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤
    '–ü—Ä–∏–≥–ªÔøΩÔøΩ—Å–∏—Ç—å': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å',
    '—Ä–æ–∑—ã–≥ÔøΩÔøΩ—ã—à–∞—Ö': '—Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö', 
    '–ΩÔøΩÔøΩ—Ç': '–Ω–µ—Ç',
    '—Å–æ—Ö—Ä–∞ÔøΩÔøΩ–µ–Ω—ã': '—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
    '–õÔøΩÔøΩ—Ç–µ—Ä–µ—è': '–õ–æ—Ç–µ—Ä–µ—è',
    '—Ä–∞—Å–ø—Ä–µ–¥–µÔøΩÔøΩ–µ–Ω—ã': '—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
    'ÔøΩÔøΩ–∞–π–¥–µ–Ω': '–Ω–∞–π–¥–µ–Ω',
    'ÔøΩÔøΩ–∞–Ω–∞–ª': '–ö–∞–Ω–∞–ª',
    '—Å–æ–∑–¥–∞ÔøΩÔøΩ–∞': '—Å–æ–∑–¥–∞–Ω–∞',
    '—á–∞—Å–æÔøΩÔøΩ': '—á–∞—Å–æ–≤',
    '–ø—Ä–∏–≥–ªÔøΩÔøΩ—Å–∏—Ç—å': '–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å',
    '–ø–æÔøΩÔøΩ—å–∑–æ–≤–∞—Ç–µ–ª—è–º': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    '–¥ÔøΩÔøΩ—É–∑–µ–π': '–¥—Ä—É–∑–µ–π',
    '–±–∏–ª–µÔøΩÔøΩ': '–±–∏–ª–µ—Ç',
    '–ü–æ–±–µÔøΩÔøΩ–∏—Ç–µ–ª–∏': '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏',
    '–ò—Å–ø–æ–ª—å–∑–æÔøΩÔøΩ–∞–Ω–∏–π': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π',
    '–ø—Ä–∏–≥–ª–∞—à–∞ÔøΩÔøΩ': '–ø—Ä–∏–≥–ª–∞—à–∞—Ç—å',
    'ÔøΩÔøΩ–∞–ø—É—Å–∫–∞—é': '–ó–∞–ø—É—Å–∫–∞—é',
    '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞ÔøΩÔøΩ—å–Ω–æ—Å—Ç—å': '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
    '–æ–±—Ä–∞ÔøΩÔøΩ–æ—Ç–∫–∞': '–æ–±—Ä–∞–±–æ—Ç–∫–∞',
    'ÔøΩÔøΩ—Ä–æ–∏–∑–æ—à–ª–∞': '–ü—Ä–æ–∏–∑–æ—à–ª–∞',
    '–ùÔøΩÔøΩ–≥—Ä–∞–¥–∞': '–ù–∞–≥—Ä–∞–¥–∞',
    '–ø–µ—Ä—Å–æ–Ω–∞–ª—åÔøΩÔøΩ—ã–π': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π',
    'ÔøΩÔøΩ—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ': '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ',
    '—Ñ–æ—Ä–º–∏—Ä–æ–≤ÔøΩÔøΩ–Ω–∏—è': '—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è',
    '–ü–æ–¥–ø–∏—Å–∫ÔøΩÔøΩ': '–ü–æ–¥–ø–∏—Å–∫–∞',
    'ÔøΩÔøΩÔøΩ Telegram': 'üî• Telegram',
    'ÔøΩÔøΩÔøΩ **–°–æ–≤–µ—Ç—ã:**': 'üí° **–°–æ–≤–µ—Ç—ã:**',
    '—Ä–µ–π—Ç–∏–ΩÔøΩÔøΩ–∞': '—Ä–µ–π—Ç–∏–Ω–≥–∞',
    '–üÔøΩÔøΩ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–ûÔøΩÔøΩ—â–∏–π': '–û–±—â–∏–π', 
    '–£–∫ÔøΩÔøΩ–∂–∏—Ç–µ': '–£–∫–∞–∂–∏—Ç–µ',
    '—Ä–∞—Å—ÅÔøΩÔøΩ–ª–∫—É': '—Ä–∞—Å—Å—ã–ª–∫—É',
    '–±—ÉÔøΩÔøΩ–µ—Ç': '–±—É–¥–µ—Ç',
    '—Å–æ–æ–±—âÔøΩÔøΩ–Ω–∏–µ': '—Å–æ–æ–±—â–µ–Ω–∏–µ',
    'ÔøΩÔøΩÔøΩÔøΩ': 'üéâ',
    '–ùÔøΩÔøΩ–≥—Ä–∞–¥—ã': '–ù–∞–≥—Ä–∞–¥—ã',
    '–ø–æÔøΩÔøΩ—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–æ—Ç–∫–ª—é—á–µÔøΩÔøΩ–∞': '–æ—Ç–∫–ª—é—á–µ–Ω–∞',
    '–æ–±—ÄÔøΩÔøΩ–±–æ—Ç–∫–∞': '–æ–±—Ä–∞–±–æ—Ç–∫–∞',
    '–∑–∞—è–≤ÔøΩÔøΩ–æ–∫': '–∑–∞—è–≤–æ–∫',
    '–∞ÔøΩÔøΩ—Ç–æ–º–∞—Ç': '–∞–≤—Ç–æ–º–∞—Ç',
    '–†ÔøΩÔøΩ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ',
    '–±–µ–∑–æ–øÔøΩÔøΩ—Å–Ω—ã–µ': '–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ',
    '–ø—ÄÔøΩÔøΩ—Ü–µ—Å—Å–µ': '–ø—Ä–æ—Ü–µ—Å—Å–µ',
    '–û—Ç–ø—ÄÔøΩÔøΩ–≤–ª–µ–Ω–æ': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    
    // –≠–º–æ–¥–∑–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    'ÔøΩÔøΩÔøΩÔøΩ': 'üéØ',
    'ÔøΩÔøΩ': '‚ö†Ô∏è',
    'ÔøΩÔøΩÔøΩÔøΩ': 'üîß',
    'ÔøΩÔøΩÔøΩÔøΩ': '‚úÖ'
};

function fixEncodingInFile(filePath) {
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ: ${filePath}`);
    
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let originalContent = content;
        let changesCount = 0;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for (const [broken, fixed] of Object.entries(encodingFixes)) {
            const regex = new RegExp(broken.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
            const matches = content.match(regex);
            if (matches) {
                content = content.replace(regex, fixed);
                changesCount += matches.length;
                console.log(`  –ó–∞–º–µ–Ω–µ–Ω–æ "${broken}" ‚Üí "${fixed}" (${matches.length} —Ä–∞–∑)`);
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–º–µ—â–µ–Ω–∏—è
        const singleReplacementRegex = /ÔøΩÔøΩ/g;
        const singleMatches = content.match(singleReplacementRegex);
        if (singleMatches) {
            content = content.replace(singleReplacementRegex, '');
            changesCount += singleMatches.length;
            console.log(`  –£–¥–∞–ª–µ–Ω–æ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–º–µ—â–µ–Ω–∏—è: ${singleMatches.length}`);
        }
        
        if (changesCount > 0) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${changesCount} –ø—Ä–æ–±–ª–µ–º –≤ ${filePath}`);
            return changesCount;
        } else {
            console.log(`‚úÖ –ü—ÄÔøΩÔøΩ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ${filePath}`);
            return 0;
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
        return 0;
    }
}

function fixEncodingInDirectory(dirPath, extensions = ['.js']) {
    console.log(`–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dirPath}\n`);
    
    let totalFixes = 0;
    const files = fs.readdirSync(dirPath);
    
    for (const file of files) {
        const filePath = path.join(dirPath, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isFile() && extensions.some(ext => file.endsWith(ext))) {
            totalFixes += fixEncodingInFile(filePath);
            console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        }
    }
    
    console.log(`\nüéâ –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${totalFixes}`);
    return totalFixes;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π...\n');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const currentDir = process.cwd();
    const fixes = fixEncodingInDirectory(currentDir, ['.js', '.md']);
    
    if (fixes > 0) {
        console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö.');
    } else {
        console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ!');
    }
}

module.exports = { fixEncodingInFile, fixEncodingInDirectory, encodingFixes };
