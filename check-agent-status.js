#!/usr/bin/env node
/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏
 */

const starsAgent = require('./agent-integration');

async function checkAgentStatus() {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ê–ì–ï–ù–¢–ê –ü–û–°–õ–ï –ó–ê–ì–†–£–ó–ö–ò –°–ï–°–°–ò–ò\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞
    console.log('üíä 1. –ó–î–û–†–û–í–¨–ï –ê–ì–ï–ù–¢–ê:');
    const health = await starsAgent.checkAgentHealth();
    console.log(`   –°—Ç–∞—Ç—É—Å: ${health.health_status}`);
    console.log(`   –ó–∞–ø—É—â–µ–Ω: ${health.agent_running ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    
    if (health.error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${health.error}`);
    }

    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞
    console.log('\nüìä 2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    const stats = await starsAgent.getAgentStats();
    
    if (stats.success) {
        console.log(`   üìã –í –æ—á–µ—Ä–µ–¥–∏: ${stats.stats.queue_pending} –∑–∞—è–≤–æ–∫`);
        console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.stats.queue_completed} –∑–∞—è–≤–æ–∫`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${stats.stats.queue_failed} –∑–∞—è–≤–æ–∫`);
        console.log(`   ‚≠ê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.stats.stars_sent_today}/80 –∑–≤—ë–∑–¥`);
    } else {
        console.log(`   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${stats.error}`);
    }

    // 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    console.log('\nüìù 3. –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò –ê–ì–ï–ù–¢–ê:');
    const logs = await starsAgent.getAgentLogs(10);
    
    if (logs.success) {
        const logLines = logs.logs.split('\n').filter(line => line.trim());
        logLines.slice(-5).forEach(line => {
            if (line.includes('‚úÖ') || line.includes('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')) {
                console.log(`   ‚úÖ ${line.trim()}`);
            } else if (line.includes('‚ùå') || line.includes('ERROR')) {
                console.log(`   ‚ùå ${line.trim()}`);
            } else {
                console.log(`   üìÑ ${line.trim()}`);
            }
        });
    } else {
        console.log(`   ‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${logs.logs}`);
    }

    // 4. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('\nüß™ 4. –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´:');
    try {
        console.log('   üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å...');
        
        const testResult = await starsAgent.sendStarsSafely(123456789, 1, 'test');
        
        if (testResult.success) {
            console.log('   ‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
            console.log(`   üí¨ ${testResult.message}`);
        } else {
            console.log('   ‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª:', testResult.error);
        }
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    }

    // 5. –í—ã–≤–æ–¥
    console.log('\nüéØ 5. –°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò:');
    
    if (health.agent_running && stats.success) {
        console.log('   üéâ –ê–ì–ï–ù–¢ –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('   ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥ –ê–ö–¢–ò–í–ï–ù');
        console.log('   üìã –ó–∞—è–≤–∫–∏ –¥–æ 200 –∑–≤—ë–∑–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        console.log('   ‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9:00-23:00 –ú–°–ö');
    } else if (!health.agent_running) {
        console.log('   ‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Railway –ª–æ–≥–∏');
        console.log('   üîß –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫–∞');
    } else {
        console.log('   ‚ö†Ô∏è –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π');
    }

    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

if (require.main === module) {
    checkAgentStatus().catch(console.error);
}

module.exports = { checkAgentStatus };
