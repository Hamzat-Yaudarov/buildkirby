#!/usr/bin/env node
/**
 * –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
 */

const starsAgent = require('./agent-integration');

async function runFullDiagnostic() {
    console.log('üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    console.log('üìä 1. –°–û–°–¢–û–Ø–ù–ò–ï –ê–ì–ï–ù–¢–ê:');
    const health = await starsAgent.checkAgentHealth();
    console.log('   –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω:', health.agent_running ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
    console.log('   –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è:', health.health_status);
    
    if (health.error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞:', health.error);
    }

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìà 2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ì–ï–ù–¢–ê:');
    const statsResult = await starsAgent.getAgentStats();
    
    if (statsResult.success) {
        const stats = statsResult.stats;
        console.log(`   üìã –í –æ—á–µ—Ä–µ–¥–∏: ${stats.queue_pending} –∑–∞—è–≤–æ–∫`);
        console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.queue_completed} –∑–∞—è–≤–æ–∫`);
        console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${stats.queue_failed} –∑–∞—è–≤–æ–∫`);
        console.log(`   ‚≠ê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.stars_sent_today}/80 –∑–≤—ë–∑–¥`);
        console.log(`   üîß –û—à–∏–±–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${stats.errors_today}`);
    } else {
        console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', statsResult.error);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    console.log('\nüìù 3. –ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò:');
    const logsResult = await starsAgent.getAgentLogs(5);
    
    if (logsResult.success) {
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:');
        logsResult.logs.split('\n').forEach(line => {
            if (line.trim()) {
                console.log(`   üìÑ ${line.trim()}`);
            }
        });
    } else {
        console.log('   ‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', logsResult.logs);
    }

    // 4. –¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    console.log('\nüß™ 4. –¢–ï–°–¢ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–Ø:');
    try {
        const testUserId = 123456789; // –¢–µ—Å—Ç–æ–≤—ã–π ID
        const testAmount = 1; // –¢–µ—Å—Ç–æ–≤–∞—è —Å—É–º–º–∞
        
        console.log(`   üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${testAmount} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}`);
        
        const addResult = await starsAgent.addStarsJob(testUserId, testAmount, 'test');
        
        if (addResult) {
            console.log('   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const newStats = await starsAgent.getAgentStats();
            if (newStats.success) {
                console.log(`   üìä –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ${newStats.stats.queue_pending}`);
            }
        } else {
            console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
        }
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞
    console.log('\nüíæ 5. –ë–ê–ó–ê –î–ê–ù–ù–´–• –ê–ì–ï–ù–¢–ê:');
    try {
        const { execSync } = require('child_process');
        const dbCheck = execSync(`python3 -c "
import sqlite3
import os

db_path = 'userbot_queue.db'
if os.path.exists(db_path):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute(\\\"SELECT name FROM sqlite_master WHERE type='table'\\\")
    tables = cursor.fetchall()
    print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    print('üìã –¢–∞–±–ª–∏—Ü—ã:', [table[0] for table in tables])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    cursor.execute('SELECT status, COUNT(*) FROM withdrawal_queue GROUP BY status')
    status_counts = cursor.fetchall()
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π:', dict(status_counts))
    
    conn.close()
else:
    print('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
"`, { encoding: 'utf8' });

        console.log('   ' + dbCheck.trim().replace(/\n/g, '\n   '));
    } catch (error) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }

    // 6. –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüéØ 6. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (!health.agent_running) {
        console.log('   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
        console.log('   üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç');
        console.log('   üîß –ö–æ–º–∞–Ω–¥–∞: –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ Railway –ª–æ–≥–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π');
    }
    
    if (statsResult.success && statsResult.stats.queue_pending > 0) {
        console.log(`   üìã –í–ù–ò–ú–ê–ù–ò–ï: ${statsResult.stats.queue_pending} –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏`);
        console.log('   üí° –ó–∞—è–≤–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9-23 –ú–°–ö)');
    }
    
    if (statsResult.success && statsResult.stats.stars_sent_today > 60) {
        console.log('   ‚ö†Ô∏è –õ–ò–ú–ò–¢: –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥');
        console.log('   üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ –∑–∞–≤—Ç—Ä–∞');
    }

    console.log('\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function createTestWithdrawal() {
    console.log('\nüß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î');
    
    try {
        const testAmount = 5; // –ú–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        console.log(`üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ ${testAmount} –∑–≤—ë–∑–¥...`);
        
        const result = await starsAgent.sendStarsSafely(123456789, testAmount, 'stars');
        
        if (result.success) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å');
            console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', result.message);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏:', result.error);
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
    (async () => {
        await runFullDiagnostic();
        
        console.log('\nüîÑ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É? (y/n)');
        // await createTestWithdrawal(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    })();
}

module.exports = { runFullDiagnostic, createTestWithdrawal };
