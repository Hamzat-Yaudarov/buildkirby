const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const analyticsCode = `
// ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û–¢–ï–†–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====================

class UserLossAnalytics {
    constructor() {
        this.stats = {
            total_starts: 0,
            captcha_shown: 0,
            captcha_passed: 0,
            subscription_checked: 0,
            subscribed: 0,
            menu_shown: 0,
            errors: 0
        };
        
        this.dailyLogs = new Map(); // userId -> [steps]
    }

    logStep(userId, step, success = true, details = null) {
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp,
            userId,
            step,
            success,
            details
        };

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        const status = success ? '‚úÖ' : '‚ùå';
        console.log(\`üìä USER_TRACKING: \${status} \${step} - User \${userId} \${details ? '(' + details + ')' : ''}\`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–Ω–µ–≤–Ω—ã–µ –ª–æ–≥–∏
        if (!this.dailyLogs.has(userId)) {
            this.dailyLogs.set(userId, []);
        }
        this.dailyLogs.get(userId).push(logEntry);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStats(step, success);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
        if (this.stats.total_starts % 100 === 0) {
            this.saveStatsToFile();
        }
    }

    updateStats(step, success) {
        switch (step) {
            case 'start':
                this.stats.total_starts++;
                break;
            case 'captcha_shown':
                this.stats.captcha_shown++;
                break;
            case 'captcha_passed':
                if (success) this.stats.captcha_passed++;
                break;
            case 'subscription_check':
                this.stats.subscription_checked++;
                break;
            case 'subscribed':
                if (success) this.stats.subscribed++;
                break;
            case 'menu_shown':
                if (success) this.stats.menu_shown++;
                break;
            case 'error':
                this.stats.errors++;
                break;
        }
    }

    getConversionStats() {
        const total = this.stats.total_starts;
        if (total === 0) return {};

        return {
            captcha_conversion: ((this.stats.captcha_passed / this.stats.captcha_shown) * 100).toFixed(1),
            subscription_conversion: ((this.stats.subscribed / this.stats.subscription_checked) * 100).toFixed(1),
            overall_conversion: ((this.stats.menu_shown / total) * 100).toFixed(1),
            total_users: total,
            lost_at_captcha: this.stats.captcha_shown - this.stats.captcha_passed,
            lost_at_subscription: this.stats.subscription_checked - this.stats.subscribed,
            successful_registrations: this.stats.menu_shown
        };
    }

    saveStatsToFile() {
        try {
            const data = {
                timestamp: new Date().toISOString(),
                stats: this.stats,
                conversion: this.getConversionStats()
            };

            const fileName = \`user_analytics_\${new Date().toISOString().split('T')[0]}.json\`;
            fs.writeFileSync(fileName, JSON.stringify(data, null, 2));
            
            console.log(\`üíæ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ \${fileName}\`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    printDailyReport() {
        console.log('\\nüìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ü–û–¢–ï–†–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        const stats = this.getConversionStats();
        
        console.log(\`üë• –í—Å–µ–≥–æ /start –∫–æ–º–∞–Ω–¥: \${stats.total_users}\`);
        console.log(\`ü§ñ –ü–æ–∫–∞–∑–∞–Ω–æ –∫–∞–ø—á: \${this.stats.captcha_shown}\`);
        console.log(\`‚úÖ –ü—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: \${this.stats.captcha_passed} (\${stats.captcha_conversion}%)\`);
        console.log(\`üì¢ –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: \${this.stats.subscription_checked}\`);
        console.log(\`‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: \${this.stats.subscribed} (\${stats.subscription_conversion}%)\`);
        console.log(\`üè† –ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é: \${this.stats.menu_shown}\`);
        console.log(\`‚ùå –û—à–∏–±–æ–∫: \${this.stats.errors}\`);
        console.log('');
        console.log(\`üìà –û–ë–©–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø: \${stats.overall_conversion}%\`);
        console.log(\`üíî –ü–æ—Ç–µ—Ä—è–Ω–æ –Ω–∞ –∫–∞–ø—á–µ: \${stats.lost_at_captcha} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\`);
        console.log(\`üíî –ü–æ—Ç–µ—Ä—è–Ω–æ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–µ: \${stats.lost_at_subscription} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\\n');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const userAnalytics = new UserLossAnalytics();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤—ã–∑—ã–≤–∞—Ç—å –≤ cron)
function generateDailyUserReport() {
    userAnalytics.printDailyReport();
    userAnalytics.saveStatsToFile();
    
    // –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
    userAnalytics.dailyLogs.clear();
    
    console.log('üìã –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
}
`;

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
fs.writeFileSync('./user-analytics.js', analyticsCode);

console.log('üìä –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–û–¢–ï–†–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n');

console.log(' –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: user-analytics.js');
console.log('');
console.log('üîß –ö–ê–ö –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–¢–¨:');
console.log('');
console.log('1. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ index.js:');
console.log('   const userAnalytics = require("./user-analytics");');
console.log('');
console.log('2. –î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö:');
console.log('');
console.log('   // –í –Ω–∞—á–∞–ª–µ /start –∫–æ–º–∞–Ω–¥—ã');
console.log('   userAnalytics.logStep(userId, "start", true);');
console.log('');
console.log('   // –ü—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–ø—á–∏');
console.log('   userAnalytics.logStep(userId, "captcha_shown", true);');
console.log('');
console.log('   // –ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–∞–ø—á–∏');
console.log('   userAnalytics.logStep(userId, "captcha_passed", true);');
console.log('');
console.log('   // –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏');
console.log('   userAnalytics.logStep(userId, "subscription_check", true);');
console.log('');
console.log('   // –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ');
console.log('   userAnalytics.logStep(userId, "subscribed", isSubscribed);');
console.log('');
console.log('   // –ü—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é');
console.log('   userAnalytics.logStep(userId, "menu_shown", true);');
console.log('');
console.log('   // –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö');
console.log('   userAnalytics.logStep(userId, "error", false, error.message);');
console.log('');
console.log('3. –î–æ–±–∞–≤—å—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ cron (–≤ index.js):');
console.log('');
console.log('   // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 23:59');
console.log('   cron.schedule("59 23 * * *", () => {');
console.log('       generateDailyUserReport();');
console.log('   });');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
const integrationExample = `
// –ü–†–ò–ú–ï–† –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–ù–ê–õ–ò–¢–ò–ö–ò –í /start –ö–û–ú–ê–ù–î–£

bot.onText(/\\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const referralCode = match[1] ? match[1].trim() : null;
    
    // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start
    userAnalytics.logStep(userId, 'start', true);
    
    try {
        let user = await Database.getUser(userId);
        
        if (!user) {
            const referrerId = referralCode ? parseInt(referralCode) : null;
            user = await Database.createUser({
                userId: userId,
                username: msg.from.username,
                firstName: msg.from.first_name,
                languageCode: msg.from.language_code || 'ru',
                isPremium: msg.from.is_premium || false,
                referrerId: referrerId
            });
            
            console.log(\`‚úÖ –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–•–†–ê–ù–ï–ù: \${userId}\`);
        }

        let captchaPassed = passedCaptcha.get(userId) || user?.captcha_passed || false;

        if (!captchaPassed) {
            // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É
            userAnalytics.logStep(userId, 'captcha_shown', true);
            
            await showCaptcha(chatId, userId);
            userStates.set(userId, 'waiting_after_captcha');
            return;
        }

        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ö–∞–ø—á–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞
        userAnalytics.logStep(userId, 'captcha_passed', true, 'already_passed');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        userAnalytics.logStep(userId, 'subscription_check', true);
        
        const subscriptionStatus = await checkUserSubscription(userId, chatId, ...);
        
        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        userAnalytics.logStep(userId, 'subscribed', subscriptionStatus.isSubscribed);

        if (!subscriptionStatus.isSubscribed) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            if (subscriptionStatus.subscriptionData?.links?.length > 0) {
                await sendSponsorMessage(chatId, userId, subscriptionStatus.subscriptionData);
            }
            return;
        }

        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!)
        userAnalytics.logStep(userId, 'menu_shown', true);
        
        await showMainMenu(chatId, userId);
        
    } catch (error) {
        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        userAnalytics.logStep(userId, 'error', false, error.message);
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /start:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∞–ø—á–∏:
async function handleCaptcha(chatId, userId, data, messageId, callbackQueryId) {
    const choice = parseInt(data.split('_')[1]);

    if (choice === 6) { // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        userAnalytics.logStep(userId, 'captcha_passed', true);
        
        passedCaptcha.set(userId, true);
        await Database.setCaptchaPassed(userId, true);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...
        
    } else {
        // üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–ø—á–∏
        userAnalytics.logStep(userId, 'captcha_passed', false, 'wrong_answer');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É –∑–∞–Ω–æ–≤–æ...
    }
}
`;

fs.writeFileSync('./integration-example.js', integrationExample);

console.log('üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: integration-example.js (–ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)');
console.log('');
console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
console.log('‚Ä¢ –ë—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ä—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
console.log('‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∫–æ–Ω–≤–µ—Ä—Å–∏–∏');
console.log('‚Ä¢ –°–º–æ–∂–µ—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
console.log('‚Ä¢ –ù–∏–∫–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ!');
