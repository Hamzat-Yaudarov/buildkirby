/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–æ—ç—Ç–∞–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–≥–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: –°–ø–æ–Ω—Å–æ—Ä—ã ‚Üí –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ ‚Üí –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
 */

const db = require('./database');
const { subgramAPI } = require('./subgram-api');

const STAGES = {
    SPONSORS: 'sponsors',
    REQUIRED: 'required', 
    COMPLETED: 'completed'
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü–†–û–°–¢–ê–Ø –ª–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä—ã, –ø–æ—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ, –ø–æ—Ç–æ–º –≥–æ—Ç–æ–≤–æ
 */
async function getUserStage(bot, userId) {
    try {
        console.log(`[FIXED_FLOW] Checking stage for user ${userId}`);
        
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        const sponsorChannels = await getSponsorChannelsSimple(userId);
        console.log(`[FIXED_FLOW] Found ${sponsorChannels.length} sponsor channels`);
        
        // 2. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏
        if (sponsorChannels.length > 0) {
            const sponsorStatus = await checkChannelsWithBot(bot, userId, sponsorChannels);
            console.log(`[FIXED_FLOW] Sponsor status: ${sponsorStatus.subscribed}/${sponsorStatus.total}`);
            
            if (!sponsorStatus.allSubscribed) {
                // –ù–µ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
                return {
                    stage: STAGES.SPONSORS,
                    channels: sponsorChannels,
                    allCompleted: false,
                    message: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:',
                    buttonText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤',
                    buttonCallback: 'check_sponsors'
                };
            }
        }
        
        // 3. –°–ø–æ–Ω—Å–æ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (–∏–ª–∏ –Ω–µ—Ç) - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        const requiredChannels = await getRequiredChannelsSimple();
        console.log(`[FIXED_FLOW] Found ${requiredChannels.length} required channels`);
        
        if (requiredChannels.length > 0) {
            const requiredStatus = await checkChannelsWithBot(bot, userId, requiredChannels);
            console.log(`[FIXED_FLOW] Required status: ${requiredStatus.subscribed}/${requiredStatus.total}`);
            
            if (!requiredStatus.allSubscribed) {
                // –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
                return {
                    stage: STAGES.REQUIRED,
                    channels: requiredChannels,
                    allCompleted: false,
                    message: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:',
                    buttonText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ',
                    buttonCallback: 'check_required'
                };
            }
        }
        
        // 4. –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        return {
            stage: STAGES.COMPLETED,
            channels: [],
            allCompleted: true,
            message: '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!',
            buttonText: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            buttonCallback: 'main_menu'
        };
        
    } catch (error) {
        console.error('[FIXED_FLOW] Error getting user stage:', error);
        return {
            stage: STAGES.SPONSORS,
            channels: [],
            allCompleted: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫',
            buttonText: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
            buttonCallback: 'check_sponsors'
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
 */
async function getSponsorChannelsSimple(userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram
        const subgramSettings = await db.getSubGramSettings();
        if (!subgramSettings || !subgramSettings.enabled) {
            console.log('[FIXED_FLOW] SubGram disabled');
            return [];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        const savedChannels = await db.executeQuery(`
            SELECT DISTINCT channel_link, channel_name 
            FROM subgram_channels
            WHERE user_id = $1
            AND created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
        `, [userId]);

        if (savedChannels.rows && savedChannels.rows.length > 0) {
            console.log(`[FIXED_FLOW] Using ${savedChannels.rows.length} saved sponsor channels`);
            return savedChannels.rows.map(ch => ({
                id: ch.channel_link,
                name: ch.channel_name || '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª',
                link: ch.channel_link,
                type: 'sponsor',
                subscribed: false
            }));
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —É SubGram
        console.log('[FIXED_FLOW] Requesting fresh sponsor channels...');
        const subgramResponse = await subgramAPI.requestSponsors({
            userId: userId.toString(),
            chatId: userId.toString(),
            maxOP: subgramSettings.max_sponsors || 3,
            action: 'subscribe',
            excludeChannelIds: [],
            withToken: true
        });

        if (subgramResponse.success && subgramResponse.data) {
            const processedData = subgramAPI.processAPIResponse(subgramResponse.data);
            if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
                const channels = processedData.channelsToSubscribe.map(ch => ({
                    id: ch.link,
                    name: ch.name || '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª',
                    link: ch.link,
                    type: 'sponsor',
                    subscribed: false
                }));
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
                await db.executeQuery('DELETE FROM subgram_channels WHERE user_id = $1', [userId]);
                await db.saveSubGramChannels(userId, processedData.channelsToSubscribe);
                
                return channels;
            }
        }

        return [];
        
    } catch (error) {
        console.error('[FIXED_FLOW] Error getting sponsor channels:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
 */
async function getRequiredChannelsSimple() {
    try {
        const result = await db.executeQuery(
            'SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE'
        );

        return result.rows.map(ch => ({
            id: ch.channel_id,
            name: ch.channel_name || ch.channel_id,
            link: ch.channel_id.startsWith('@') ? 
                `https://t.me/${ch.channel_id.substring(1)}` : ch.channel_id,
            type: 'required',
            subscribed: false
        }));
        
    } catch (error) {
        console.error('[FIXED_FLOW] Error getting required channels:', error);
        return [];
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞
 */
async function checkChannelsWithBot(bot, userId, channels) {
    let subscribedCount = 0;
    
    for (const channel of channels) {
        try {
            let channelToCheck = channel.id;
            
            // –î–ª—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
            if (channel.type === 'sponsor' && channel.id.includes('t.me/')) {
                const match = channel.id.match(/t\.me\/([^\/\?]+)/);
                if (match) {
                    channelToCheck = '@' + match[1];
                }
            }
            
            console.log(`[FIXED_FLOW] Checking ${channelToCheck} for user ${userId}`);
            
            const member = await bot.getChatMember(channelToCheck, userId);
            const isSubscribed = !(member.status === 'left' || member.status === 'kicked');
            
            channel.subscribed = isSubscribed;
            if (isSubscribed) {
                subscribedCount++;
            }
            
            console.log(`[FIXED_FLOW] ${channelToCheck}: ${isSubscribed ? 'subscribed' : 'not subscribed'}`);
            
        } catch (error) {
            console.log(`[FIXED_FLOW] Cannot check ${channel.id}: ${error.message}`);
            channel.subscribed = false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
        }
    }
    
    return {
        allSubscribed: subscribedCount === channels.length,
        subscribed: subscribedCount,
        total: channels.length
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞
 */
function formatStageMessage(stageInfo) {
    if (stageInfo.allCompleted) {
        return {
            message: '‚úÖ **–û—Ç–ª–∏—á–Ω–æ!**\n\n–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã!\n\nüéâ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
            buttons: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        };
    }
    
    let message = '';
    const buttons = [];
    
    if (stageInfo.stage === STAGES.SPONSORS) {
        message = 'üéØ **–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã**\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n';
    } else if (stageInfo.stage === STAGES.REQUIRED) {
        message = 'üìã **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã**\n\n–¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
    stageInfo.channels.forEach((channel, index) => {
        message += `${index + 1}. ${channel.name}\n`;
        
        const emoji = stageInfo.stage === STAGES.SPONSORS ? 'üíé' : 'üì∫';
        buttons.push([{
            text: `${emoji} ${channel.name}`,
            url: channel.link
        }]);
    });
    
    message += '\nüìå –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏';
    buttons.push([{ 
        text: `‚úÖ ${stageInfo.buttonText}`, 
        callback_data: stageInfo.buttonCallback 
    }]);
    
    return { message, buttons };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
 */
async function canUserUseBot(bot, userId) {
    try {
        const stageInfo = await getUserStage(bot, userId);
        return stageInfo.allCompleted;
    } catch (error) {
        console.error('[FIXED_FLOW] Error checking bot access:', error);
        return false;
    }
}

module.exports = {
    STAGES,
    getUserStage,
    formatStageMessage,
    canUserUseBot,
    getSponsorChannelsSimple,
    getRequiredChannelsSimple,
    checkChannelsWithBot
};
