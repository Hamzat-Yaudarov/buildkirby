#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º –∑–≤—ë–∑–¥
 */

const db = require('./database');

async function checkWithdrawalSystem() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ pending –∑–∞—è–≤–æ–∫
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ pending –∑–∞—è–≤–æ–∫...');
        const pendingWithdrawals = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_pending,
                SUM(amount) as total_amount,
                MIN(created_at) as oldest_request
            FROM withdrawal_requests 
            WHERE status = 'pending'
        `);

        const pending = pendingWithdrawals.rows[0];
        console.log(`   üìã –ó–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${pending.total_pending}`);
        console.log(`   üí∞ ÔøΩÔøΩ–±—â–∞—è —Å—É–º–º–∞: ${pending.total_amount || 0} ‚≠ê`);
        if (pending.oldest_request) {
            console.log(`   ‚è∞ –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞—è–≤–∫–∞: ${new Date(pending.oldest_request).toLocaleString('ru-RU')}`);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏...');
        const problemUsers = await db.executeQuery(`
            SELECT 
                user_id, 
                COUNT(*) as failed_attempts,
                u.first_name,
                u.balance
            FROM withdrawal_requests wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.status = 'pending' 
            GROUP BY user_id, u.first_name, u.balance
            HAVING COUNT(*) > 2
            ORDER BY failed_attempts DESC
            LIMIT 10
        `);

        if (problemUsers.rows.length > 0) {
            console.log('   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏:');
            problemUsers.rows.forEach(user => {
                console.log(`   üë§ ${user.first_name} (ID: ${user.user_id}) - ${user.failed_attempts} –∑–∞—è–≤–æ–∫, –±–∞–ª–∞–Ω—Å: ${user.balance}‚≠ê`);
            });
        } else {
            console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞—è–≤–æ–∫
        console.log('\n3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞—è–≤–æ–∫...');
        const typeStats = await db.executeQuery(`
            SELECT 
                type,
                status,
                COUNT(*) as count,
                SUM(amount) as total_amount
            FROM withdrawal_requests 
            GROUP BY type, status
            ORDER BY type, status
        `);

        const stats = {};
        typeStats.rows.forEach(row => {
            if (!stats[row.type]) stats[row.type] = {};
            stats[row.type][row.status] = {
                count: row.count,
                amount: parseFloat(row.total_amount || 0)
            };
        });

        Object.keys(stats).forEach(type => {
            console.log(`   üìä ${type.toUpperCase()}:`);
            Object.keys(stats[type]).forEach(status => {
                const data = stats[type][status];
                console.log(`      ${status}: ${data.count} –∑–∞—è–≤–æ–∫ (${data.amount}‚≠ê)`);
            });
        });

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pending –∑–∞—è–≤–∫–∞–º–∏
        console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µÔøΩÔøΩ–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å pending –∑–∞—è–≤–∫–∞–º–∏...');
        const balanceCheck = await db.executeQuery(`
            SELECT 
                wr.user_id,
                wr.amount as requested,
                u.balance as current_balance,
                u.first_name,
                wr.created_at
            FROM withdrawal_requests wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.status = 'pending'
            AND u.balance < wr.amount
            ORDER BY wr.created_at ASC
        `);

        if (balanceCheck.rows.length > 0) {
            console.log('   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º:');
            balanceCheck.rows.forEach(user => {
                console.log(`   üë§ ${user.first_name} - –∑–∞–ø—Ä–æ—Å–∏–ª ${user.requested}‚≠ê, –µ—Å—Ç—å ${user.current_balance}‚≠ê`);
            });
        } else {
            console.log('   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å');
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
        console.log('\n5Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º...');
        
        if (parseInt(pending.total_pending) > 0) {
            console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
            console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ userbot: `python3 userbot-agent-fixed.py`');
            console.log('   2. –ò–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é: `/process_old_withdrawals`');
            console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: `tail -f userbot-agent.log`');
            
            if (parseInt(pending.total_pending) > 50) {
                console.log('\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ pending –∑–∞—è–≤–æ–∫!');
                console.log('   - –í–æ–∑–º–æ–∂–Ω–æ userbot –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π');
                console.log('   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
            }
        } else {
            console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –Ω–µ—Ç pending –∑–∞—è–≤–æ–∫');
        }

        // 6. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏...');
        try {
            const testUserId = 999999999; // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await db.executeQuery('BEGIN');
            await db.executeQuery(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES ($1, $2, $3)',
                [testUserId, 1, 'stars']
            );
            await db.executeQuery('DELETE FROM withdrawal_requests WHERE user_id = $1', [testUserId]);
            await db.executeQuery('COMMIT');
            console.log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            await db.executeQuery('ROLLBACK');
            console.log('   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î:', error.message);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    checkWithdrawalSystem().then(() => {
        console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        process.exit(0);
    }).catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { checkWithdrawalSystem };
