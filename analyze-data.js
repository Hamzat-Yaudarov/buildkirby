const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

function analyzeData() {
    const dataDir = './xlsx-data';
    const files = fs.readdirSync(dataDir).filter(f => f.endsWith('.xlsx'));
    
    console.log('üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò:\n');
    
    let totalStats = {
        users: 0,
        tasks: 0,
        userTasks: 0,
        withdrawals: 0,
        promocodes: 0,
        subgramTasks: 0
    };
    
    files.forEach(file => {
        try {
            const filePath = path.join(dataDir, file);
            const workbook = XLSX.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(worksheet);
            
            console.log(`üìã ${file}:`);
            console.log(`   üìä –ó–∞–ø–∏—Å–µ–π: ${data.length}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const tableName = file.replace('.xlsx', '');
            if (tableName === 'users') totalStats.users = data.length;
            if (tableName === 'tasks') totalStats.tasks = data.length;
            if (tableName === 'user_tasks') totalStats.userTasks = data.length;
            if (tableName === 'withdrawal_requests') totalStats.withdrawals = data.length;
            if (tableName === 'promocodes') totalStats.promocodes = data.length;
            if (tableName === 'subgram_tasks') totalStats.subgramTasks = data.length;
            
            if (data.length > 0) {
                const firstRow = data[0];
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (tableName === 'users') {
                    const usersWithBalance = data.filter(u => parseFloat(u.balance) > 0).length;
                    const usersWithReferrals = data.filter(u => parseInt(u.total_referrals) > 0).length;
                    const premiumUsers = data.filter(u => u.is_premium === true || u.is_premium === 'true').length;
                    
                    console.log(`   üí∞ –° –±–∞–ª–∞–Ω—Å–æ–º > 0: ${usersWithBalance}`);
                    console.log(`   üë• –° —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${usersWithReferrals}`);
                    console.log(`   ‚≠ê –ü—Ä–µ–º–∏—É–º: ${premiumUsers}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
                    const datesFound = data.filter(u => u.created_at);
                    if (datesFound.length > 0) {
                        const dates = datesFound.map(u => new Date(u.created_at)).filter(d => !isNaN(d));
                        if (dates.length > 0) {
                            const minDate = new Date(Math.min(...dates));
                            const maxDate = new Date(Math.max(...dates));
                            console.log(`   üìÖ –ü–µ—Ä–∏–æ–¥: ${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`);
                        }
                    }
                }
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
                if (tableName === 'withdrawal_requests') {
                    const pending = data.filter(w => w.status === 'pending').length;
                    const approved = data.filter(w => w.status === 'approved').length;
                    const rejected = data.filter(w => w.status === 'rejected').length;
                    
                    console.log(`   ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pending}`);
                    console.log(`   ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: ${approved}`);
                    console.log(`   ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejected}`);
                }
            }
            console.log('');
            
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${file}: ${error.message}\n`);
        }
    });
    
    console.log('üéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalStats.users}`);
    console.log(`   üìã –ó–∞–¥–∞–Ω–∏–π: ${totalStats.tasks}`);
    console.log(`   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${totalStats.userTasks}`);
    console.log(`   üí∏ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: ${totalStats.withdrawals}`);
    console.log(`   üé´ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${totalStats.promocodes}`);
    console.log(`   üì∫ SubGram –∑–∞–¥–∞–Ω–∏–π: ${totalStats.subgramTasks}`);
    
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (totalStats.users < 3000) {
        console.log('   ‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ');
        console.log('   üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –¥–∞–Ω–Ω—ã–µ –æ—Ç 26.08, –Ω–µ –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å');
    } else {
        console.log('   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–ª—è –±–µ–∫–∞–ø–∞ –æ—Ç 26.08');
    }
}

analyzeData();
