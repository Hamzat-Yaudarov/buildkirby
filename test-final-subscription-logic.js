const db = require('./database');

async function testFinalSubscriptionLogic() {
    console.log('üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ü–û–î–ü–ò–°–û–ö');
    console.log('=' .repeat(50));

    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.initializeDatabase();

        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testUserId1 = 999999991;
        const testUserId2 = 999999992;
        const testUserName1 = 'TestUser1';
        const testUserName2 = 'TestUser2';

        console.log('\n1Ô∏è‚É£ –ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
        console.log('-'.repeat(30));

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        await db.executeQuery(`
            INSERT INTO users (id, username, first_name, captcha_passed, subscription_notified, is_subscribed)
            VALUES 
                ($1, $2, $3, TRUE, TRUE, TRUE),
                ($4, $5, $6, TRUE, FALSE, FALSE)
            ON CONFLICT (id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                captcha_passed = TRUE,
                subscription_notified = EXCLUDED.subscription_notified,
                is_subscribed = EXCLUDED.is_subscribed
        `, [testUserId1, testUserName1, testUserName1, testUserId2, testUserName2, testUserName2]);

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        console.log(`   - User1 (${testUserId1}): —É–≤–µ–¥–æ–º–ª–µ–Ω=TRUE, –ø–æ–¥–ø–∏—Å–∞–Ω=TRUE`);
        console.log(`   - User2 (${testUserId2}): —É–≤–µ–¥–æ–º–ª–µ–Ω=FALSE, –ø–æ–¥–ø–∏—Å–∞–Ω=FALSE`);

        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        await db.executeQuery('DELETE FROM required_channels WHERE channel_id LIKE $1', ['@test_%']);

        console.log('\n2Ô∏è‚É£ –¢–ï–°–¢: –°–ë–†–û–° –í–°–ï–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô (–≠–ú–£–õ–Ø–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø)');
        console.log('-'.repeat(30));

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const resetCount = await db.resetAllSubscriptionNotifications();
        console.log(`üîÑ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${resetCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        const statusAfterReset = await db.executeQuery(`
            SELECT id, subscription_notified, is_subscribed 
            FROM users 
            WHERE id IN ($1, $2)
        `, [testUserId1, testUserId2]);

        console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:');
        statusAfterReset.rows.forEach(user => {
            console.log(`   - User ${user.id}: —É–≤–µ–¥–æ–º–ª–µ–Ω=${user.subscription_notified}, –ø–æ–¥–ø–∏—Å–∞–Ω=${user.is_subscribed}`);
        });

        console.log('‚úÖ –û–ñ–ò–î–ê–ï–¢–°–Ø: –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç subscription_notified=FALSE');
        console.log('   (–ö–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)');

        console.log('\n3Ô∏è‚É£ –¢–ï–°–¢: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–êÔøΩÔøΩ–ò–õ–¨–ù–û–ì–û –ö–ê–ù–ê–õ–ê');
        console.log('-'.repeat(30));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        const validChannelId = '@test_valid_channel';
        await db.executeQuery(`
            INSERT INTO required_channels (channel_id, channel_name, is_active)
            VALUES ($1, $2, TRUE)
        `, [validChannelId, '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª']);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—ç–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /add_channel)
        const resetCount1 = await db.resetAllSubscriptionNotifications();
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: ${validChannelId}`);
        console.log(`üîÑ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${resetCount1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        console.log('\n4Ô∏è‚É£ –¢–ï–°–¢: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ö–ê–ù–ê–õ–ê');
        console.log('-'.repeat(30));

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ)
        const invalidChannelId = '@test_nonexistent_channel_12345';
        await db.executeQuery(`
            INSERT INTO required_channels (channel_id, channel_name, is_active)
            VALUES ($1, $2, TRUE)
        `, [invalidChannelId, '–¢–µ—Å—Ç–æ–≤—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª']);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—ç–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /add_channel)
        const resetCount2 = await db.resetAllSubscriptionNotifications();
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: ${invalidChannelId}`);
        console.log(`üîÑ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${resetCount2} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        console.log('‚úÖ –û–ñ–ò–î–ê–ï–¢–°–Ø: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –õ–Æ–ë–û–ì–û –∫–∞–Ω–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

        console.log('\n5Ô∏è‚É£ –¢–ï–°–¢: –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–¢–ê–¢–£–°–ê');
        console.log('-'.repeat(30));

        const finalStatus = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(*) FILTER (WHERE subscription_notified = TRUE) as notified_users,
                COUNT(*) FILTER (WHERE subscription_notified = FALSE) as not_notified_users
            FROM users
        `);

        const channels = await db.executeQuery(`
            SELECT channel_id, channel_name 
            FROM required_channels 
            WHERE is_active = TRUE 
            ORDER BY created_at
        `);

        console.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalStatus.rows[0].total_users}`);
        console.log(`   - –° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (TRUE): ${finalStatus.rows[0].notified_users}`);
        console.log(`   - –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (FALSE): ${finalStatus.rows[0].not_notified_users}`);

        console.log('\nüì∫ –ê–ö–¢–ò–í–ù–´–ï –ö–ê–ù–ê–õ–´:');
        channels.rows.forEach((channel, index) => {
            const type = channel.channel_id.includes('nonexistent') ? '(–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)' : '(–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)';
            console.log(`   ${index + 1}. ${channel.channel_name} - ${channel.channel_id} ${type}`);
        });

        console.log('\n6Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('-'.repeat(30));

        console.log('‚úÖ –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û:');
        console.log('   1. –ü—Ä–∏ —Å–±—Ä–æ—Å–µ –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ subscription_notified=FALSE');
        console.log('   2. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        console.log('   3. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¢–û–ñ–ï —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        console.log('   4. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ /start –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö');

        console.log('\nüìù –ß–¢–û –ü–†–û–ò–°–•–û–î–ò–¢ –î–ê–õ–¨–®–ï:');
        console.log('   1. –ü—Ä–∏ /start –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö');
        console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è');
        console.log('   3. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');
        console.log('   4. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º - —Å–±—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö');

        console.log('\nüéØ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ê:');
        console.log('   npm run reset-notifications  - —Å–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö');
        console.log('   /add_channel @channel|Name   - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª (–∞–≤—Ç–æ-—Å–±—Ä–æ—Å)');
        console.log('   /subscription_diagnostic     - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');

        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
        await db.executeQuery('DELETE FROM required_channels WHERE channel_id LIKE $1', ['@test_%']);
        await db.executeQuery('DELETE FROM users WHERE id IN ($1, $2)', [testUserId1, testUserId2]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testFinalSubscriptionLogic()
        .then(() => {
            console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
            console.log('\nüöÄ –õ–û–ì–ò–ö–ê –ü–û–î–ü–ò–°–û–ö –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–û–ô:', error);
            process.exit(1);
        });
}

module.exports = { testFinalSubscriptionLogic };
