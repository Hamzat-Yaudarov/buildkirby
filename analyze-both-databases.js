const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
const DB1_URL = 'postgresql://neondb_owner:npg_YC1S8JfBNKWg@ep-quiet-cloud-a2e7auqd-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'; // –¢–µ–∫—É—â–∞—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
const DB2_URL = 'postgresql://neondb_owner:npg_kA5CYbq6KRQD@ep-late-math-a23qdcph-pooler.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'; // –°—Ç–∞—Ä–∞—è –ë–î

const db1 = new Pool({
    connectionString: DB1_URL,
    ssl: { rejectUnauthorized: false }
});

const db2 = new Pool({
    connectionString: DB2_URL,
    ssl: { rejectUnauthorized: false }
});

async function quickAnalysis() {
    try {
        console.log('üìä –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –î–í–£–• –ë–ê–ó –î–ê–ù–ù–´–•\n');
        console.log('üîç DB1 (—Ç–µ–∫—É—â–∞—è): ep-quiet-cloud-a2e7auqd');
        console.log('üîç DB2 (—Å—Ç–∞—Ä–∞—è): ep-late-math-a23qdcph\n');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
            await db1.query('SELECT NOW()');
            console.log('‚úÖ DB1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.log('‚ùå DB1: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è -', error.message);
            return;
        }

        try {
            await db2.query('SELECT NOW()');
            console.log('‚úÖ DB2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');
        } catch (error) {
            console.log('‚ùå DB2: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è -', error.message);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const tables = ['users', 'tasks', 'user_tasks', 'withdrawal_requests', 'subgram_tasks', 'promocodes', 'sponsor_channels_stats'];

        console.log('üìã –°–†–ê–í–ù–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ü–ò–°–ï–ô:\n');
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄÔøΩÔøΩ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ –¢–∞–±–ª–∏—Ü–∞                ‚îÇ DB1       ‚îÇ DB2       ‚îÇ –†–∞–∑–Ω–∏—Ü–∞   ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

        let totalDb1 = 0;
        let totalDb2 = 0;

        for (const table of tables) {
            try {
                const [db1Result, db2Result] = await Promise.all([
                    db1.query(`SELECT COUNT(*) as count FROM ${table}`),
                    db2.query(`SELECT COUNT(*) as count FROM ${table}`)
                ]);

                const db1Count = parseInt(db1Result.rows[0].count);
                const db2Count = parseInt(db2Result.rows[0].count);
                const diff = Math.abs(db1Count - db2Count);

                totalDb1 += db1Count;
                totalDb2 += db2Count;

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                const tableName = table.padEnd(22);
                const db1Str = db1Count.toString().padStart(9);
                const db2Str = db2Count.toString().padStart(9);
                const diffStr = diff.toString().padStart(9);

                console.log(`‚îÇ ${tableName} ÔøΩÔøΩÔøΩ ${db1Str} ‚îÇ ${db2Str} ‚îÇ ${diffStr} ‚îÇ`);

            } catch (error) {
                const tableName = table.padEnd(22);
                console.log(`‚îÇ ${tableName} ‚îÇ   –û–®–ò–ë–ö–ê  ‚îÇ   –û–®–ò–ë–ö–ê  ‚îÇ   –û–®–ò–ë–ö–ê  ‚îÇ`);
            }
        }

        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        const totalDb1Str = totalDb1.toString().padStart(9);
        const totalDb2Str = totalDb2.toString().padStart(9);
        const totalDiffStr = Math.abs(totalDb1 - totalDb2).toString().padStart(9);
        console.log(`‚îÇ –ò–¢–û–ì–û                  ‚îÇ ${totalDb1Str} ‚îÇ ${totalDb2Str} ‚îÇ ${totalDiffStr} ‚îÇ`);
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

        // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n');

        try {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
            const [db1Balance, db2Balance] = await Promise.all([
                db1.query(`SELECT COUNT(*) as count, SUM(balance) as total_balance FROM users WHERE balance > 0`),
                db2.query(`SELECT COUNT(*) as count, SUM(balance) as total_balance FROM users WHERE balance > 0`)
            ]);

            console.log('üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º:');
            console.log(`   DB1: ${db1Balance.rows[0].count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${Math.round(db1Balance.rows[0].total_balance || 0)} –∑–≤—ë–∑–¥`);
            console.log(`   DB2: ${db2Balance.rows[0].count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, ${Math.round(db2Balance.rows[0].total_balance || 0)} –∑–≤—ë–∑–¥\n`);

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            const [db1Recent, db2Recent] = await Promise.all([
                db1.query(`SELECT user_id, first_name, created_at FROM users ORDER BY created_at DESC LIMIT 3`),
                db2.query(`SELECT user_id, first_name, created_at FROM users ORDER BY created_at DESC LIMIT 3`)
            ]);

            console.log('üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ DB1:');
            db1Recent.rows.forEach(user => {
                const date = new Date(user.created_at).toLocaleDateString('ru-RU');
                console.log(`   ${user.first_name} (${user.user_id}) - ${date}`);
            });

            console.log('\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ DB2:');
            db2Recent.rows.forEach(user => {
                const date = new Date(user.created_at).toLocaleDateString('ru-RU');
                console.log(`   ${user.first_name} (${user.user_id}) - ${date}`);
            });

        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        }

        // –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
        console.log('\nüí∏ –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–û–ö –ù–ê –í–´–í–û–î:\n');

        try {
            const [db1Withdrawals, db2Withdrawals] = await Promise.all([
                db1.query(`
                    SELECT 
                        status,
                        COUNT(*) as count,
                        SUM(amount) as total_amount
                    FROM withdrawal_requests 
                    GROUP BY status
                    ORDER BY status
                `),
                db2.query(`
                    SELECT 
                        status,
                        COUNT(*) as count,
                        SUM(amount) as total_amount
                    FROM withdrawal_requests 
                    GROUP BY status
                    ORDER BY status
                `)
            ]);

            console.log('DB1 –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:');
            db1Withdrawals.rows.forEach(row => {
                console.log(`   ${row.status}: ${row.count} –∑–∞—è–≤–æ–∫, ${Math.round(row.total_amount || 0)} –∑–≤—ë–∑–¥`);
            });

            console.log('\nDB2 –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:');
            db2Withdrawals.rows.forEach(row => {
                console.log(`   ${row.status}: ${row.count} –∑–∞—è–≤–æ–∫, ${Math.round(row.total_amount || 0)} –∑–≤—ë–∑–¥`);
            });

        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:', error.message);
        }

        console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        
        if (totalDb1 > totalDb2) {
            console.log('‚Ä¢ DB1 —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö - –æ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è');
            console.log('‚Ä¢ –ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ DB2 –≤ DB1');
        } else if (totalDb2 > totalDb1) {
            console.log('‚Ä¢ DB2 —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–º –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ');
            console.log('‚Ä¢ –ù—É–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        } else {
            console.log('‚Ä¢ –ë–∞–∑—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö');
            console.log('‚Ä¢ –ù—É–∂–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
        }

        console.log('\nüìã –î–õ–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –ó–ê–ü–£–°–¢–ò–¢–ï:');
        console.log('node merge-databases.js');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    } finally {
        await db1.end();
        await db2.end();
    }
}

quickAnalysis();
