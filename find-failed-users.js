const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');
const config = require('./config');

const bot = new TelegramBot(config.BOT_TOKEN, { polling: false });

async function findAndMessageFailedUsers() {
    try {
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É –∏–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤...\n');

        await Database.init();

        // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É
        console.log('ü§ñ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π...');
        const captchaFailedUsers = await Database.pool.query(`
            SELECT user_id, first_name, username, created_at, captcha_passed
            FROM users 
            WHERE captcha_passed = FALSE OR captcha_passed IS NULL
            ORDER BY created_at DESC
        `);

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π: ${captchaFailedUsers.rows.length}`);

        // 2. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏ÔøΩÔøΩ–∏ –ø—Ä–æ—Ü–µ—Å—Å (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å)
        console.log('\nüì¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã...');
        const subscriptionFailedUsers = await Database.pool.query(`
            SELECT user_id, first_name, username, created_at, captcha_passed, referral_completed
            FROM users 
            WHERE captcha_passed = TRUE 
            AND referral_completed = FALSE
            AND created_at < CURRENT_TIMESTAMP - INTERVAL '1 hour'
            ORDER BY created_at DESC
        `);

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionFailedUsers.rows.length}`);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        const allFailedUsers = new Map();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–µ–π
        captchaFailedUsers.rows.forEach(user => {
            allFailedUsers.set(user.user_id, {
                ...user,
                failure_reason: 'captcha_failed'
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫ÔøΩÔøΩ (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ)
        subscriptionFailedUsers.rows.forEach(user => {
            if (!allFailedUsers.has(user.user_id)) {
                allFailedUsers.set(user.user_id, {
                    ...user,
                    failure_reason: 'subscription_failed'
                });
            }
        });

        const totalFailedUsers = Array.from(allFailedUsers.values());
        console.log(`\nüìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${totalFailedUsers.length}`);

        if (totalFailedUsers.length === 0) {
            console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
            return;
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ
        const captchaFailed = totalFailedUsers.filter(u => u.failure_reason === 'captcha_failed');
        const subscriptionFailed = totalFailedUsers.filter(u => u.failure_reason === 'subscription_failed');

        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ü§ñ –ù–µ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: ${captchaFailed.length}`);
        console.log(`   üì¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: ${subscriptionFailed.length}`);

        // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const reminderMessage = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ';

        console.log(`\nüì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: "${reminderMessage}"`);

        let successCount = 0;
        let errorCount = 0;
        let blockedCount = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
        for (let i = 0; i < totalFailedUsers.length; i++) {
            const user = totalFailedUsers[i];
            const progress = `[${i + 1}/${totalFailedUsers.length}]`;
            
            try {
                await bot.sendMessage(user.user_id, reminderMessage);
                
                const reason = user.failure_reason === 'captcha_failed' ? 'ü§ñ –∫–∞–ø—á–∞' : 'üì¢ –ø–æ–¥–ø–∏—Å–∫–∞';
                console.log(`${progress} ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id} (${user.first_name}) - –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
                successCount++;

                // –ó–∞–¥–µ—Ä–∂–∫–∞ 100ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                await new Promise(resolve => setTimeout(resolve, 100));

            } catch (error) {
                if (error.response && error.response.body) {
                    const errorCode = error.response.body.error_code;
                    const description = error.response.body.description;

                    if (errorCode === 403) {
                        console.log(`${progress} üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
                        blockedCount++;
                    } else if (errorCode === 400 && description.includes('chat not found')) {
                        console.log(`${progress} ‚ùå –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        errorCount++;
                    } else {
                        console.log(`${progress} ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${description}`);
                        errorCount++;
                    }
                } else {
                    console.log(`${progress} ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.user_id}:`, error.message);
                    errorCount++;
                }
            }
        }

        console.log('\nüìä –ò–¢–û–ì–ò –û–¢–ü–†–ê–í–ö–ò:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${blockedCount}`);
        console.log(`‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${errorCount}`);
        console.log(`üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount + blockedCount + errorCount}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (captchaFailed.length > 0) {
            console.log('\nü§ñ –ü–†–ò–ú–ï–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ù–ï–ü–†–û–ô–î–ï–ù–ù–û–ô –ö–ê–ü–ß–ï–ô:');
            captchaFailed.slice(0, 5).forEach((user, index) => {
                const date = new Date(user.created_at).toLocaleDateString('ru-RU');
                console.log(`   ${index + 1}. ${user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.user_id}) - ${date}`);
            });
            if (captchaFailed.length > 5) {
                console.log(`   ... –∏ –µ—â–µ ${captchaFailed.length - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            }
        }

        if (subscriptionFailed.length > 0) {
            console.log('\nüì¢ –ü–†–ò–ú–ï–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò –ü–û–î–ü–ò–°–ö–ò:');
            subscriptionFailed.slice(0, 5).forEach((user, index) => {
                const date = new Date(user.created_at).toLocaleDateString('ru-RU');
                console.log(`   ${index + 1}. ${user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.user_id}) - ${date}`);
            });
            if (subscriptionFailed.length > 5) {
                console.log(`   ... –∏ –µ—â–µ ${subscriptionFailed.length - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await Database.pool.end();
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    console.log('üöÄ –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê –ü–û–ò–°–ö–ê –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n');
    findAndMessageFailedUsers();
}

module.exports = { findAndMessageFailedUsers };
