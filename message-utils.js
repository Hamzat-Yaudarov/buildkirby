/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ó–∞–º–µ–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è bot.editMessageText –∏ bot.sendMessage
 */

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} text - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function editMessage(bot, chatId, messageId, text, options = {}) {
    const {
        keyboard = null,
        parseMode = 'Markdown',
        disableWebPagePreview = true
    } = options;

    const editOptions = {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: parseMode,
        disable_web_page_preview: disableWebPagePreview
    };

    if (keyboard) {
        editOptions.reply_markup = { inline_keyboard: keyboard };
    }

    return await bot.editMessageText(text, editOptions);
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {string} text - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendMessage(bot, chatId, text, options = {}) {
    const {
        keyboard = null,
        parseMode = 'Markdown',
        disableWebPagePreview = true,
        replyToMessageId = null
    } = options;

    const sendOptions = {
        parse_mode: parseMode,
        disable_web_page_preview: disableWebPagePreview
    };

    if (keyboard) {
        sendOptions.reply_markup = { inline_keyboard: keyboard };
    }

    if (replyToMessageId) {
        sendOptions.reply_to_message_id = replyToMessageId;
    }

    return await bot.sendMessage(chatId, text, sendOptions);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} errorText - —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 * @param {Array} retryButtons - –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendErrorMessage(bot, chatId, messageId = null, errorText = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', retryButtons = null) {
    const defaultButtons = retryButtons || [
        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'main_menu' }]
    ];

    const message = `‚ùå ${errorText}`;

    if (messageId) {
        return await editMessage(bot, chatId, messageId, message, { keyboard: defaultButtons });
    } else {
        return await sendMessage(bot, chatId, message, { keyboard: defaultButtons });
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} successText - —Ç–µ–∫—Å—Ç —É—Å–ø–µ—Ö–∞
 * @param {Array} buttons - –∫–Ω–æ–ø–∫–∏
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendSuccessMessage(bot, chatId, messageId = null, successText, buttons = null) {
    const defaultButtons = buttons || [
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ];

    const message = `‚úÖ ${successText}`;

    if (messageId) {
        return await editMessage(bot, chatId, messageId, message, { keyboard: defaultButtons });
    } else {
        return await sendMessage(bot, chatId, message, { keyboard: defaultButtons });
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} loadingText - —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendLoadingMessage(bot, chatId, messageId, loadingText = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    return await editMessage(bot, chatId, messageId, `üîÑ ${loadingText}`);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} title - –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {Object} stats - –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 * @param {Array} buttons - –∫–Ω–æ–ø–∫–∏
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendStatsMessage(bot, chatId, messageId, title, stats, buttons = null) {
    let message = `üìä **${title}**\n\n`;
    
    Object.entries(stats).forEach(([key, value]) => {
        const emoji = getStatsEmoji(key);
        const formattedKey = formatStatsKey(key);
        message += `${emoji} **${formattedKey}:** ${formatStatsValue(value)}\n`;
    });

    const defaultButtons = buttons || [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stats' }],
        [{ text: 'üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin' }]
    ];

    return await editMessage(bot, chatId, messageId, message, { keyboard: defaultButtons });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {string} key - –∫–ª—é—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @returns {string} —ç–º–æ–¥–∑–∏
 */
function getStatsEmoji(key) {
    const emojiMap = {
        'total_users': 'üë•',
        'total_balance': 'üí∞',
        'total_referrals': 'üë•',
        'today_users': 'üìÖ',
        'active_tasks': 'üìã',
        'active_lotteries': 'üé∞',
        'pending_withdrawals': 'üí∏',
        'completed_withdrawals': '‚úÖ'
    };
    return emojiMap[key] || 'üìà';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {string} key - –∫–ª—é—á
 * @returns {string} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
 */
function formatStatsKey(key) {
    const keyMap = {
        'total_users': '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        'total_balance': '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å',
        'total_referrals': '–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
        'today_users': '–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
        'active_tasks': '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π',
        'active_lotteries': '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π',
        'pending_withdrawals': '–û–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤',
        'completed_withdrawals': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤'
    };
    return keyMap[key] || key.replace(/_/g, ' ');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @param {any} value - –∑–Ω–∞—á–µ–Ω–∏–µ
 * @returns {string} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */
function formatStatsValue(value) {
    if (typeof value === 'number') {
        if (value >= 1000000) {
            return `${(value / 1000000).toFixed(1)}M`;
        } else if (value >= 1000) {
            return `${(value / 1000).toFixed(1)}K`;
        }
        return value.toLocaleString();
    }
    return String(value);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
 * @param {Object} bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} user - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Array} buttons - –∫–Ω–æ–ø–∫–∏
 * @returns {Promise} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendProfileMessage(bot, chatId, messageId, user, buttons = null) {
    const { keyboards } = require('./keyboards');
    
    const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üí´ **–ò–º—è:** ${user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
üÜî **ID:** ${user.id}
üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance || 0} ‚≠ê
üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã:** ${user.referrals_count || 0}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** ${user.registered_at ? new Date(user.registered_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä **–ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—á–∫–∏:** ${user.weekly_points || 0}

üí° **–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ 3‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!**`;

    const defaultButtons = buttons || keyboards.getProfileKeyboard().reply_markup.inline_keyboard;

    return await editMessage(bot, chatId, messageId, message, { keyboard: defaultButtons });
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function cleanDisplayText(text) {
    if (!text) return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // Remove all potentially problematic characters for clean display
    let cleanText = text
        // Remove markdown special characters
        .replace(/[*_`\[\]()~>#+=|{}.!-]/g, '')
        // Remove control characters
        .replace(/[\u0000-\u001f\u007f-\u009f]/g, '')
        // Remove specific problematic symbols that cause Telegram parsing errors
        .replace(/[‚ò≠‚ßÅ‚Å£‡ºíìÜ©‚Ç¶≈Ç‚Ç¶‚Ñ≥‚Ç≥ìÜ™‚≠ê]/g, '')
        // Remove various unicode spaces, symbols, and special characters
        .replace(/[\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F]/g, '')
        // Remove other potentially problematic unicode ranges
        .replace(/[\u2600-\u26FF\u2700-\u27BF]/g, '') // Miscellaneous symbols
        .replace(/[\uFE00-\uFE0F]/g, '') // Variation selectors
        .replace(/[\u200D\u200C\u200B]/g, '') // Zero-width characters
        .trim();

    // Limit length to prevent issues
    if (cleanText.length > 20) {
        cleanText = cleanText.substring(0, 17) + '...';
    }

    // If name becomes empty after cleaning, use default
    return cleanText || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

module.exports = {
    editMessage,
    sendMessage,
    sendErrorMessage,
    sendSuccessMessage,
    sendLoadingMessage,
    sendStatsMessage,
    sendProfileMessage,
    cleanDisplayText,
    getStatsEmoji,
    formatStatsKey,
    formatStatsValue
};
