/**
 * –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
 */

const db = require('./database');
const { checkUnifiedSubscriptions, getAllChannelsToCheck } = require('./unified-subscription-check');

// Mock bot object for testing
const mockBot = {
    getChatMember: async (channelId, userId) => {
        console.log(`[MOCK] Checking membership for ${channelId}, user ${userId}`);
        
        // Simulate different scenarios
        if (channelId.includes('error')) {
            throw new Error('Channel not found');
        }
        
        // Simulate subscription status
        const isSubscribed = Math.random() > 0.3; // 70% chance of being subscribed
        
        return {
            status: isSubscribed ? 'member' : 'left'
        };
    }
};

async function testUnifiedSubscriptions() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–™–ï–î–ò–ù–Å–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–î–ü–ò–°–û–ö\n');

    try {
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

        // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const testUserId = 123456789;

        // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        const channelsData = await getAllChannelsToCheck(testUserId);
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log(`  ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channelsData.requiredChannels.length}`);
        console.log(`  ‚Ä¢ SubGram –∫–∞–Ω–∞–ª–æ–≤: ${channelsData.subgramChannels.length}`);
        console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${channelsData.allChannels.length}`);
        console.log(`  ‚Ä¢ –ï—Å—Ç—å SubGram –∫–∞–Ω–∞–ª—ã: ${channelsData.hasSubgramChannels}`);
        
        if (channelsData.error) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${channelsData.error}`);
        }
        
        console.log('\nüìã –î–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–æ–≤:');
        channelsData.allChannels.forEach((channel, index) => {
            console.log(`  ${index + 1}. [${channel.type}] ${channel.name} (${channel.source})`);
            if (channel.link && channel.link !== channel.id) {
                console.log(`     –°—Å—ã–ª–∫–∞: ${channel.link}`);
            }
        });
        console.log('');

        // 2. –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...');
        const subscriptionResult = await checkUnifiedSubscriptions(mockBot, testUserId, true);
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
        console.log(`  ‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: ${subscriptionResult.allSubscribed}`);
        console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${subscriptionResult.channels.length}`);
        console.log(`  ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: ${subscriptionResult.requiredChannels.length}`);
        console.log(`  ‚Ä¢ SubGram: ${subscriptionResult.subgramChannels.length}`);
        console.log(`  ‚Ä¢ –ï—Å—Ç—å –æ—à–∏–±–∫–∏: ${subscriptionResult.hasErrors}`);
        console.log(`  ‚Ä¢ –ï—Å—Ç—å SubGram –∫–∞–Ω–∞–ª—ã: ${subscriptionResult.hasSubgramChannels}`);
        
        if (subscriptionResult.error) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${subscriptionResult.error}`);
        }
        
        console.log('\nüìã –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫:');
        subscriptionResult.channels.forEach((channel, index) => {
            const status = channel.subscribed ? '‚úÖ' : '‚ùå';
            const checkStatus = channel.canCheck ? '' : ' (–Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)';
            console.log(`  ${index + 1}. ${status} [${channel.type}] ${channel.name}${checkStatus}`);
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        const unsubscribedChannels = subscriptionResult.channels.filter(ch => !ch.subscribed && ch.canCheck);
        if (unsubscribedChannels.length > 0) {
            console.log('\n‚ö†Ô∏è –ù–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:');
            unsubscribedChannels.forEach((channel, index) => {
                console.log(`  ${index + 1}. [${channel.type}] ${channel.name}`);
            });
        }
        console.log('');

        // 3. –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        console.log('3Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏...');
        try {
            const requiredChannelsOnly = await db.executeQuery(
                'SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE'
            );
            
            console.log(`üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:`);
            console.log(`  ‚Ä¢ –¢–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${requiredChannelsOnly.rows.length}`);
            console.log(`  ‚Ä¢ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${subscriptionResult.channels.length}`);
            console.log(`  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ SubGram –∫–∞–Ω–∞–ª–æ–≤: ${subscriptionResult.subgramChannels.length}`);
            
            if (subscriptionResult.subgramChannels.length > 0) {
                console.log(`  üéØ SubGram –∫–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!`);
            } else {
                console.log(`  ‚ö†Ô∏è SubGram –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
            }
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error.message);
        }
        console.log('');

        // 4. –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...');
        try {
            const recentLogs = await db.executeQuery(`
                SELECT * FROM subgram_api_requests 
                WHERE user_id = $1 
                AND created_at > NOW() - INTERVAL '1 hour'
                ORDER BY created_at DESC
                LIMIT 5
            `, [testUserId]);
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${recentLogs.rows.length} –∑–∞–ø–∏—Å–µ–π –≤ –ªÔøΩÔøΩ–≥–∞—Ö –∑–∞ —á–∞—Å:`);
            recentLogs.rows.forEach((log, index) => {
                const status = log.success ? '‚úÖ' : '‚ùå';
                console.log(`  ${index + 1}. ${status} ${log.request_type} (${log.api_status || 'no status'})`);
            });
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error.message);
        }
        console.log('');

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö SubGram –∫–∞–Ω–∞–ª–æ–≤...');
        try {
            const savedChannels = await db.getSubGramChannels(testUserId);
            
            if (savedChannels && savedChannels.length > 0) {
                console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${savedChannels.length} —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö SubGram –∫–∞–Ω–∞–ª–æ–≤:`);
                savedChannels.forEach((channel, index) => {
                    console.log(`  ${index + 1}. ${channel.channel_name} - ${channel.channel_link}`);
                });
            } else {
                console.log('üì≠ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö SubGram –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', error.message);
        }
        console.log('');

        // 6. –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('6Ô∏è‚É£ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('==========================================');
        
        console.log('‚úÖ –ü–†–û–í–ï–†–ï–ù–û:');
        console.log('  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ + SubGram)');
        console.log('  ‚Ä¢ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');
        console.log('  ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤');
        console.log('  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î');
        
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log(`  ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${subscriptionResult.channels.length}`);
        console.log(`  ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: ${subscriptionResult.requiredChannels.length}`);
        console.log(`  ‚Ä¢ SubGram: ${subscriptionResult.subgramChannels.length}`);
        console.log(`  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ: ${subscriptionResult.allSubscribed ? '–î–ê' : '–ù–ï–¢'}`);
        
        if (subscriptionResult.allSubscribed) {
            console.log('\nüéâ –û–¢–õ–ò–ß–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!');
        } else {
            const unsubscribed = subscriptionResult.channels.filter(ch => !ch.subscribed && ch.canCheck);
            console.log(`\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ü–ò–°–ö–ê: ${unsubscribed.length} –∫–∞–Ω–∞–ª–æ–≤`);
            unsubscribed.forEach(ch => {
                console.log(`    ‚Ä¢ [${ch.type}] ${ch.name}`);
            });
        }
        
        console.log('\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´:');
        if (subscriptionResult.channels.length > 0) {
            console.log('‚úÖ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
            console.log('‚úÖ –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –í–°–ï –∫–∞–Ω–∞–ª—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ + SubGram)');
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
        } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        }

    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    testUnifiedSubscriptions();
}

module.exports = { testUnifiedSubscriptions };
