/**
 * Bot diagnostic test
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –±–æ—Ç–∞
 */

const db = require('./database');

async function diagnosBot() {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞...\n');

    try {
        // 1. Test database connection
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç\n');

        // 2. Test basic queries
        console.log('2ÔøΩÔøΩÔøΩ‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
        
        // Test user operations
        const testUserId = 999999999;
        const testUser = {
            id: testUserId,
            username: 'test_user',
            first_name: 'Test User'
        };

        // Clean up first
        await db.executeQuery('DELETE FROM users WHERE id = $1', [testUserId]);
        
        // Create user
        await db.createOrUpdateUser(testUser);
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');

        // Get user
        const user = await db.getUser(testUserId);
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');

        // Update balance
        await db.updateUserBalance(testUserId, 10);
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');

        // Test captcha functions
        await db.setCaptchaPassed(testUserId, true);
        const captchaPassed = await db.getCaptchaStatus(testUserId);
        console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∫–∞–ø—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç:', captchaPassed);

        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç\n');

        // 3. Test SubGram functions
        console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π SubGram...');
        
        try {
            const settings = await db.getSubGramSettings();
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è:', !!settings);

            await db.saveSubGramUserSession(testUserId, {test: 'data'}, {test: 'processed'});
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ SubGram —Ä–∞–±–æ—Ç–∞–µ—Ç');

            const session = await db.getSubGramUserSession(testUserId);
            console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ SubGram —Ä–∞–±–æ—Ç–∞–µ—Ç:', !!session);

            await db.logSubGramAPIRequest(testUserId, 'test', {}, {}, true);
            console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');

            const history = await db.getSubGramAPIRequestHistory(testUserId, 1);
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç:', history.length);

        } catch (subgramError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö SubGram:', subgramError.message);
        }

        console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ SubGram —Ä–∞–±–æ—Ç–∞—é—Ç\n');

        // 4. Test referral functions
        console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
        
        try {
            const qualification = await db.checkReferralQualification(testUserId);
            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç:', qualification.qualified);

            const result = await db.checkAndProcessPendingReferrals(testUserId);
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.processed);

        } catch (referralError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö:', referralError.message);
        }

        console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n');

        // 5. Test required channels
        console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        
        try {
            const channels = await db.executeQuery('SELECT COUNT(*) as count FROM required_channels WHERE is_active = TRUE');
            console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è:', channels.rows[0].count);

        } catch (channelsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏:', channelsError.message);
        }

        // 6. Check module imports
        console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π...');
        
        try {
            const { subgramAPI } = require('./subgram-api');
            const config = subgramAPI.getConfig();
            console.log('‚úÖ SubGram API –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', config.hasApiKey);

            const { captchaSystem } = require('./captcha-system');
            const stats = captchaSystem.getStats();
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞–ø—á–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', stats.totalProblems);

            const { throttler } = require('./message-throttler');
            const status = throttler.getStatus();
            console.log('‚úÖ Throttler –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', status.messagesPerSecond);

        } catch (moduleError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª–µ–π:', moduleError.message);
        }

        // Cleanup
        await db.executeQuery('DELETE FROM users WHERE id = $1', [testUserId]);
        await db.deleteSubGramUserSession(testUserId);
        
        console.log('\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
        console.log('\nüìã –ü–†–û–í–ï–†–¨–¢–ï:');
        console.log('1. BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ?');
        console.log('2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞?');  
        console.log('3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?');
        console.log('4. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ Telegram?');

    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error('üìç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        
        console.log('\nüõ†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
        console.log('1. –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        console.log('2. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        console.log('3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω');
        console.log('4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏');
    } finally {
        await db.closeConnection();
        console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// Run the diagnostic
if (require.main === module) {
    diagnosBot();
}

module.exports = { diagnosBot };
