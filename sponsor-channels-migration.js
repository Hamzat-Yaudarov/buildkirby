const Database = require('./database');

async function createSponsorChannelsTable() {
    try {
        console.log('üìä –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        await Database.pool.query(`
            CREATE TABLE IF NOT EXISTS sponsor_channels_stats (
                id SERIAL PRIMARY KEY,
                channel_identifier VARCHAR(255) UNIQUE NOT NULL, -- @username –∏–ª–∏ https://t.me/username
                channel_title VARCHAR(255) NOT NULL,
                channel_url VARCHAR(500) NOT NULL,
                is_enabled BOOLEAN DEFAULT true, -- –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å –∫–∞–Ω–∞–ª
                total_checks INTEGER DEFAULT 0, -- –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
                unique_users_count INTEGER DEFAULT 0, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)
        await Database.pool.query(`
            CREATE TABLE IF NOT EXISTS sponsor_channel_user_checks (
                id SERIAL PRIMARY KEY,
                channel_identifier VARCHAR(255) NOT NULL,
                user_id BIGINT NOT NULL,
                first_check_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_check_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_checks INTEGER DEFAULT 1,
                UNIQUE(channel_identifier, user_id),
                FOREIGN KEY (channel_identifier) REFERENCES sponsor_channels_stats(channel_identifier) ON DELETE CASCADE
            )
        `);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await Database.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_sponsor_channels_enabled 
            ON sponsor_channels_stats(is_enabled)
        `);
        
        await Database.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_sponsor_channel_user_checks_channel 
            ON sponsor_channel_user_checks(channel_identifier)
        `);
        
        await Database.pool.query(`
            CREATE INDEX IF NOT EXISTS idx_sponsor_channel_user_checks_user 
            ON sponsor_channel_user_checks(user_id)
        `);

        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ config.js
        const config = require('./config');
        if (config.PERSONAL_SPONSOR_CHANNELS && config.PERSONAL_SPONSOR_CHANNELS.length > 0) {
            console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
            
            for (const channelInput of config.PERSONAL_SPONSOR_CHANNELS) {
                const channelData = normalizeChannelIdentifier(channelInput);
                
                try {
                    await Database.pool.query(`
                        INSERT INTO sponsor_channels_stats (
                            channel_identifier, 
                            channel_title, 
                            channel_url, 
                            is_enabled
                        ) VALUES ($1, $2, $3, $4)
                        ON CONFLICT (channel_identifier) DO NOTHING
                    `, [
                        channelData.identifier,
                        channelData.title,
                        channelData.url,
                        true
                    ]);
                    
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: ${channelData.identifier}`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ${channelInput}:`, error.message);
                }
            }
        }
        
        console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ index.js)
function normalizeChannelIdentifier(channelInput) {
    if (channelInput.startsWith('https://t.me/')) {
        const username = channelInput.replace('https://t.me/', '');
        return {
            identifier: `@${username}`,
            title: username,
            url: channelInput
        };
    } else if (channelInput.startsWith('@')) {
        return {
            identifier: channelInput,
            title: channelInput.replace('@', ''),
            url: `https://t.me/${channelInput.replace('@', '')}`
        };
    } else {
        return {
            identifier: `@${channelInput}`,
            title: channelInput,
            url: `https://t.me/${channelInput}`
        };
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
if (require.main === module) {
    Database.init().then(async () => {
        try {
            await createSponsorChannelsTable();
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            process.exit(1);
        }
    });
}

module.exports = { createSponsorChannelsTable };
