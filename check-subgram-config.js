const db = require('./database');
const { subgramAPI } = require('./subgram-api');

async function checkSubGramConfig() {
    try {
        console.log('=== –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö SUBGRAM ===\n');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
        console.log('1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        const settings = await db.getSubGramSettings();
        if (settings) {
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram`);
            console.log(`   ‚Ä¢ –í–∫–ª—é—á–µ–Ω: ${settings.enabled}`);
            console.log(`   ‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${settings.max_sponsors}`);
            console.log(`   ‚Ä¢ API –∫–ª—é—á: ${settings.api_key ? settings.api_key.substring(0, 10) + '...' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
            console.log(`   ‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${settings.default_action}`);
        } else {
            console.log('   ‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î!');
        }
        console.log();
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–¥–∞
        console.log('2. API –∫–ª—é—á –≤ –∫–æ–¥–µ:');
        // –ò–∑ subgram-api.js
        console.log(`   ‚Ä¢ Hardcoded –∫–ª—é—á: ${subgramAPI.apiKey ? subgramAPI.apiKey.substring(0, 10) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
        console.log();
        
        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        console.log('3. –¢–µ—Å—Ç–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å:');
        const testUserId = '123456789'; // –¢–µ—Å—Ç–æ–≤—ã–π ID
        
        const apiParams = {
            userId: testUserId,
            chatId: testUserId,
            maxOP: 3,
            action: 'subscribe',
            excludeChannelIds: [],
            withToken: true
        };
        
        console.log('   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(apiParams, null, 2));
        
        const testResponse = await subgramAPI.requestSponsors(apiParams);
        
        console.log(`   –°—Ç–∞—Ç—É—Å: ${testResponse.success ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞'}`);
        if (testResponse.success) {
            console.log('   –û—Ç–≤–µ—Ç API:', JSON.stringify(testResponse.data, null, 2));
            
            const processedData = subgramAPI.processAPIResponse(testResponse.data);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
            console.log(`     ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${processedData.status}`);
            console.log(`     ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${processedData.channels?.length || 0}`);
            console.log(`     ‚Ä¢ –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${processedData.channelsToSubscribe?.length || 0}`);
            console.log(`     ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${processedData.message || '–Ω–µ—Ç'}`);
            
            if (processedData.channels && processedData.channels.length > 0) {
                console.log('   üì∫ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:');
                processedData.channels.forEach((ch, i) => {
                    console.log(`     ${i+1}. ${ch.name} (${ch.link}) - ${ch.status}`);
                });
            }
        } else {
            console.log(`   –û—à–∏–±–∫–∞: ${testResponse.error}`);
            if (testResponse.details) {
                console.log('   –î–µ—Ç–∞–ª–∏:', JSON.stringify(testResponse.details, null, 2));
            }
        }
        console.log();
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –ë–î
        console.log('4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å—ã:');
        const recentRequests = await db.executeQuery(`
            SELECT user_id, api_status, success, response_data, error_message, created_at
            FROM subgram_api_requests 
            ORDER BY created_at DESC 
            LIMIT 5
        `);
        
        if (recentRequests.rows.length > 0) {
            recentRequests.rows.forEach((req, i) => {
                console.log(`   ${i+1}. User: ${req.user_id}, Status: ${req.api_status}, Success: ${req.success}, Time: ${req.created_at}`);
                if (!req.success && req.error_message) {
                    console.log(`      –û—à–∏–±–∫–∞: ${req.error_message}`);
                }
                if (req.response_data) {
                    const responseText = JSON.stringify(req.response_data).substring(0, 100);
                    console.log(`      –û—Ç–≤–µ—Ç: ${responseText}...`);
                }
            });
        } else {
            console.log('   –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–ø—Ä–æ—Å–∞—Ö ÔøΩÔøΩ –ë–î');
        }
        console.log();
        
        // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
        if (!settings) {
            console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –Ω—É–∂–Ω–æ –∏—Ö —Å–æ–∑–¥–∞—Ç—å');
        } else if (!settings.enabled) {
            console.log('‚ùå SubGram –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        } else if (!settings.api_key) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á');
        } else if (testResponse.success && testResponse.data?.message?.includes('—Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π')) {
            console.log('‚ö†Ô∏è  API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π');
            console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏ SubGram');
            console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω');
            console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞');
        } else if (!testResponse.success) {
            console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å API –∑–∞–ø—Ä–æ—Å–æ–º');
            console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á');
            console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
            console.log('   ‚Ä¢ –°–≤—èÔøΩÔøΩ–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SubGram');
        } else {
            console.log('‚úÖ –í—Å–µ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }
        
        process.exit(0);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SubGram:', error);
        process.exit(1);
    }
}

checkSubGramConfig();
