const { Pool } = require('pg');
const XLSX = require('xlsx');
const fs = require('fs');
const config = require('./config');

const pool = new Pool({
    connectionString: config.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

async function backupDatabase() {
    try {
        console.log('üìã –°–æ–∑–¥–∞–µ–º backup —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è backup
        const tables = [
            'users',
            'tasks', 
            'user_tasks',
            'withdrawal_requests',
            'subgram_tasks',
            'sponsor_channels_stats',
            'sponsor_channel_user_checks',
            'promocodes',
            'promocode_uses'
        ];
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è backup
        const backupDir = './backup-' + new Date().toISOString().split('T')[0];
        if (!fs.existsSync(backupDir)) {
            fs.mkdirSync(backupDir);
        }
        
        for (const table of tables) {
            try {
                console.log(`üìä Backing up ${table}...`);
                
                const result = await pool.query(`SELECT * FROM ${table} ORDER BY created_at ASC`);
                
                if (result.rows.length === 0) {
                    console.log(`   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${table} –ø—É—Å—Ç–∞`);
                    continue;
                }
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ xlsx
                const worksheet = XLSX.utils.json_to_sheet(result.rows);
                const workbook = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(workbook, worksheet, table);
                
                const fileName = `${backupDir}/${table}.xlsx`;
                XLSX.writeFile(workbook, fileName);
                
                console.log(`   ‚úÖ ${table}: ${result.rows.length} –∑–∞–ø–∏—Å–µ–π -> ${fileName}`);
                
            } catch (tableError) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ backup ${table}: ${tableError.message}`);
            }
        }
        
        console.log(`üéâ Backup –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: ${backupDir}`);
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ backup:', error.message);
        console.log('üìã –í–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç 26 –∞–≤–≥—É—Å—Ç–∞.');
    } finally {
        await pool.end();
    }
}

backupDatabase();
