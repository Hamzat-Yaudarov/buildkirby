/**
 * Test script for SubGram moderation status handling
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ SubGram
 */

const { subgramAPI } = require('./subgram-api');
const db = require('./database');

async function testModerationStatus() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ SubGram...\n');

    try {
        // Initialize database
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏ÔøΩÔøΩ–æ–≤–∞–Ω–∞\n');

        // 1. Test SubGram API configuration
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SubGram API...');
        const config = subgramAPI.getConfig();
        console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);
        console.log('‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞\n');

        // 2. Test actual API request
        console.log('2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ SubGram API...');
        const testUserId = 123456789;
        const apiResponse = await subgramAPI.requestSponsors({
            userId: testUserId.toString(),
            chatId: testUserId.toString(),
            firstName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            languageCode: 'ru',
            premium: false,
            maxOP: 3,
            action: 'subscribe',
            excludeChannelIds: []
        });

        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç SubGram API:');
        console.log('  ‚Ä¢ success:', apiResponse.success);
        if (apiResponse.success && apiResponse.data) {
            console.log('  ‚Ä¢ status:', apiResponse.data.status);
            console.log('  ‚Ä¢ code:', apiResponse.data.code);
            console.log('  ‚Ä¢ message:', apiResponse.data.message);
            console.log('  ‚Ä¢ total_fixed_link:', apiResponse.data.total_fixed_link);
        } else {
            console.log('  ‚Ä¢ error:', apiResponse.error);
            console.log('  ‚Ä¢ details:', apiResponse.details);
        }
        console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω\n');

        // 3. Test response processing
        if (apiResponse.success && apiResponse.data) {
            console.log('3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API...');
            const processedData = subgramAPI.processAPIResponse(apiResponse.data);
            
            console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
            console.log('  ‚Ä¢ status:', processedData.status);
            console.log('  ‚Ä¢ code:', processedData.code);
            console.log('  ‚Ä¢ needsSubscription:', processedData.needsSubscription);
            console.log('  ‚Ä¢ needsGender:', processedData.needsGender);
            console.log('  ‚Ä¢ allSubscribed:', processedData.allSubscribed);
            console.log('  ‚Ä¢ canProceed:', processedData.canProceed);
            console.log('  ‚Ä¢ isModeration:', processedData.isModeration);
            console.log('  ‚Ä¢ channels.length:', processedData.channels.length);
            console.log('  ‚Ä¢ channelsToSubscribe.length:', processedData.channelsToSubscribe.length);
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n');

            // 4. Test message formatting
            console.log('4Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const formattedMessage = subgramAPI.formatChannelsMessage(processedData);
            
            console.log('üí¨ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
            console.log('  ‚Ä¢ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', formattedMessage.message.length);
            console.log('  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫:', formattedMessage.buttons.length);
            console.log('  ‚Ä¢ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:');
            console.log('    ' + formattedMessage.message.replace(/\n/g, '\n    '));
            console.log('  ‚Ä¢ –ö–Ω–æ–ø–∫–∏:');
            formattedMessage.buttons.forEach((buttonRow, index) => {
                buttonRow.forEach(button => {
                    console.log(`    ${index + 1}. "${button.text}" -> ${button.callback_data || button.url}`);
                });
            });
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ\n');

            // 5. Test database logging
            console.log('5Ô∏è‚É£ –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
            await db.logSubGramAPIRequest(
                testUserId,
                'test_moderation',
                { action: 'subscribe', maxOP: 3 },
                apiResponse.data,
                true
            );
            console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥\n');

            // 6. Test session saving
            console.log('6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            await db.saveSubGramUserSession(testUserId, apiResponse.data, processedData);
            console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n');

            // 7. Get session back
            console.log('7Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const session = await db.getSubGramUserSession(testUserId);
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è:');
            if (session) {
                console.log('  ‚Ä¢ user_id:', session.user_id);
                console.log('  ‚Ä¢ status:', session.status);
                console.log('  ‚Ä¢ session_data.status:', session.session_data?.status);
                console.log('  ‚Ä¢ session_data.code:', session.session_data?.code);
                console.log('  ‚Ä¢ channels_data.isModeration:', session.channels_data?.isModeration);
                console.log('  ‚Ä¢ expires_at:', session.expires_at);
            } else {
                console.log('  ‚Ä¢ –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂ÔøΩÔøΩ–Ω–∞\n');

            // 8. Test API history
            console.log('8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤...');
            const history = await db.getSubGramAPIRequestHistory(testUserId, 5);
            console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:');
            history.forEach((request, index) => {
                console.log(`  ${index + 1}. ${request.request_type} - ${request.success ? '—É—Å–ø–µ—Ö' : '–æ—à–∏–±–∫–∞'}`);
                console.log(`     –í—Ä–µ–º—è: ${new Date(request.created_at).toLocaleString('ru-RU')}`);
                console.log(`     API —Å—Ç–∞—Ç—É—Å: ${request.api_status}`);
                console.log(`     API –∫–æ–¥: ${request.api_code}`);
            });
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞\n');
        }

        // 9. Analysis and recommendations
        console.log('9Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...\n');
        
        if (apiResponse.success && apiResponse.data) {
            const { status, code, message } = apiResponse.data;
            
            if (status === 'ok' && code === 400) {
                console.log('üîç –î–ò–ê–ì–ù–û–ó: –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ SubGram');
                console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç SubGram:', message);
                console.log('‚úÖ –ò–Ω—ÇÔøΩÔøΩ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
                console.log('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
            } else if (status === 'warning') {
                console.log('üîç –î–ò–ê–ì–ù–û–ó: SubGram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏');
                console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã');
            } else if (status === 'gender') {
                console.log('üîç –î–ò–ê–ì–ù–û–ó: SubGram —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª');
            } else {
                console.log('üîç –î–ò–ê–ì–ù–û–ó: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç SubGram');
                console.log('üìù –°—Ç–∞—Ç—É—Å:', status, '–ö–æ–¥:', code);
            }
        } else {
            console.log('‚ùå –î–ò–ê–ì–ù–û–ó: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ SubGram API');
            console.log('üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        }

        // Cleanup
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await db.deleteSubGramUserSession(testUserId);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

        console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
        console.log('üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SubGram –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
        console.error('üìç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// Run the test
if (require.main === module) {
    testModerationStatus();
}

module.exports = { testModerationStatus };
