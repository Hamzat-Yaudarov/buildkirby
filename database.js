const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool({
    connectionString: config.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

class Database {
    static get pool() {
        return pool;
    }

    static async init() {
        try {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await pool.query('SELECT NOW()');
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

            // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤–º–µ—Å—Ç–æ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã users
            const usersTableExists = await pool.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.tables
                    WHERE table_schema = 'public'
                    AND table_name = 'users'
                );
            `);

            if (usersTableExists.rows[0].exists) {
                console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
                console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
                return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
            }

            console.log('üìù –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î...');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await pool.query(`
                CREATE TABLE users (
                    user_id BIGINT PRIMARY KEY,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    language_code VARCHAR(10) DEFAULT 'ru',
                    is_premium BOOLEAN DEFAULT FALSE,
                    balance DECIMAL(10,2) DEFAULT 0.00,
                    total_earned DECIMAL(10,2) DEFAULT 0.00,
                    referral_earned DECIMAL(10,2) DEFAULT 0.00,
                    total_referrals INTEGER DEFAULT 0,
                    daily_referrals INTEGER DEFAULT 0,
                    last_daily_reset DATE DEFAULT CURRENT_DATE,
                    clicks_today INTEGER DEFAULT 0,
                    last_click_time TIMESTAMP,
                    points INTEGER DEFAULT 0,
                    weekly_points INTEGER DEFAULT 0,
                    last_case_open DATE,
                    referrer_id BIGINT,
                    referral_completed BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π
            await pool.query(`
                CREATE TABLE tasks (
                    id SERIAL PRIMARY KEY,
                    title VARCHAR(255) NOT NULL,
                    description TEXT,
                    link VARCHAR(500),
                    reward DECIMAL(5,2) DEFAULT 0.3,
                    is_subgram BOOLEAN DEFAULT FALSE,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ tasks —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await pool.query(`
                CREATE TABLE user_tasks (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    task_id INTEGER NOT NULL,
                    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (task_id) REFERENCES tasks(id)
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ user_tasks —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            await pool.query(`
                CREATE TABLE promocodes (
                    id SERIAL PRIMARY KEY,
                    code VARCHAR(50) UNIQUE NOT NULL,
                    reward DECIMAL(10,2) NOT NULL,
                    uses_limit INTEGER DEFAULT 1,
                    current_uses INTEGER DEFAULT 0,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ promocodes —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            await pool.query(`
                CREATE TABLE promocode_uses (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    promocode_id INTEGER NOT NULL,
                    used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (promocode_id) REFERENCES promocodes(id)
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ promocode_uses —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ—Ç–µ—Ä–µ–π
            await pool.query(`
                CREATE TABLE lotteries (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    ticket_price DECIMAL(10,2) NOT NULL,
                    total_tickets INTEGER NOT NULL,
                    sold_tickets INTEGER DEFAULT 0,
                    winners_count INTEGER NOT NULL,
                    bot_percentage INTEGER DEFAULT 30,
                    is_active BOOLEAN DEFAULT TRUE,
                    is_finished BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    finished_at TIMESTAMP
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ lotteries —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∏–ª–µ—Ç–æ–≤ –ª–æ—Ç–µ—Ä–µ–∏
            await pool.query(`
                CREATE TABLE lottery_tickets (
                    id SERIAL PRIMARY KEY,
                    lottery_id INTEGER NOT NULL,
                    user_id BIGINT NOT NULL,
                    ticket_number INTEGER NOT NULL,
                    purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (lottery_id) REFERENCES lotteries(id)
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ lottery_tickets —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
            await pool.query(`
                CREATE TABLE withdrawal_requests (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    amount DECIMAL(10,2) NOT NULL,
                    status VARCHAR(20) DEFAULT 'pending',
                    rejection_reason TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    processed_at TIMESTAMP
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ withdrawal_requests —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await pool.query(`
                CREATE TABLE bot_stats (
                    id SERIAL PRIMARY KEY,
                    date DATE DEFAULT CURRENT_DATE,
                    total_users INTEGER DEFAULT 0,
                    new_users INTEGER DEFAULT 0,
                    total_stars_earned DECIMAL(15,2) DEFAULT 0,
                    total_withdrawals DECIMAL(15,2) DEFAULT 0,
                    active_users INTEGER DEFAULT 0
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ bot_stats —Å–æ–∑–¥–∞–Ω–∞');

            // –°–æ–∑–¥ÔøΩÔøΩ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö SubGram –∑–∞–¥–∞–Ω–∏–π
            await pool.query(`
                CREATE TABLE subgram_tasks (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    channel_link VARCHAR(500) NOT NULL,
                    channel_name VARCHAR(255),
                    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, channel_link)
                )
            `);
            console.log('–¢–∞–±–ª–∏—Ü–∞ subgram_tasks —Å–æ–∑–¥–∞–Ω–∞');

            console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    static async getUser(userId) {
        const result = await pool.query('SELECT * FROM users WHERE user_id = $1', [userId]);
        return result.rows[0];
    }

    static async createUser(userData) {
        const { userId, username, firstName, languageCode, isPremium, referrerId } = userData;
        const result = await pool.query(`
            INSERT INTO users (user_id, username, first_name, language_code, is_premium, referrer_id)
            VALUES ($1, $2, $3, $4, $5, $6)
            ON CONFLICT (user_id) DO UPDATE SET
                username = $2,
                first_name = $3,
                language_code = $4,
                is_premium = $5,
                updated_at = CURRENT_TIMESTAMP
            RETURNING *
        `, [userId, username, firstName, languageCode, isPremium, referrerId]);

        // –ù–ï —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –†–µ—Ñ–µ—Ä–∞–ª—ã –±—É–¥—É—Ç –∑–∞—Å—á–∏—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –≤ checkReferralConditions()
        if (referrerId) {
            console.log(`üë• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º ${referrerId}, –Ω–æ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º`);
        }

        return result.rows[0];
    }

    static async updateUserBalance(userId, amount, type = 'add') {
        const operator = type === 'add' ? '+' : '-';
        const result = await pool.query(`
            UPDATE users 
            SET balance = balance ${operator} $2,
                total_earned = total_earned + CASE WHEN $3 = 'add' THEN $2 ELSE 0 END,
                updated_at = CURRENT_TIMESTAMP
            WHERE user_id = $1
            RETURNING *
        `, [userId, Math.abs(amount), type]);
        return result.rows[0];
    }

    // –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - —Ç–µ–ø–µ—Ä—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ  checkReferralConditions()
    // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    static async addReferral(referrerId) {
        console.log(`‚ö†Ô∏è –£–°–¢–ê–†–ï–í–®–ò–ô –í–´–ó–û–í addReferral –¥–ª—è ${referrerId} - —Ä–µ—Ñ–µ—Ä–∞–ª—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ checkReferralConditions()`);
        // –ù–ï –î–ï–õ–ê–ï–ú –ù–ò–ß–ï–ì–û - —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
    }

    static async updateUserClicks(userId) {
        const result = await pool.query(`
            UPDATE users 
            SET clicks_today = CASE 
                    WHEN DATE(last_click_time) = CURRENT_DATE THEN clicks_today + 1
                    ELSE 1
                END,
                last_click_time = CURRENT_TIMESTAMP,
                updated_at = CURRENT_TIMESTAMP
            WHERE user_id = $1
            RETURNING clicks_today
        `, [userId]);
        return result.rows[0]?.clicks_today || 1;
    }

    static async updateUserPoints(userId, points) {
        await pool.query(`
            UPDATE users 
            SET points = points + $2,
                weekly_points = weekly_points + $2,
                updated_at = CURRENT_TIMESTAMP
            WHERE user_id = $1
        `, [userId, points]);
    }

    static async resetWeeklyPoints() {
        await pool.query('UPDATE users SET weekly_points = 0');
    }

    static async getWeeklyLeaderboard(limit = 10) {
        const result = await pool.query(`
            SELECT user_id, username, first_name, weekly_points 
            FROM users 
            WHERE weekly_points > 0 
            ORDER BY weekly_points DESC 
            LIMIT $1
        `, [limit]);
        return result.rows;
    }

    static async getOverallLeaderboard(limit = 10) {
        const result = await pool.query(`
            SELECT user_id, username, first_name, points 
            FROM users 
            WHERE points > 0 
            ORDER BY points DESC 
            LIMIT $1
        `, [limit]);
        return result.rows;
    }

    // –ó–∞–¥–∞–Ω–∏—è
    static async getTasks(isSubgram = false) {
        const result = await pool.query(`
            SELECT * FROM tasks 
            WHERE is_active = true AND is_subgram = $1 
            ORDER BY created_at DESC
        `, [isSubgram]);
        return result.rows;
    }

    static async createTask(taskData) {
        const { title, description, link, reward, isSubgram } = taskData;
        const result = await pool.query(`
            INSERT INTO tasks (title, description, link, reward, is_subgram)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING *
        `, [title, description, link, reward, isSubgram]);
        return result.rows[0];
    }

    static async completeTask(userId, taskId) {
        const result = await pool.query(`
            INSERT INTO user_tasks (user_id, task_id)
            VALUES ($1, $2)
            ON CONFLICT DO NOTHING
            RETURNING *
        `, [userId, taskId]);
        return result.rows[0];
    }

    static async isTaskCompleted(userId, taskId) {
        const result = await pool.query(`
            SELECT * FROM user_tasks 
            WHERE user_id = $1 AND task_id = $2
        `, [userId, taskId]);
        return result.rows.length > 0;
    }

    static async getUserCompletedTasks(userId) {
        const result = await pool.query(`
            SELECT COUNT(*) as count FROM user_tasks WHERE user_id = $1
        `, [userId]);
        return parseInt(result.rows[0].count);
    }

    // –ü—Ä–æ–º–æ–∫–æ–¥—ã
    static async createPromocode(code, reward, usesLimit) {
        const result = await pool.query(`
            INSERT INTO promocodes (code, reward, uses_limit)
            VALUES ($1, $2, $3)
            RETURNING *
        `, [code, reward, usesLimit]);
        return result.rows[0];
    }

    static async usePromocode(userId, code) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            const promocode = await client.query(`
                SELECT * FROM promocodes 
                WHERE code = $1 AND is_active = true 
                AND current_uses < uses_limit
            `, [code]);
            
            if (promocode.rows.length === 0) {
                throw new Error('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω');
            }
            
            const alreadyUsed = await client.query(`
                SELECT * FROM promocode_uses 
                WHERE user_id = $1 AND promocode_id = $2
            `, [userId, promocode.rows[0].id]);
            
            if (alreadyUsed.rows.length > 0) {
                throw new Error('–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
            }
            
            await client.query(`
                INSERT INTO promocode_uses (user_id, promocode_id)
                VALUES ($1, $2)
            `, [userId, promocode.rows[0].id]);
            
            await client.query(`
                UPDATE promocodes 
                SET current_uses = current_uses + 1
                WHERE id = $1
            `, [promocode.rows[0].id]);
            
            await client.query('COMMIT');
            return promocode.rows[0];
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    // –õ–æ—Ç–µ—Ä–µ–∏
    static async createLottery(lotteryData) {
        const { name, ticketPrice, totalTickets, winnersCount, botPercentage } = lotteryData;
        const result = await pool.query(`
            INSERT INTO lotteries (name, ticket_price, total_tickets, winners_count, bot_percentage)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING *
        `, [name, ticketPrice, totalTickets, winnersCount, botPercentage]);
        return result.rows[0];
    }

    static async getActiveLotteries() {
        const result = await pool.query(`
            SELECT * FROM lotteries 
            WHERE is_active = true AND is_finished = false
            ORDER BY created_at DESC
        `);
        return result.rows;
    }

    static async buyLotteryTicket(userId, lotteryId) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            const lottery = await client.query(`
                SELECT * FROM lotteries 
                WHERE id = $1 AND is_active = true AND is_finished = false
            `, [lotteryId]);
            
            if (lottery.rows.length === 0) {
                throw new Error('–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }
            
            const lotteryData = lottery.rows[0];
            if (lotteryData.sold_tickets >= lotteryData.total_tickets) {
                throw new Error('–í—Å–µ –±–∏–ª–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã');
            }
            
            const user = await client.query(`
                SELECT balance FROM users WHERE user_id = $1
            `, [userId]);
            
            if (user.rows[0].balance < lotteryData.ticket_price) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
            }
            
            await client.query(`
                UPDATE users 
                SET balance = balance - $2
                WHERE user_id = $1
            `, [userId, lotteryData.ticket_price]);
            
            const ticketNumber = lotteryData.sold_tickets + 1;
            
            await client.query(`
                INSERT INTO lottery_tickets (lottery_id, user_id, ticket_number)
                VALUES ($1, $2, $3)
            `, [lotteryId, userId, ticketNumber]);
            
            await client.query(`
                UPDATE lotteries 
                SET sold_tickets = sold_tickets + 1
                WHERE id = $1
            `, [lotteryId]);
            
            await client.query('COMMIT');
            return ticketNumber;
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    // –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    static async createWithdrawalRequest(userId, amount) {
        const result = await pool.query(`
            INSERT INTO withdrawal_requests (user_id, amount)
            VALUES ($1, $2)
            RETURNING *
        `, [userId, amount]);
        return result.rows[0];
    }

    static async getPendingWithdrawals() {
        const result = await pool.query(`
            SELECT wr.*, u.username, u.first_name, u.balance
            FROM withdrawal_requests wr
            JOIN users u ON wr.user_id = u.user_id
            WHERE wr.status = 'pending'
            ORDER BY wr.created_at ASC
        `);
        return result.rows;
    }

    static async processWithdrawal(requestId, status, reason = null) {
        const result = await pool.query(`
            UPDATE withdrawal_requests 
            SET status = $2, rejection_reason = $3, processed_at = CURRENT_TIMESTAMP
            WHERE id = $1
            RETURNING *
        `, [requestId, status, reason]);
        return result.rows[0];
    }

    // SubGram –∑–∞–¥–∞–Ω–∏—è
    static async completeSubgramTask(userId, channelLink, channelName = null) {
        const result = await pool.query(`
            INSERT INTO subgram_tasks (user_id, channel_link, channel_name)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id, channel_link) DO NOTHING
            RETURNING *
        `, [userId, channelLink, channelName]);
        return result.rows[0];
    }

    static async getCompletedSubgramTasks(userId) {
        const result = await pool.query(`
            SELECT channel_link FROM subgram_tasks WHERE user_id = $1
        `, [userId]);
        return result.rows.map(row => row.channel_link);
    }

    static async getUserSubgramTasksCount(userId) {
        const result = await pool.query(`
            SELECT COUNT(*) as count FROM subgram_tasks WHERE user_id = $1
        `, [userId]);
        return parseInt(result.rows[0].count);
    }

    static async isSubgramTaskCompleted(userId, channelLink) {
        const result = await pool.query(`
            SELECT * FROM subgram_tasks
            WHERE user_id = $1 AND channel_link = $2
        `, [userId, channelLink]);
        return result.rows.length > 0;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
    static async getUserReferrals(userId) {
        const result = await pool.query(`
            SELECT user_id, first_name, username, referral_completed, created_at
            FROM users
            WHERE referrer_id = $1
            ORDER BY created_at DESC
        `, [userId]);
        return result.rows;
    }

    static async getActivatedReferrals(userId) {
        const result = await pool.query(`
            SELECT user_id, first_name, username, created_at
            FROM users
            WHERE referrer_id = $1 AND referral_completed = TRUE
            ORDER BY created_at DESC
        `, [userId]);
        return result.rows;
    }

    static async getNonActivatedReferrals(userId) {
        const result = await pool.query(`
            SELECT user_id, first_name, username, created_at
            FROM users
            WHERE referrer_id = $1 AND referral_completed = FALSE
            ORDER BY created_at DESC
        `, [userId]);
        return result.rows;
    }

    static async getReferralStats(userId) {
        const result = await pool.query(`
            SELECT
                COUNT(*) as total_referrals,
                COUNT(CASE WHEN referral_completed = TRUE THEN 1 END) as activated_referrals,
                COUNT(CASE WHEN referral_completed = FALSE THEN 1 END) as non_activated_referrals
            FROM users
            WHERE referrer_id = $1
        `, [userId]);
        return result.rows[0];
    }

    // –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
    // –ë–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã
    static async getUserSponsorSubscriptions(userId) {
        const user = await pool.query('SELECT referral_completed FROM users WHERE user_id = $1', [userId]);
        if (user.rows.length === 0) return 0;

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (referral_completed = true), –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 3-5 —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º
        return user.rows[0].referral_completed ? 4 : 0;
    }

    // –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getReferralsSponsorSubscriptions(userId) {
        const result = await pool.query(`
            SELECT COUNT(CASE WHEN referral_completed = TRUE THEN 1 END) as activated_referrals
            FROM users
            WHERE referrer_id = $1
        `, [userId]);

        // –ö–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 –∫–∞–Ω–∞–ª–∞)
        const activatedReferrals = parseInt(result.rows[0].activated_referrals) || 0;
        return activatedReferrals * 4;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    static async getUserWithdrawalInfo(userId) {
        try {
            const user = await pool.query('SELECT * FROM users WHERE user_id = $1', [userId]);
            if (user.rows.length === 0) return null;

            const userData = user.rows[0];

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            const referralStats = await this.getReferralStats(userId);

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
            const userSubscriptions = await this.getUserSponsorSubscriptions(userId);
            const referralsSubscriptions = await this.getReferralsSponsorSubscriptions(userId);

            return {
                ...userData,
                referral_stats: referralStats,
                sponsor_subscriptions: userSubscriptions,
                referrals_subscriptions: referralsSubscriptions
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞:', error);
            return null;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
    static async setWithdrawalStartNumber(startNumber) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const currentSeq = await pool.query(`
                SELECT last_value FROM withdrawal_requests_id_seq;
            `);

            const currentValue = parseInt(currentSeq.rows[0]?.last_value) || 0;
            console.log(`–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${currentValue}`);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (startNumber - 1, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π ID –±—ã–ª –∏–º–µ–Ω–Ω–æ startNumber)
            await pool.query(`
                SELECT setval('withdrawal_requests_id_seq', $1, true);
            `, [startNumber - 1]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const newSeq = await pool.query(`
                SELECT last_value FROM withdrawal_requests_id_seq;
            `);

            const newValue = parseInt(newSeq.rows[0]?.last_value);
            console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä ${newValue + 1}`);

            return {
                success: true,
                previousValue: currentValue,
                newValue: newValue,
                nextWithdrawalId: newValue + 1
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
}

module.exports = Database;
