#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
 */

const TelegramBot = require('node-telegram-bot-api');
const db = require('./database');

// Bot token
const token = process.env.BOT_TOKEN || '8379368723:AAEnG133OZ4qMrb5vQfM7VdEFSuLiWydsyM';
const bot = new TelegramBot(token, { polling: false });

async function getRequiredChannels() {
    try {
        const result = await db.executeQuery('SELECT channel_id FROM required_channels WHERE is_active = TRUE');
        return result.rows.map(row => row.channel_id);
    } catch (error) {
        console.error('Error getting required channels:', error);
        return [];
    }
}

async function testSubscriptionCheck(testUserId) {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}\n`);

    try {
        // 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        const channels = await getRequiredChannels();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${channels.length}`);
        channels.forEach((channel, index) => {
            console.log(`   ${index + 1}. ${channel}`);
        });

        if (channels.length === 0) {
            console.log('‚úÖ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω');
            return true;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}:`);
        
        for (const channel of channels) {
            try {
                console.log(`\nüì∫ –ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–Ω–∞–ª: ${channel}`);
                const member = await bot.getChatMember(channel, testUserId);
                
                console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${member.status}`);
                
                if (member.status === 'left' || member.status === 'kicked') {
                    console.log(`   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω`);
                    return false;
                } else {
                    console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω`);
                }
            } catch (error) {
                console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
                
                const errorCode = error.response?.body?.error_code;
                const errorDesc = error.response?.body?.description || error.message;
                
                console.log(`   üìù –ö–æ–¥ –æ—à–∏–±–∫–∏: ${errorCode}`);
                console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${errorDesc}`);
                
                // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
                if (errorCode === 400 || 
                    errorDesc.includes('chat not found') ||
                    errorDesc.includes('bot was kicked') ||
                    errorDesc.includes('bot is not a member')) {
                    console.log(`   ‚úÖ –ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ - –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–Ω–∞–ª—É`);
                } else {
                    console.log(`   ‚ùå –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
                    return false;
                }
            }
        }

        console.log(`\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω`);
        return true;

    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function testMultipleUsers() {
    console.log('üéØ –ú–ê–°–°–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–û–ö\n');

    // –¢–µ—Å—Ç–æ–≤—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    const testUsers = [
        123456789,   // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID
        987654321,
        555666777
    ];

    for (const userId of testUsers) {
        console.log(`${'='.repeat(60)}`);
        const result = await testSubscriptionCheck(userId);
        console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è ${userId}: ${result ? '‚úÖ –û–î–û–ë–†–ï–ù' : '‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù'}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testSpecificUser(userId) {
    try {
        await db.initializeDatabase();
        const result = await testSubscriptionCheck(parseInt(userId));
        console.log(`\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${result ? '‚úÖ –û–î–û–ë–†–ï–ù' : '‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù'}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    const userId = process.argv[2];
    
    if (userId) {
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
        testSpecificUser(userId);
    } else {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('node test-subscription-check.js 123456789');
        console.log('\n–ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
}

module.exports = { testSubscriptionCheck };
