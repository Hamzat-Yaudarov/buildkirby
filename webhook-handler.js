const express = require('express');
const config = require('./config');
const Database = require('./database');

class WebhookHandler {
    constructor(bot) {
        this.bot = bot;
        this.app = express();
        this.userSubscriptionCache = new Map(); // –ö–µ—à —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: true }));

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.app.use((req, res, next) => {
            console.log(`üì• ${req.method} ${req.path} - ${req.ip} - Headers:`, JSON.stringify(req.headers, null, 2));
            next();
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–æ–≤
        this.setupRoutes();
    }

    setupRoutes() {
        // –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.app.get('/', (req, res) => {
            res.json({
                message: 'Telegram Stars Bot Webhook Server',
                status: 'running',
                endpoints: {
                    health: '/health',
                    webhook: '/webhook/subgram'
                },
                timestamp: new Date().toISOString()
            });
        });

        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç
        this.app.get('/test', (req, res) => {
            console.log('üß™ Test endpoint –≤—ã–∑–≤–∞–Ω');
            res.send('OK - Railway webhook server works!');
        });

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
        this.app.get('/health', (req, res) => {
            console.log('üíö Health endpoint –≤—ã–∑–≤–∞–Ω');
            res.json({
                status: 'ok',
                timestamp: new Date().toISOString(),
                service: 'telegram-stars-bot',
                port: process.env.PORT || 'unknown'
            });
        });

        // –ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ SubGram
        this.app.post('/webhook/subgram', async (req, res) => {
            try {
                await this.handleSubgramWebhook(req, res);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞ SubGram:', error);
                res.status(500).json({ error: 'Internal server error' });
            }
        });

        // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        this.app.get('/api/user/:userId/subscription', async (req, res) => {
            try {
                const userId = parseInt(req.params.userId);
                const subscription = this.getUserSubscriptionStatus(userId);
                res.json({
                    userId,
                    subscription,
                    cached: this.userSubscriptionCache.has(userId)
                });
            } catch (error) {
                res.status(500).json({ error: error.message });
            }
        });

        // Catch-all –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.all('*', (req, res) => {
            console.log(`üö´ –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.path}`);
            res.status(404).json({
                error: 'Endpoint not found',
                method: req.method,
                path: req.path,
                availableEndpoints: {
                    '/': 'GET - Bot info',
                    '/health': 'GET - Health check',
                    '/webhook/subgram': 'POST - SubGram webhook',
                    '/api/user/:userId/subscription': 'GET - User subscription status'
                }
            });
        });
    }

    async handleSubgramWebhook(req, res) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –°–ù–ê–ß–ê–õ–ê (–¥–æ –æ—Ç–≤–µ—Ç–∞)
        const apiKey = req.headers['api-key'] || req.headers['authorization'] || req.headers['auth'];
        console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞:', {
            received: apiKey ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            expected: config.SUBGRAM_API_KEY ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });

        if (!apiKey || apiKey !== config.SUBGRAM_API_KEY) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –≤ –≤–µ–±—Ö—É–∫–µ SubGram. –ü–æ–ª—É—á–µ–Ω:', apiKey, '–û–∂–∏–¥–∞–ª—Å—è:', config.SUBGRAM_API_KEY);
            res.status(401).json({ error: 'Unauthorized', message: 'Invalid API key' });
            return;
        }

        // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã SubGram –Ω–µ —Å—á–∏—Ç–∞–ª –µ–≥–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º
        res.status(200).json({ received: true, timestamp: new Date().toISOString() });

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫
        console.log('–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ SubGram:', JSON.stringify(req.body, null, 2));

        const { webhooks } = req.body;
        if (!webhooks || !Array.isArray(webhooks)) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ–±—Ö—É–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ webhooks');
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        for (const webhook of webhooks) {
            try {
                await this.processWebhookEvent(webhook);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤–µ–±—Ö—É–∫–∞:', error, webhook);
            }
        }
    }

    async processWebhookEvent(webhook) {
        const { webhook_id, link, user_id, bot_id, status, subscribe_date } = webhook;

        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è ${webhook_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id}, —Å—Ç–∞—Ç—É—Å: ${status}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç
        if (bot_id.toString() !== config.BOT_TOKEN.split(':')[0]) {
            console.log(`–í–µ–±—Ö—É–∫ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞: ${bot_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.updateUserSubscriptionCache(user_id, status, link);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        switch (status) {
            case 'subscribed':
                await this.handleSubscribed(user_id, link, subscribe_date);
                break;
            case 'notgetted':
                await this.handleNotGetted(user_id, link, subscribe_date);
                break;
            case 'unsubscribed':
                await this.handleUnsubscribed(user_id, link);
                break;
            default:
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`);
        }
    }

    updateUserSubscriptionCache(userId, status, link) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}, —Å—Ç–∞—Ç—É—Å ${status}, —Å—Å—ã–ª–∫–∞ ${link}`);

        if (!this.userSubscriptionCache.has(userId)) {
            this.userSubscriptionCache.set(userId, {
                subscriptions: new Map(),
                lastUpdate: Date.now()
            });
        }

        const userCache = this.userSubscriptionCache.get(userId);
        userCache.subscriptions.set(link, {
            status,
            timestamp: Date.now()
        });
        userCache.lastUpdate = Date.now();

        console.log(`üìä –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, {
            totalSubscriptions: userCache.subscriptions.size,
            lastUpdate: new Date(userCache.lastUpdate).toISOString()
        });

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        this.cleanupCache();
    }

    cleanupCache() {
        const oneHour = 60 * 60 * 1000;
        const now = Date.now();

        for (const [userId, userCache] of this.userSubscriptionCache.entries()) {
            if (now - userCache.lastUpdate > oneHour) {
                this.userSubscriptionCache.delete(userId);
            }
        }
    }

    getUserSubscriptionStatus(userId) {
        const userCache = this.userSubscriptionCache.get(userId);
        if (!userCache) {
            console.log(`üì≠ –ù–µ—Ç –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return { isSubscribed: null, unsubscribedLinks: [], lastUpdate: null };
        }

        const unsubscribedLinks = [];
        const subscribedLinks = [];
        let hasUnsubscribed = false;

        for (const [link, data] of userCache.subscriptions.entries()) {
            if (data.status === 'unsubscribed') {
                unsubscribedLinks.push(link);
                hasUnsubscribed = true;
            } else if (data.status === 'subscribed' || data.status === 'notgetted') {
                subscribedLinks.push(link);
            }
        }

        const isFullySubscribed = !hasUnsubscribed && userCache.subscriptions.size > 0;

        console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
            isSubscribed: isFullySubscribed,
            unsubscribedCount: unsubscribedLinks.length,
            subscribedCount: subscribedLinks.length,
            totalLinks: userCache.subscriptions.size,
            lastUpdate: new Date(userCache.lastUpdate).toISOString()
        });

        return {
            isSubscribed: isFullySubscribed,
            unsubscribedLinks,
            subscribedLinks,
            subscribedCount: subscribedLinks.length,
            unsubscribedCount: unsubscribedLinks.length,
            lastUpdate: userCache.lastUpdate,
            totalLinks: userCache.subscriptions.size
        };
    }

    async handleSubscribed(userId, link, subscribeDate) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ ${link}`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            const user = await Database.getUser(userId);
            if (user) {
                // –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${link}`);
                
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∞–Ω, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –≤–µ–±—Ö—É–∫–∞
                // –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
                const subscriptionStatus = this.getUserSubscriptionStatus(userId);
                if (subscriptionStatus.isSubscribed) {
                    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∞–Ω (–∫–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω)`);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        }
    }

    async handleNotGetted(userId, link, subscribeDate) {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω —Ä–∞–Ω–µ–µ –Ω–∞ ${link}`);
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await this.handleSubscribed(userId, link, subscribeDate);
    }

    async handleUnsubscribed(userId, link) {
        console.log(`üìâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç ${link}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
            const subscriptionStatus = this.getUserSubscriptionStatus(userId);
            console.log(`üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
                subscribedCount: subscriptionStatus.subscribedCount,
                unsubscribedCount: subscriptionStatus.unsubscribedCount,
                totalLinks: subscriptionStatus.totalLinks,
                isFullySubscribed: subscriptionStatus.isSubscribed
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            const user = await Database.getUser(userId);
            if (user) {
                // –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
                try {
                    await this.bot.sendMessage(userId,
                        '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n' +
                        `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptionStatus.subscribedCount} –∏–∑ ${subscriptionStatus.totalLinks}\n` +
                        '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.'
                    );
                } catch (e) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø–∏—Å–∫–∏:', error);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
    isUserSubscribed(userId) {
        const status = this.getUserSubscriptionStatus(userId);
        return status.isSubscribed === true;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUnsubscribedLinks(userId) {
        const status = this.getUserSubscriptionStatus(userId);
        return status.unsubscribedLinks || [];
    }

    start(port = 3000) {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(port, '0.0.0.0', (err) => {
                if (err) {
                    reject(err);
                } else {
                    console.log(`üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
                    console.log(`üì° –Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è SubGram: /webhook/subgram`);
                    console.log(`üíö Health check: /health`);
                    console.log(`üåê Railway URL: https://kirbystars.up.railway.app`);
                    console.log(`üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: GET /health, POST /webhook/subgram`);
                    resolve(this.server);
                }
            });
        });
    }

    stop() {
        if (this.server) {
            this.server.close();
            console.log('Webhook —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
}

module.exports = WebhookHandler;
