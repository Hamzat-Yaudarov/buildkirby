/**
 * –°–∏—Å—Ç–µ–º–∞ fallback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ SubGram –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
 */

const db = require('./database');
const { subgramAPI } = require('./subgram-api');

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SubGram –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã —Å fallback –ª–æ–≥–∏–∫–æ–π
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏–ª–∏ fallback
 */
async function getSponsorsWithFallback(userId, options = {}) {
    const result = {
        success: false,
        channels: [],
        source: 'none',
        fallbackUsed: false,
        error: null,
        shouldSkipSponsors: false
    };

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram
        const settings = await db.getSubGramSettings();
        if (!settings || !settings.enabled) {
            console.log('[FALLBACK] SubGram disabled, skipping sponsors');
            result.shouldSkipSponsors = true;
            result.fallbackUsed = true;
            result.source = 'disabled';
            return result;
        }

        // 2. –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º —Å–≤–µ–∂–∏–π –∑–∞–ø—Ä–æ—Å –∫ API - –µ—Å–ª–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è 0 –∫–∞–Ω–∞–ª–æ–≤, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ
        console.log('[FALLBACK] Making fresh API request to check current status...');

        const apiParams = {
            userId: userId.toString(),
            chatId: userId.toString(),
            maxOP: settings.max_sponsors || 3,
            action: settings.default_action || 'subscribe',
            excludeChannelIds: [],
            withToken: true,
            ...options
        };

        const apiResponse = await subgramAPI.requestSponsors(apiParams);

        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        await db.logSubGramAPIRequest(
            userId,
            'fallback_fresh_check',
            apiParams,
            apiResponse.data || {},
            apiResponse.success,
            apiResponse.error
        );

        // –ï—Å–ª–∏ API —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç - –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–Ω–∞–ª—ã
        if (apiResponse.success && apiResponse.data) {
            const processedData = subgramAPI.processAPIResponse(apiResponse.data);

            console.log(`[FALLBACK] Fresh API response: status=${processedData.status}, channels=${processedData.channels.length}`);

            if (processedData.status === 'ok' && processedData.channels.length === 0) {
                console.log('[FALLBACK] API confirms no channels available - clearing old saved channels');

                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.executeQuery('DELETE FROM subgram_channels WHERE user_id = $1', [userId]);

                result.shouldSkipSponsors = true;
                result.fallbackUsed = true;
                result.source = 'api_no_channels_cleared_cache';
                return result;
            }

            if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
                console.log(`[FALLBACK] Got ${processedData.channelsToSubscribe.length} fresh channels from API`);

                // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                const uniqueChannels = new Map();
                processedData.channelsToSubscribe.forEach(ch => {
                    if (!uniqueChannels.has(ch.link)) {
                        uniqueChannels.set(ch.link, ch);
                    }
                });

                result.success = true;
                result.channels = Array.from(uniqueChannels.values());
                result.source = 'api_fresh';

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
                await db.executeQuery('DELETE FROM subgram_channels WHERE user_id = $1', [userId]);
                await db.saveSubGramChannels(userId, result.channels);

                return result;
            }
        }

        // 3. –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        console.log('[FALLBACK] API unavailable, checking for recent saved channels...');
        const savedChannels = await db.executeQuery(`
            SELECT * FROM subgram_channels
            WHERE user_id = $1
            AND created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
        `, [userId]);

        if (savedChannels.rows && savedChannels.rows.length > 0) {
            console.log(`[FALLBACK] Using ${savedChannels.rows.length} recent saved channels (API unavailable)`);

            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const uniqueChannels = new Map();
            savedChannels.rows.forEach(ch => {
                if (!uniqueChannels.has(ch.channel_link)) {
                    uniqueChannels.set(ch.channel_link, ch);
                }
            });

            result.success = true;
            result.channels = Array.from(uniqueChannels.values()).map(ch => ({
                link: ch.channel_link,
                name: ch.channel_name || '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª',
                type: 'subgram',
                needsSubscription: true
            }));
            result.source = 'saved_api_unavailable';
            return result;
        }

        // 4. –ü–æ–ª–Ω—ã–π fallback - –ø—Ä–æ–ø—É—Å–∫–∞ÔøΩÔøΩ–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        console.log('[FALLBACK] No channels available, skipping sponsors');
        result.shouldSkipSponsors = true;
        result.fallbackUsed = true;
        result.source = 'full_fallback';
        return result;

    } catch (error) {
        console.error('[FALLBACK] Critical error in sponsor fallback:', error);
        
        result.error = error.message;
        result.fallbackUsed = true;
        result.shouldSkipSponsors = true;
        result.source = 'critical_error';
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        try {
            await db.logSubGramAPIRequest(
                userId,
                'fallback_critical_error',
                options,
                {},
                false,
                error.message
            );
        } catch (logError) {
            console.error('[FALLBACK] Failed to log critical error:', logError);
        }
        
        return result;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–∞–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –†–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫–∞–∑–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
 */
async function shouldShowSponsors(userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—ÅÔøΩÔøΩ—Ä–æ–π–∫–∏
        const settings = await db.getSubGramSettings();
        if (!settings || !settings.enabled) {
            return {
                shouldShow: false,
                reason: 'disabled_in_settings',
                fallbackUsed: true
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
        const errorStats = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_requests,
                COUNT(CASE WHEN success = false THEN 1 END) as failed_requests
            FROM subgram_api_requests 
            WHERE created_at > NOW() - INTERVAL '6 hours'
            AND user_id = $1
        `, [userId]);

        if (errorStats.rows.length > 0) {
            const stats = errorStats.rows[0];
            if (stats.total_requests > 3 && stats.failed_requests / stats.total_requests > 0.8) {
                console.log(`[FALLBACK] High error rate for user ${userId}, skipping sponsors`);
                return {
                    shouldShow: false,
                    reason: 'high_error_rate',
                    fallbackUsed: true,
                    stats: stats
                };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        const sponsorResult = await getSponsorsWithFallback(userId);
        
        if (sponsorResult.shouldSkipSponsors) {
            return {
                shouldShow: false,
                reason: sponsorResult.source,
                fallbackUsed: sponsorResult.fallbackUsed,
                error: sponsorResult.error
            };
        }

        if (sponsorResult.success && sponsorResult.channels.length > 0) {
            return {
                shouldShow: true,
                reason: 'channels_available',
                channelsCount: sponsorResult.channels.length,
                source: sponsorResult.source
            };
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã
        return {
            shouldShow: false,
            reason: 'no_channels_or_error',
            fallbackUsed: true,
            error: sponsorResult.error
        };

    } catch (error) {
        console.error('[FALLBACK] Error checking if should show sponsors:', error);
        return {
            shouldShow: false,
            reason: 'check_error',
            fallbackUsed: true,
            error: error.message
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
 * @returns {string} –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏ÔøΩÔøΩ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
async function getSponsorStatusMessage() {
    try {
        const settings = await db.getSubGramSettings();
        
        let message = 'üîç **–°—Ç–∞—Ç—É—Å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã SubGram**\n\n';
        
        if (!settings) {
            message += '‚ùå **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n';
            message += '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n';
        } else {
            message += `üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n`;
            message += `‚Ä¢ –í–∫–ª—é—á–µ–Ω–æ: ${settings.enabled ? '‚úÖ' : '‚ùå'}\n`;
            message += `‚Ä¢ –ú–∞–∫—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${settings.max_sponsors}\n`;
            message += `‚Ä¢ API –∫–ª—é—á: ${settings.api_key ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n\n`;
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 24 —á–∞—Å–∞
        const requestStats = await db.executeQuery(`
            SELECT
                COUNT(*) as total_requests,
                COUNT(CASE WHEN success = true THEN 1 END) as successful_requests,
                COUNT(CASE WHEN success = false THEN 1 END) as failed_requests,
                COUNT(CASE WHEN api_status = 'ok' AND response_data::text LIKE '%–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π%' THEN 1 END) as no_advertisers_responses,
                COUNT(DISTINCT user_id) as unique_users
            FROM subgram_api_requests
            WHERE created_at > NOW() - INTERVAL '24 hours'
        `);

        if (requestStats.rows.length > 0) {
            const stats = requestStats.rows[0];
            const realErrors = stats.failed_requests - (stats.no_advertisers_responses || 0);
            const errorRate = stats.total_requests > 0 ?
                (realErrors / stats.total_requests * 100).toFixed(1) : 0;

            message += `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (24—á):**\n`;
            message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.total_requests}\n`;
            message += `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successful_requests}\n`;
            message += `‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: ${realErrors} (${errorRate}%)\n`;
            message += `‚Ä¢ "–ù–µ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π": ${stats.no_advertisers_responses || 0}\n`;
            message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.unique_users}\n\n`;

            if (errorRate > 50) {
                message += 'üö® **–ö–†–ò–¢–ò–ß–ù–û:** –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫!\n';
            } else if (errorRate > 20) {
                message += '‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:** –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫\n';
            } else if (stats.total_requests > 0) {
                message += '‚úÖ **–ù–û–†–ú–ê:** –ü—Ä–∏–µ–º–ª–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫\n';
            }

            if ((stats.no_advertisers_responses || 0) > stats.total_requests * 0.5) {
                message += 'üì≠ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø:** –í –æ—Å–Ω–æ–≤–Ω–æ–º "–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n';
            }
        }

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        const recentErrors = await db.executeQuery(`
            SELECT error_message, created_at
            FROM subgram_api_requests 
            WHERE success = false 
            AND created_at > NOW() - INTERVAL '6 hours'
            ORDER BY created_at DESC
            LIMIT 3
        `);

        if (recentErrors.rows.length > 0) {
            message += `\n‚ùå **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:**\n`;
            recentErrors.rows.forEach((error, index) => {
                const timeAgo = Math.round((Date.now() - new Date(error.created_at).getTime()) / (1000 * 60));
                message += `${index + 1}. ${error.error_message} (${timeAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)\n`;
            });
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message += '\nüîß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n';
        if (!settings?.enabled) {
            message += '‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ SubGram –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n';
        }
        if (!settings?.api_key) {
            message += '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á SubGram\n';
        }
        if (requestStats.rows[0]?.failed_requests > 5) {
            message += '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ SubGram –ø–∞–Ω–µ–ª–∏\n';
            message += '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º\n';
        }

        return message;

    } catch (error) {
        return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`;
    }
}

module.exports = {
    getSponsorsWithFallback,
    shouldShowSponsors,
    getSponsorStatusMessage
};
