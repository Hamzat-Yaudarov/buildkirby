const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Userbot Agent –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: 
 * - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—è–º–∏
 * - –í–∫–ª—é—á—ë–Ω —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º (–º–∞–∫—Å–∏–º—É–º 25 –∑–≤—ë–∑–¥ –∑–∞ —Ä–∞–∑)
 * - –õ–∏–º–∏—Ç—ã: 10 –∑–≤—ë–∑–¥/—á–∞—Å, 80 –∑–≤—ë–∑–¥/–¥–µ–Ω—å
 * - –†–∞–±–æ—Ç–∞ —Ç–æÔøΩÔøΩ—å–∫–æ –≤ 9:00-23:00 –ú–°–ö
 */

class StarsAgentIntegration {
    constructor() {
        this.agentProcess = null;
        this.isAgentRunning = false;
        this.agentDbPath = 'userbot_queue.db';
        this.agentLogPath = 'userbot-agent.log';
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
     */
    async startAgent() {
        if (this.isAgentRunning) {
            console.log('ü§ñ –ê–≥–µ–Ω—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return true;
        }

        try {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ Userbot Agent...');
            
            this.agentProcess = spawn('python3', ['userbot-agent.py'], {
                detached: true,
                stdio: ['ignore', 'pipe', 'pipe']
            });

            this.agentProcess.stdout.on('data', (data) => {
                console.log(`[AGENT] ${data.toString().trim()}`);
            });

            this.agentProcess.stderr.on('data', (data) => {
                console.error(`[AGENT ERROR] ${data.toString().trim()}`);
            });

            this.agentProcess.on('close', (code) => {
                console.log(`üõë –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
                this.isAgentRunning = false;
                this.agentProcess = null;
            });

            this.agentProcess.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞:', error);
                this.isAgentRunning = false;
            });

            this.isAgentRunning = true;
            console.log('‚úÖ Userbot Agent –∑–∞–ø—É—â–µ–Ω');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞:', error);
            return false;
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞
     */
    async stopAgent() {
        if (this.agentProcess) {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Userbot Agent...');
            this.agentProcess.kill('SIGTERM');
            
            setTimeout(() => {
                if (this.agentProcess) {
                    this.agentProcess.kill('SIGKILL');
                }
            }, 5000);

            this.isAgentRunning = false;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–≤—ë–∑–¥ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞
     */
    async addStarsJob(userId, amount, withdrawalType = 'stars') {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!userId || !amount || amount <= 0) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            if (amount > 200) {
                console.warn(`‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Å—É–º–º–∞: –º–∞–∫—Å–∏–º—É–º 200 –∑–≤—ë–∑–¥ –∑–∞ —Ä–∞–∑, –∑–∞–ø—Ä–æ—à–µ–Ω–æ ${amount}`);
                throw new Error(`–°—É–º–º–∞ ${amount} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç (200 –∑–≤—ë–∑–¥)`);
            }

            console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞: ${amount} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ Python –∞–≥–µ–Ω—Ç
            const { execSync } = require('child_process');
            const command = `python3 -c "
import sqlite3
import sys

conn = sqlite3.connect('${this.agentDbPath}')
cursor = conn.cursor()

cursor.execute('''
    INSERT INTO withdrawal_queue (user_id, amount, withdrawal_type)
    VALUES (?, ?, ?)
''', (${userId}, ${amount}, '${withdrawalType}'))

conn.commit()
conn.close()
print('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞')
"`;

            execSync(command);
            
            console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${amount} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞
     */
    async getAgentStats() {
        try {
            const { execSync } = require('child_process');
            const command = `python3 -c "
import sqlite3
import json
from datetime import datetime

conn = sqlite3.connect('${this.agentDbPath}')
cursor = conn.cursor()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
cursor.execute('SELECT COUNT(*) FROM withdrawal_queue WHERE status = ?', ('pending',))
pending = cursor.fetchone()[0]

cursor.execute('SELECT COUNT(*) FROM withdrawal_queue WHERE status = ?', ('completed',))
completed = cursor.fetchone()[0]

cursor.execute('SELECT COUNT(*) FROM withdrawal_queue WHERE status = ?', ('failed',))
failed = cursor.fetchone()[0]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
today = datetime.now().date()
cursor.execute('SELECT stars_sent, errors_count FROM stats_log WHERE date = ?', (today,))
result = cursor.fetchone()

stats = {
    'queue_pending': pending,
    'queue_completed': completed,
    'queue_failed': failed,
    'stars_sent_today': result[0] if result else 0,
    'errors_today': result[1] if result else 0,
    'agent_running': True,
    'current_time': datetime.now().isoformat()
}

conn.close()
print(json.dumps(stats))
"`;

            const output = execSync(command, { encoding: 'utf8' });
            const stats = JSON.parse(output.trim());
            
            return {
                success: true,
                stats: {
                    ...stats,
                    agent_running: this.isAgentRunning
                }
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞:', error);
            return {
                success: false,
                error: error.message,
                stats: {
                    agent_running: this.isAgentRunning,
                    queue_pending: 0,
                    queue_completed: 0,
                    queue_failed: 0,
                    stars_sent_today: 0,
                    errors_today: 0
                }
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞
     */
    async getAgentLogs(lines = 50) {
        try {
            if (!fs.existsSync(this.agentLogPath)) {
                return { success: false, logs: '–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }

            const { execSync } = require('child_process');
            const logs = execSync(`tail -n ${lines} ${this.agentLogPath}`, { encoding: 'utf8' });
            
            return { success: true, logs };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞:', error);
            return { success: false, logs: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤' };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
     */
    async checkAgentHealth() {
        try {
            const stats = await this.getAgentStats();
            const logs = await this.getAgentLogs(10);
            
            return {
                agent_running: this.isAgentRunning,
                stats_available: stats.success,
                logs_available: logs.success,
                last_activity: new Date().toISOString(),
                health_status: this.isAgentRunning ? 'healthy' : 'stopped'
            };

        } catch (error) {
            return {
                agent_running: false,
                health_status: 'error',
                error: error.message
            };
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
     */
    async sendStarsSafely(userId, amount, withdrawalType = 'stars') {
        try {
            console.log(`üåü –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ${amount} –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
            if (!this.isAgentRunning) {
                console.log('üöÄ –ê–≥–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å...');
                const started = await this.startAgent();
                if (!started) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç');
                }
                
                // –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
                await new Promise(resolve => setTimeout(resolve, 5000));
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            const statsResult = await this.getAgentStats();
            if (statsResult.success) {
                const { stats } = statsResult;
                
                if (stats.queue_pending > 10) {
                    throw new Error(`–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞: ${stats.queue_pending} –∑–∞–¥–∞–Ω–∏–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏`);
                }
                
                if (stats.stars_sent_today > 60) {
                    throw new Error(`–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—á—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω: ${stats.stars_sent_today}/80 –∑–≤—ë–∑–¥`);
                }
            }

            // –î–æ–±–∞ÔøΩÔøΩ–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            const success = await this.addStarsJob(userId, amount, withdrawalType);
            if (!success) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å');
            }

            console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ${amount} –∑–≤—ë–∑–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞`);
            return { success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏' };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥:', error);
            return { success: false, error: error.message };
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const starsAgent = new StarsAgentIntegration();

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
(async () => {
    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stars Agent Integration...');
    
    // –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    setTimeout(async () => {
        try {
            await starsAgent.startAgent();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞:', error);
        }
    }, 10000);
})();

module.exports = starsAgent;
