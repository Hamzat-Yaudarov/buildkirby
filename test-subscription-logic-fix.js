const db = require('./database');

async function testSubscriptionLogicFix() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–û–î–ü–ò–°–û–ö');
    console.log('=' .repeat(50));

    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.initializeDatabase();

        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testUserId = 999999999;
        const testUserName = 'TestUser';
        const validChannelId = '@test_valid_channel';
        const invalidChannelId = '@test_invalid_channel';
        const anotherValidChannelId = '@test_valid_channel_2';

        console.log('\n1Ô∏è‚É£ –ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
        console.log('-'.repeat(30));

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.executeQuery(`
            INSERT INTO users (id, username, first_name, captcha_passed, subscription_notified, is_subscribed)
            VALUES ($1, $2, $3, TRUE, FALSE, FALSE)
            ON CONFLICT (id) DO UPDATE SET
                username = $2,
                first_name = $3,
                captcha_passed = TRUE,
                subscription_notified = FALSE,
                is_subscribed = FALSE
        `, [testUserId, testUserName, testUserName]);

        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        await db.executeQuery('DELETE FROM required_channels WHERE channel_id LIKE $1', ['@test_%']);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–Ω–∞–ª
        await db.executeQuery(`
            INSERT INTO required_channels (channel_id, channel_name, is_active)
            VALUES ($1, $2, TRUE)
        `, [validChannelId, '–¢–µ—Å—Ç–æ–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–Ω–∞–ª']);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–Ω–∞–ª (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ)
        await db.executeQuery(`
            INSERT INTO required_channels (channel_id, channel_name, is_active)
            VALUES ($1, $2, TRUE)
        `, [invalidChannelId, '–¢–µ—Å—Ç–æ–≤—ã–π –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–Ω–∞–ª']);

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã:');
        console.log(`   - ${validChannelId} (–≤–∞–ª–∏–¥–Ω—ã–π)`);
        console.log(`   - ${invalidChannelId} (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π - –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞)`);

        console.log('\n2Ô∏è‚É£ –¢–ï–°–¢: –ü–ï–†–í–´–ô /start');
        console.log('-'.repeat(30));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å FALSE)
        const initialNotified = await db.isSubscriptionNotified(testUserId);
        console.log(`üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ /start: ${initialNotified}`);

        console.log('‚úÖ –û–ñ–ò–î–ê–ï–¢–°–Ø: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º /start –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö');
        console.log('   (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã)');

        console.log('\n3Ô∏è‚É£ –¢–ï–°–¢: –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –ö–ê–ù–ê–õ–û–í');
        console.log('-'.repeat(30));

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–æ–≤
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∫–∞–Ω–∞–ª–æ–≤...');
        console.log('‚úÖ –û–ñ–ò–î–ê–ï–¢–°–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æÔøΩÔøΩ–µ—Ä—è—é—Ç—Å—è, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏');
        console.log('   (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)');

        console.log('\n4Ô∏è‚É£ –¢–ï–°–¢: –ü–û–í–¢–û–†–ù–´–ô /start');
        console.log('-'.repeat(30));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await db.setSubscriptionNotified(testUserId, true);
        const afterSetNotified = await db.isSubscriptionNotified(testUserId);
        console.log(`üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${afterSetNotified}`);

        console.log('‚úÖ –û–ñ–ò–î–ê–ï–¢–°–Ø: –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∏');
        console.log('   - –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã ‚Üí –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
        console.log('   - –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö');

        console.log('\n5Ô∏è‚É£ –¢–ï–°–¢: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ö–ê–ù–ê–õ–ê');
        console.log('-'.repeat(30));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–æ —Å–±—Ä–æ—Å–∞
        const usersWithNotificationsBefore = await db.executeQuery(
            'SELECT COUNT(*) as count FROM users WHERE subscription_notified = TRUE'
        );
        console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${usersWithNotificationsBefore.rows[0].count}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª (–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞)
        await db.executeQuery(`
            INSERT INTO required_channels (channel_id, channel_name, is_active)
            VALUES ($1, $2, TRUE)
        `, [anotherValidChannelId, '–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª']);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const resetCount = await db.resetAllSubscriptionNotifications();
        console.log(`üîÑ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${resetCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        const afterResetNotified = await db.isSubscriptionNotified(testUserId);
        console.log(`üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: ${afterResetNotified}`);

        console.log('‚úÖ –û–ñ–ò–î–ê–ï–¢–°–Ø: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—ÉÔøΩÔøΩ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        console.log('   (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–Ω–æ–≤–∞ —É–≤–∏–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º /start)');

        console.log('\n6Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('-'.repeat(30));

        const finalStats = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(*) FILTER (WHERE subscription_notified = TRUE) as notified_users,
                COUNT(*) FILTER (WHERE is_subscribed = TRUE) as subscribed_users
            FROM users
        `);

        const channels = await db.executeQuery(`
            SELECT COUNT(*) as count FROM required_channels WHERE is_active = TRUE
        `);

        console.log('üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalStats.rows[0].total_users}`);
        console.log(`   - –° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: ${finalStats.rows[0].notified_users}`);
        console.log(`   - –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalStats.rows[0].subscribed_users}`);
        console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channels.rows[0].count}`);

        console.log('\n‚úÖ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù');
        console.log('\nüìù –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
        console.log('   1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º /start –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö');
        console.log('   2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏');
        console.log('   3. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∏');
        console.log('   4. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –∞–¥–º–∏–Ω–æ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—Å–µ—Ö');

        console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('   1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏');
        console.log('   2. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /add_channel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—Å–∞');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏');

        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•');
        await db.executeQuery('DELETE FROM required_channels WHERE channel_id LIKE $1', ['@test_%']);
        await db.executeQuery('DELETE FROM users WHERE id = $1', [testUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

    } catch (error) {
        console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testSubscriptionLogicFix()
        .then(() => {
            console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–û–ô:', error);
            process.exit(1);
        });
}

module.exports = { testSubscriptionLogicFix };
