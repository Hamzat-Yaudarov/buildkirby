#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
 */

const db = require('./database');

async function testSubscriptionLogic() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
        
        const testUserId = 123456789;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const qualification = await db.checkReferralQualification(testUserId);
        console.log(`   –ö–≤–∞–ª–∏—Ñ–∏–∫–∞ÔøΩÔøΩ–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}:`, qualification);
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram:');
        
        const subgramSettings = await db.getSubGramSettings();
        console.log('   SubGram –≤–∫–ª—é—á–µ–Ω:', subgramSettings?.enabled || false);
        console.log('   –ú–∞–∫—Å–∏–º—É–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:', subgramSettings?.max_sponsors || 3);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
        console.log('\n3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        
        const stats = await db.executeQuery(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(CASE WHEN captcha_passed = TRUE THEN 1 END) as users_with_captcha,
                COUNT(CASE WHEN is_subscribed = TRUE THEN 1 END) as subscribed_users,
                COUNT(CASE WHEN referral_processed = TRUE THEN 1 END) as processed_referrals
            FROM users
        `);
        
        const s = stats.rows[0];
        console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${s.total_users}`);
        console.log(`   –ü—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: ${s.users_with_captcha}`);
        console.log(`   –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã: ${s.subscribed_users}`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${s.processed_referrals}`);
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ SubGram –∑–∞–ø—Ä–æ—Å—ã
        console.log('\n4Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ SubGram API –∑–∞–ø—Ä–æ—Å—ã:');
        
        const apiRequests = await db.executeQuery(`
            SELECT 
                user_id,
                request_type,
                success,
                api_status,
                created_at
            FROM subgram_api_requests 
            ORDER BY created_at DESC 
            LIMIT 5
        `);
        
        if (apiRequests.rows.length > 0) {
            apiRequests.rows.forEach((req, index) => {
                console.log(`   ${index + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user_id}: ${req.request_type} - ${req.success ? '—É—Å–ø–µ—Ö' : '–æ—à–∏–±–∫–∞'} (${req.api_status})`);
            });
        } else {
            console.log('   –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SubGram API');
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
        console.log('   ‚úÖ –î–≤–æ–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (–¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ /start)');
        console.log('   ‚úÖ –ö–Ω–æ–ø–∫–∞ ÔøΩÔøΩ—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (—É–±—Ä–∞–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)');
        console.log('   ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç is_subscribed)');
        console.log('   ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫: —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è checkUserBotAccess)');
        
        console.log('\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        await db.closeConnection();
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSubscriptionLogic();
