const axios = require('axios');
const config = require('./config');

class SubGram {
    static async checkSubscription(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
        const requestData = {
            UserId: userId.toString(),
            ChatId: chatId.toString(),
            first_name: firstName,
            language_code: languageCode,
            Premium: isPremium,
            MaxOP: 3,
            action: 'subscribe'
        };

        console.log(`üåê SubGram checkSubscription –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
            userId,
            chatId,
            firstName: firstName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            languageCode,
            isPremium,
            timestamp: new Date().toISOString()
        });

        const startTime = Date.now();
        try {
            const response = await axios.post('https://api.subgram.ru/request-op/', requestData, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            const responseTime = Date.now() - startTime;
            console.log(`‚úÖ SubGram checkSubscription –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${responseTime}ms):`, {
                status: response.status,
                dataStatus: response.data?.status,
                linksCount: response.data?.links?.length || 0,
                totalFixedLink: response.data?.total_fixed_link || 0,
                hasSponsors: !!response.data?.additional?.sponsors,
                sponsorsCount: response.data?.additional?.sponsors?.length || 0
            });

            // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (response.data?.total_fixed_link > 0 && (!response.data?.links || response.data.links.length === 0)) {
                console.log(`üö® –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! total_fixed_link=${response.data.total_fixed_link} –Ω–æ links=${response.data?.links?.length || 0}`);
                console.log(`üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç SubGram:`, JSON.stringify(response.data, null, 2));
            }

            return response.data;
        } catch (error) {
            const responseTime = Date.now() - startTime;

            if (error.response && error.response.status === 404) {
                // 404 –æ—Ç SubGram –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å "–Ω–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                const responseData = error.response.data;
                if (responseData && responseData.message === '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                    console.log(`‚ÑπÔ∏è SubGram: –Ω–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                    return {
                        status: 'ok',
                        code: 200,
                        message: '–ù–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        total_fixed_link: 0
                    };
                }
            }

            console.error(`‚ùå SubGram checkSubscription –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${responseTime}ms):`);

            if (error.response) {
                // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
                console.error(`  üìä –°—Ç–∞—Ç—É—Å: ${error.response.status} - ${error.response.statusText}`);
                console.error(`  üìÑ –î–∞–Ω–Ω—ã–µ:`, error.response.data);
                console.error(`  üîó URL:`, error.config?.url);
                console.error(`  üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, error.config?.headers);
            } else if (error.request) {
                // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
                console.error('  üåê –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ SubGram');
                console.error('  ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∏–ª–∏ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
            } else {
                // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                console.error('  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
            }

            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º', error: error.message };
        }
    }

    static async getTaskChannels(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
        const requestData = {
            UserId: userId.toString(),
            ChatId: chatId.toString(),
            first_name: firstName,
            language_code: languageCode,
            Premium: isPremium,
            MaxOP: 10,
            action: 'newtask'
        };

        console.log(`üìã SubGram getTaskChannels –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
            userId,
            chatId,
            action: 'newtask',
            maxOP: 1,
            timestamp: new Date().toISOString()
        });

        const startTime = Date.now();
        try {
            const response = await axios.post('https://api.subgram.ru/request-op/', requestData, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            const responseTime = Date.now() - startTime;
            console.log(`‚úÖ SubGram getTaskChannels –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${responseTime}ms):`, {
                status: response.status,
                dataStatus: response.data?.status,
                linksCount: response.data?.links?.length || 0,
                totalFixedLink: response.data?.total_fixed_link || 0,
                hasSponsors: !!response.data?.additional?.sponsors
            });

            // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (response.data?.total_fixed_link > 0 && (!response.data?.links || response.data.links.length === 0)) {
                console.log(`üö® getTaskChannels –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! total_fixed_link=${response.data.total_fixed_link} –Ω–æ links=${response.data?.links?.length || 0}`);
                console.log(`üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:`, JSON.stringify(response.data, null, 2));
            }

            return response.data;
        } catch (error) {
            const responseTime = Date.now() - startTime;

            if (error.response && error.response.status === 404) {
                // 404 –æ—Ç SubGram –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                const responseData = error.response.data;
                if (responseData && responseData.message === '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                    console.log(`‚ÑπÔ∏è SubGram getTaskChannels: –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                    return {
                        status: 'ok',
                        code: 200,
                        message: '–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        links: [],
                        total_fixed_link: 0
                    };
                }
            }

            console.error(`‚ùå SubGram getTaskChannels –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${responseTime}ms):`);

            if (error.response) {
                console.error(`  üìä –°—Ç–∞—Ç—É—Å: ${error.response.status} - ${error.response.statusText}`);
                console.error(`  üìÑ –î–∞–Ω–Ω—ã–µ:`, error.response.data);
            } else if (error.request) {
                console.error('  üåê –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ SubGram');
            } else {
                console.error('  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
            }

            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º', error: error.message };
        }
    }

    static async getChannelLinks(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
        const requestData = {
            UserId: userId.toString(),
            ChatId: chatId.toString(),
            first_name: firstName,
            language_code: languageCode,
            Premium: isPremium,
            MaxOP: 10, // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—ÉÔøΩÔøΩ–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
            action: 'subscribe' // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π action
        };

        console.log(`üîó SubGram getChannelLinks –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
            userId,
            chatId,
            maxOP: 10,
            timestamp: new Date().toISOString()
        });

        const startTime = Date.now();
        try {
            const response = await axios.post('https://api.subgram.ru/request-op/', requestData, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            const responseTime = Date.now() - startTime;
            console.log(`‚úÖ SubGram getChannelLinks –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${responseTime}ms):`, {
                status: response.status,
                dataStatus: response.data?.status,
                linksCount: response.data?.links?.length || 0,
                totalFixedLink: response.data?.total_fixed_link || 0
            });

            // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if (response.data?.total_fixed_link > 0 && (!response.data?.links || response.data.links.length === 0)) {
                console.log(`üö® getChannelLinks –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! total_fixed_link=${response.data.total_fixed_link} –Ω–æ links=${response.data?.links?.length || 0}`);
                console.log(`üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:`, JSON.stringify(response.data, null, 2));
            }

            return response.data;
        } catch (error) {
            const responseTime = Date.now() - startTime;

            if (error.response && error.response.status === 404) {
                // 404 –æ—Ç SubGram –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                const responseData = error.response.data;
                if (responseData && responseData.message === '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                    console.log(`‚ÑπÔ∏è SubGram getChannelLinks: –Ω–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª—è ${userId}`);
                    return {
                        status: 'ok',
                        code: 200,
                        message: '–ù–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        links: [],
                        total_fixed_link: 0
                    };
                }
            }

            console.error(`‚ùå SubGram getChannelLinks –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (${responseTime}ms):`);

            if (error.response) {
                console.error(`  üìä –°—Ç–∞—Ç—É—Å: ${error.response.status} - ${error.response.statusText}`);
            } else if (error.request) {
                console.error('  üåê –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ SubGram');
            } else {
                console.error('  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
            }

            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º', error: error.message };
        }
    }

    static async checkUserSubscriptions(userId, links = []) {
        try {
            const response = await axios.post('https://api.subgram.ru/get-user-subscriptions', {
                user_id: userId,
                links: links
            }, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            return response.data;
        } catch (error) {
            if (error.response) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µÔøΩÔøΩ–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.response.status} - ${error.response.statusText}`);
            } else if (error.request) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            }
            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º' };
        }
    }

    static formatSubscriptionMessage(links, sponsors = []) {
        if (!links || links.length === 0) {
            return '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!';
        }

        let message = 'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n';

        for (let i = 0; i < links.length; i++) {
            const link = links[i];
            const sponsor = sponsors[i];
            const channelName = sponsor?.resource_name || `–ö–∞–Ω–∞–ª ${i + 1}`;
            message += `${i + 1}. ${channelName}\n${link}\n\n`;
        }

        message += '‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';
        return message;
    }

    static createSubscriptionKeyboard(links) {
        const keyboard = {
            inline_keyboard: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        links.forEach((link, index) => {
            keyboard.inline_keyboard.push([{
                text: `üì¢ –ö–∞–Ω–∞–ª ${index + 1}`,
                url: link
            }]);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard.inline_keyboard.push([{
            text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
            callback_data: 'check_subscription'
        }]);

        return keyboard;
    }

    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∫–æ–≥–¥–∞ –∑–Ω–∞–µ–º —á—Ç–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
    static async getLinksAggressively(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
        console.log(`üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
        const strategies = [
            // 1. –° MaxOP = 1 –∏ action = 'subscribe'
            {
                name: 'MaxOP=1,subscribe',
                data: {
                    UserId: userId.toString(),
                    ChatId: chatId.toString(),
                    first_name: firstName,
                    language_code: languageCode,
                    Premium: isPremium,
                    MaxOP: 1,
                    action: 'subscribe'
                }
            },
            // 2. –° MaxOP = 5 –∏ action = 'subscribe'
            {
                name: 'MaxOP=5,subscribe',
                data: {
                    UserId: userId.toString(),
                    ChatId: chatId.toString(),
                    first_name: firstName,
                    language_code: languageCode,
                    Premium: isPremium,
                    MaxOP: 5,
                    action: 'subscribe'
                }
            },
            // 3. –° MaxOP = 10 –∏ action = 'subscribe'
            {
                name: 'MaxOP=10,subscribe',
                data: {
                    UserId: userId.toString(),
                    ChatId: chatId.toString(),
                    first_name: firstName,
                    language_code: languageCode,
                    Premium: isPremium,
                    MaxOP: 10,
                    action: 'subscribe'
                }
            },
            // 4. –° MaxOP = 1 –∏ action = 'newtask'
            {
                name: 'MaxOP=1,newtask',
                data: {
                    UserId: userId.toString(),
                    ChatId: chatId.toString(),
                    first_name: firstName,
                    language_code: languageCode,
                    Premium: isPremium,
                    MaxOP: 1,
                    action: 'newtask'
                }
            },
            // 5. –° MaxOP = 10 –∏ action = 'newtask'
            {
                name: 'MaxOP=10,newtask',
                data: {
                    UserId: userId.toString(),
                    ChatId: chatId.toString(),
                    first_name: firstName,
                    language_code: languageCode,
                    Premium: isPremium,
                    MaxOP: 10,
                    action: 'newtask'
                }
            },
            // 6. –ë–µ–∑ action (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            {
                name: 'MaxOP=5,no-action',
                data: {
                    UserId: userId.toString(),
                    ChatId: chatId.toString(),
                    first_name: firstName,
                    language_code: languageCode,
                    Premium: isPremium,
                    MaxOP: 5
                }
            }
        ];

        for (let i = 0; i < strategies.length; i++) {
            const strategy = strategies[i];
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${strategies.length}: ${strategy.name}`);

            try {
                const response = await axios.post('https://api.subgram.ru/request-op/', strategy.data, {
                    headers: {
                        'Auth': config.SUBGRAM_API_KEY,
                        'Content-Type': 'application/json'
                    },
                    timeout: 10000
                });

                console.log(`üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è ${strategy.name} –æ—Ç–≤–µ—Ç:`, {
                    status: response.data?.status,
                    linksCount: response.data?.links?.length || 0,
                    totalFixed: response.data?.total_fixed_link || 0,
                    hasSponsors: !!response.data?.additional?.sponsors
                });

                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                if (response.data?.links && response.data.links.length > 0) {
                    console.log(`‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è ${strategy.name} –¥–∞–ª–∞ ${response.data.links.length} —Å—Å—ã–ª–æ–∫!`);
                    return response.data;
                }

            } catch (error) {
                console.log(`‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è ${strategy.name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:`, error.response?.status || error.message);
            }
        }

        console.log(`üòû –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return null;
    }
}

module.exports = SubGram;
