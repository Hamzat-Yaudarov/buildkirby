const axios = require('axios');
const config = require('./config');

class SubGram {
    static async checkSubscription(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
        try {
            const response = await axios.post('https://api.subgram.ru/request-op/', {
                UserId: userId.toString(),
                ChatId: chatId.toString(),
                first_name: firstName,
                language_code: languageCode,
                Premium: isPremium,
                MaxOP: 3,
                action: 'subscribe'
            }, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            return response.data;
        } catch (error) {
            if (error.response) {
                // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ SubGram: ${error.response.status} - ${error.response.statusText}`);
            } else if (error.request) {
                // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ SubGram: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ SubGram:', error.message);
            }
            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º' };
        }
    }

    static async getTaskChannels(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
        try {
            const response = await axios.post('https://api.subgram.ru/request-op/', {
                UserId: userId.toString(),
                ChatId: chatId.toString(),
                first_name: firstName,
                language_code: languageCode,
                Premium: isPremium,
                MaxOP: 1,
                action: 'newtask'
            }, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            return response.data;
        } catch (error) {
            if (error.response) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π SubGram: ${error.response.status} - ${error.response.statusText}`);
            } else if (error.request) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π SubGram: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π SubGram:', error.message);
            }
            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º' };
        }
    }

    static async checkUserSubscriptions(userId, links = []) {
        try {
            const response = await axios.post('https://api.subgram.ru/get-user-subscriptions', {
                user_id: userId,
                links: links
            }, {
                headers: {
                    'Auth': config.SUBGRAM_API_KEY,
                    'Content-Type': 'application/json'
                },
                timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            return response.data;
        } catch (error) {
            if (error.response) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.response.status} - ${error.response.statusText}`);
            } else if (error.request) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            } else {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            }
            return { status: 'error', message: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–∏—Å–æ–º' };
        }
    }

    static formatSubscriptionMessage(links, sponsors = []) {
        if (!links || links.length === 0) {
            return '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!';
        }

        let message = 'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n';

        for (let i = 0; i < links.length; i++) {
            const link = links[i];
            const sponsor = sponsors[i];
            const channelName = sponsor?.resource_name || `–ö–∞–Ω–∞–ª ${i + 1}`;
            message += `${i + 1}. ${channelName}\n${link}\n\n`;
        }

        message += '‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';
        return message;
    }

    static createSubscriptionKeyboard(links) {
        const keyboard = {
            inline_keyboard: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        links.forEach((link, index) => {
            keyboard.inline_keyboard.push([{
                text: `üì¢ –ö–∞–Ω–∞–ª ${index + 1}`,
                url: link
            }]);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard.inline_keyboard.push([{
            text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
            callback_data: 'check_subscription'
        }]);

        return keyboard;
    }
}

module.exports = SubGram;
