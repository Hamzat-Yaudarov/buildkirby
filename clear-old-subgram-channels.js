/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–∫–∞–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */

const db = require('./database');

async function clearOldSubGramChannels() {
    console.log('üßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –°–ü–û–ù–°–û–†–°–ö–ò–• –ö–ê–ù–ê–õ–û–í\n');

    try {
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞\n');

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...');
        const allChannels = await db.executeQuery(`
            SELECT COUNT(*) as total,
                   COUNT(CASE WHEN created_at > NOW() - INTERVAL '1 hour' THEN 1 END) as recent,
                   COUNT(CASE WHEN created_at <= NOW() - INTERVAL '1 hour' THEN 1 END) as old,
                   COUNT(DISTINCT user_id) as unique_users
            FROM subgram_channels
        `);

        const stats = allChannels.rows[0];
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:`);
        console.log(`‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${stats.total}`);
        console.log(`‚Ä¢ –°–≤–µ–∂–∏—Ö (<1—á): ${stats.recent}`);
        console.log(`‚Ä¢ –°—Ç–∞—Ä—ã—Ö (>1—á): ${stats.old}`);
        console.log(`‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.unique_users}`);

        if (parseInt(stats.total) === 0) {
            console.log('\n‚úÖ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ—Ç!');
            return;
        }

        // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
        if (parseInt(stats.old) > 0) {
            console.log(`\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã):`);
            const oldExamples = await db.executeQuery(`
                SELECT user_id, channel_name, channel_link, 
                       DATE_PART('hour', NOW() - created_at) as hours_ago
                FROM subgram_channels 
                WHERE created_at <= NOW() - INTERVAL '1 hour'
                ORDER BY created_at DESC
                LIMIT 5
            `);

            oldExamples.rows.forEach((ch, i) => {
                console.log(`${i+1}. User ${ch.user_id}: ${ch.channel_name}`);
                console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${Math.round(ch.hours_ago)} —á–∞—Å–æ–≤`);
            });
        }

        if (parseInt(stats.recent) > 0) {
            console.log(`\nüìå –ü—Ä–∏–º–µ—Ä—ã —Å–≤–µ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (–æ—Å—Ç–∞–Ω—É—Ç—Å—è):`);
            const recentExamples = await db.executeQuery(`
                SELECT user_id, channel_name, channel_link,
                       DATE_PART('minute', NOW() - created_at) as minutes_ago
                FROM subgram_channels 
                WHERE created_at > NOW() - INTERVAL '1 hour'
                ORDER BY created_at DESC
                LIMIT 3
            `);

            recentExamples.rows.forEach((ch, i) => {
                console.log(`${i+1}. User ${ch.user_id}: ${ch.channel_name}`);
                console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${Math.round(ch.minutes_ago)} –º–∏–Ω—É—Ç`);
            });
        }

        // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        console.log(`\n2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...`);
        const deleteResult = await db.executeQuery(`
            DELETE FROM subgram_channels 
            WHERE created_at <= NOW() - INTERVAL '1 hour'
        `);

        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`);

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const afterStats = await db.executeQuery(`
            SELECT COUNT(*) as total,
                   COUNT(DISTINCT user_id) as unique_users
            FROM subgram_channels
        `);

        const afterStatsRow = afterStats.rows[0];
        console.log(`\nüìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:`);
        console.log(`‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∫–∞–Ω–∞–ª–æ–≤: ${afterStatsRow.total}`);
        console.log(`‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${afterStatsRow.unique_users}`);

        // 5. –†–µ–∑—é–º–µ
        console.log('\n3Ô∏è‚É£ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ß–ò–°–¢–ö–ò:');
        console.log('==========================================');
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${deleteResult.rowCount}`);
        console.log(`‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö: ${afterStatsRow.total}`);
        console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∫–∞–∑–æ–º —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Ä–µ—à–µ–Ω–∞!');

        console.log('\nüéØ –≠–§–§–ï–ö–¢:');
        console.log('‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —É–≤–∏–¥—è—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–∞–Ω–∞–ª—ã');
        console.log('‚Ä¢ –ë—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ');
        console.log('‚Ä¢ Fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

        // 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (process.argv.includes('--clear-all')) {
            console.log('\n‚ö†Ô∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê (--clear-all —Ñ–ª–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω)');
            const clearAllResult = await db.executeQuery('DELETE FROM subgram_channels');
            console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ –í–°–ï –∫–∞–Ω–∞–ª—ã: ${clearAllResult.rowCount}`);
        }

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
        console.error(error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

if (require.main === module) {
    clearOldSubGramChannels();
}

module.exports = { clearOldSubGramChannels };
