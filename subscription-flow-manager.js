/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—ç—Ç–∞–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–¢–û–õ–¨–ö–û SubGram)
 * –£–î–ê–õ–ï–ù–ê –ª–æ–≥–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å SubGram —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏
 */

const db = require('./database');
const { subgramAPI } = require('./subgram-api');

/**
 * –≠—Ç–∞–ø—ã –ø–æ–¥–ø–∏—Å–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
 */
const SUBSCRIPTION_STAGES = {
    SPONSORS: 'sponsors',      // –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –æ—Ç SubGram
    COMPLETED: 'completed'     // –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¢–û–õ–¨–ö–û SubGram)
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∫–∞–Ω–∞–ª–∞–º–∏
 */
async function getCurrentSubscriptionStage(userId) {
    try {
        console.log(`[FLOW] Getting SubGram channels for user ${userId}`);

        // –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –æ—Ç SubGram
        const sponsorChannels = await getSponsorChannels(userId);

        console.log(`[FLOW] Found ${sponsorChannels.length} SubGram sponsor channels`);

        return {
            sponsorChannels: sponsorChannels,
            stage: null,
            sponsorStatus: null,
            allCompleted: false,
            nextAction: null,
            channelsToShow: []
        };

    } catch (error) {
        console.error('[FLOW] Error getting channels:', error);
        return {
            sponsorChannels: [],
            stage: SUBSCRIPTION_STAGES.SPONSORS,
            nextAction: 'subscribe_sponsors',
            allCompleted: false,
            channelsToShow: [],
            error: error.message
        };
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –æ—Ç SubGram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π fallback –ª–æ–≥–∏–∫–æ–π
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Array} –°–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
 */
async function getSponsorChannels(userId) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é fallback —Å–∏—Å—Ç–µ–º—É
        const { getSponsorsWithFallback } = require('./subgram-fallback-handler');
        const sponsorResult = await getSponsorsWithFallback(userId);

        console.log(`[FLOW] Sponsor fallback result: success=${sponsorResult.success}, channels=${sponsorResult.channels.length}, source=${sponsorResult.source}, shouldSkip=${sponsorResult.shouldSkipSponsors}`);

        if (sponsorResult.shouldSkipSponsors) {
            console.log(`[FLOW] Skipping sponsors: ${sponsorResult.source}`);
            return [];
        }

        if (sponsorResult.success && sponsorResult.channels.length > 0) {
            console.log(`[FLOW] Got ${sponsorResult.channels.length} sponsor channels from ${sponsorResult.source}`);

            return sponsorResult.channels.map(ch => ({
                id: ch.link,
                name: ch.name || '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª',
                link: ch.link,
                type: 'subgram',
                subscribed: false
            }));
        }

        console.log('[FLOW] Sponsor channels unavailable');
        return [];

    } catch (error) {
        console.error('[FLOW] Error getting sponsor channels:', error);
        return [];
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Array} channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
 */
async function checkChannelSubscriptionsWithBot(bot, userId, channels) {
    for (const channel of channels) {
        try {
            let channelToCheck = channel.id;

            console.log(`[FLOW] Checking subscription for channel: ${channel.id} (type: ${channel.type})`);

            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ SubGram
            if (channel.type === 'subgram' && channel.id.includes('t.me/')) {
                const match = channel.id.match(/t\.me\/([^\/\?]+)/);
                if (match) {
                    channelToCheck = '@' + match[1];
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (+–∫–æ–¥)
            else if (channel.id.includes('t.me/+')) {
                // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ getChatMember
                console.log(`[FLOW] Cannot check private link ${channel.id} - marking as subscribed`);
                channel.subscribed = true;
                continue;
            }

            console.log(`[FLOW] Checking membership: user ${userId} in channel ${channelToCheck}`);
            const member = await bot.getChatMember(channelToCheck, userId);
            channel.subscribed = !(member.status === 'left' || member.status === 'kicked');
            console.log(`[FLOW] Membership result: ${member.status} -> subscribed: ${channel.subscribed}`);
            
        } catch (error) {
            console.log(`[FLOW] Cannot check channel ${channel.id}: ${error.message}`);
            // –î–ª—è —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
            channel.subscribed = true;
        }
    }
}

/**
 * –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
 * @param {Array} channels - –ú–∞—Å—Å–∏–≤ –∫–∞–Ω–∞–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 * @returns {Object} –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫
 */
function calculateSubscriptionStatus(channels) {
    if (channels.length === 0) {
        return { allSubscribed: true, subscribedCount: 0, totalCount: 0 };
    }

    const subscribedCount = channels.filter(ch => ch.subscribed).length;
    const totalCount = channels.length;

    return {
        allSubscribed: subscribedCount === totalCount,
        subscribedCount: subscribedCount,
        totalCount: totalCount
    };
}

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {Object} stageInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–ø–µ
 * @returns {Object} –°–æ–æ–±—â–µ–Ω–∏–µ –∏ ÔøΩÔøΩ–Ω–æ–ø–∫–∏
 */
function formatStageMessage(stageInfo) {
    const { stage, channelsToShow, allCompleted } = stageInfo;

    console.log(`[FLOW] Formatting stage message: stage=${stage}, channelsToShow=${channelsToShow?.length || 0}, allCompleted=${allCompleted}`);

    if (allCompleted) {
        return {
            message: '‚úÖ **–û—Ç–ª–∏—á–Ω–æ!**\n\n–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!\n\nüéâ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
            buttons: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
    if (!channelsToShow || channelsToShow.length === 0) {
        console.log(`[FLOW] No channels to show for stage ${stage}`);
        return {
            message: 'üéØ **–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n‚úÖ –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!',
            buttons: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        };
    }

    let message = 'üéØ **–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã**\n\n';
    message += '–î–ªÔøΩÔøΩ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n';
    
    let buttons = [];
    
    channelsToShow.forEach((channel, index) => {
        message += `${index + 1}. ${channel.name}\n`;
        buttons.push([{
            text: `üíé ${channel.name}`,
            url: channel.link
        }]);
    });

    message += '\nüìå –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏';
    buttons.push([{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_sponsors' }]);

    return { message, buttons };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} –ú–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç
 */
async function canUserAccessBot(bot, userId) {
    try {
        console.log(`[FLOW] Checking bot access for user ${userId}`);
        const stageInfo = await updateSubscriptionStage(bot, userId);
        console.log(`[FLOW] Bot access check result: allCompleted=${stageInfo.allCompleted}, stage=${stageInfo.stage}`);
        return stageInfo.allCompleted;
    } catch (error) {
        console.error('[FLOW] Error checking bot access:', error);
        return false;
    }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —ç—Ç–∞–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–£–ü–†–û–©–ï–ù–û - –¢–û–õ–¨–ö–û SubGram)
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–ø–µ
 */
async function updateSubscriptionStage(bot, userId) {
    try {
        console.log(`[FLOW] Updating subscription stage for user ${userId}`);

        // 1. –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        const stageInfo = await getCurrentSubscriptionStage(userId);

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞
        if (stageInfo.sponsorChannels.length > 0) {
            await checkChannelSubscriptionsWithBot(bot, userId, stageInfo.sponsorChannels);
        }

        // 3. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ü–û–°–õ–ï —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const sponsorStatus = calculateSubscriptionStatus(stageInfo.sponsorChannels);

        console.log(`[FLOW] Subscription status - Sponsors: ${sponsorStatus.subscribedCount}/${sponsorStatus.totalCount}`);

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        stageInfo.sponsorStatus = sponsorStatus;

        // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø (–£–ü–†–û–©–ï–ù–û):
        if (!sponsorStatus.allSubscribed && stageInfo.sponsorChannels.length > 0) {
            // –≠–¢–ê–ü 1: –ù—É–∂–Ω—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
            stageInfo.stage = SUBSCRIPTION_STAGES.SPONSORS;
            stageInfo.nextAction = 'subscribe_sponsors';
            stageInfo.channelsToShow = stageInfo.sponsorChannels.filter(ch => !ch.subscribed);
            stageInfo.allCompleted = false;
        } else {
            // –≠–¢–ê–ü 2: –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ò–õ–ò –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤
            stageInfo.stage = SUBSCRIPTION_STAGES.COMPLETED;
            stageInfo.nextAction = 'show_main_menu';
            stageInfo.allCompleted = true;
            stageInfo.channelsToShow = [];

            console.log(`[FLOW] User ${userId} completed all subscriptions`);
        }

        console.log(`[FLOW] Final stage for user ${userId}: ${stageInfo.stage}, unsubscribed channels: ${stageInfo.channelsToShow.length}`);
        return stageInfo;

    } catch (error) {
        console.error('[FLOW] Error updating subscription stage:', error);
        return {
            stage: SUBSCRIPTION_STAGES.SPONSORS,
            nextAction: 'subscribe_sponsors',
            allCompleted: false,
            channelsToShow: [],
            sponsorChannels: [],
            sponsorStatus: { allSubscribed: false, subscribedCount: 0, totalCount: 0 },
            error: error.message
        };
    }
}

module.exports = {
    SUBSCRIPTION_STAGES,
    getCurrentSubscriptionStage,
    getSponsorChannels,
    checkChannelSubscriptionsWithBot,
    calculateSubscriptionStatus,
    formatStageMessage,
    canUserAccessBot,
    updateSubscriptionStage
};
