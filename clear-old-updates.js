/**
 * Clear old Telegram updates utility
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
 */

const TelegramBot = require('node-telegram-bot-api');

// Bot token
const token = process.env.BOT_TOKEN || '8379368723:AAEnG133OZ4qMrb5vQfM7VdEFSuLiWydsyM';

async function clearOldUpdates() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram...\n');

    try {
        const bot = new TelegramBot(token, { polling: false });

        // 1. Clear webhook first
        console.log('1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ webhook...');
        await bot.deleteWebHook();
        console.log('‚úÖ Webhook –æ—á–∏—â–µ–Ω\n');

        // 2. Get all pending updates
        console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ ÔøΩÔøΩ—Å–µ—Ö pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
        const updates = await bot.getUpdates({ timeout: 1 });
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${updates.length} pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n`);

        if (updates.length > 0) {
            // 3. Clear all updates by getting them with offset
            console.log('3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
            const lastUpdateId = updates[updates.length - 1].update_id;
            console.log(`üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π update_id: ${lastUpdateId}`);
            
            // Clear by getting updates with offset = lastUpdateId + 1
            await bot.getUpdates({ offset: lastUpdateId + 1, timeout: 1 });
            console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã\n');
            
            // 4. Verify clearing
            console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏...');
            const remainingUpdates = await bot.getUpdates({ timeout: 1 });
            console.log(`üìã –û—Å—Ç–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${remainingUpdates.length}`);
            
            if (remainingUpdates.length === 0) {
                console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
            } else {
                console.log('‚ö†Ô∏è –ï—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—åÔøΩÔøΩ–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
            }
        } else {
            console.log('‚úÖ –°—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log('üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ —Å polling');
        console.log('üí° –°—Ç–∞—Ä—ã–µ callback queries –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –û–ß–ò–°–¢–ö–ò:', error.message);
        console.error('üìç –î–µ—Ç–∞–ª–∏:', error.stack);
        
        console.log('\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }
}

// Run if called directly
if (require.main === module) {
    clearOldUpdates();
}

module.exports = { clearOldUpdates };
