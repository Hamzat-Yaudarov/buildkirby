const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const db = require('./database');

// Bot token - should be set via environment variable
const token = process.env.BOT_TOKEN || '8379368723:AAEnG133OZ4qMrb5vQfM7VdEFSuLiWydsyM';
const bot = new TelegramBot(token, { polling: true });

// Admin configuration
const ADMIN_ID = 6910097562;
const ADMIN_CHANNEL = process.env.ADMIN_CHANNEL || '@kirbyvivodstars';

// Initialize database
async function startBot() {
    try {
        console.log('üöÄ Starting Telegram bot with PostgreSQL...');
        
        // Initialize database schema
        await db.initializeDatabase();
        
        console.log('‚úÖ Bot started successfully!');
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
}

// Helper function to check if user is admin
function isAdmin(userId) {
    return userId === ADMIN_ID;
}

// Helper function to get required channels from database
async function getRequiredChannels() {
    try {
        const result = await db.executeQuery('SELECT channel_id FROM required_channels WHERE is_active = TRUE');
        return result.rows.map(row => row.channel_id);
    } catch (error) {
        console.error('Error getting required channels:', error);
        return [];
    }
}

// Helper function to check if user is subscribed to required channels
async function checkSubscriptions(userId) {
    const requiredChannels = await getRequiredChannels();
    if (requiredChannels.length === 0) return true;
    
    try {
        for (const channel of requiredChannels) {
            const member = await bot.getChatMember(channel, userId);
            if (member.status === 'left' || member.status === 'kicked') {
                return false;
            }
        }
        return true;
    } catch (error) {
        console.error('Error checking subscriptions:', error);
        return false;
    }
}

// Helper function to create main menu inline keyboard
function getMainMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'menu_profile' },
                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'menu_invite' }
                ],
                [
                    { text: 'üéØ –ö–ª–∏–∫–µ—Ä', callback_data: 'menu_clicker' },
                    { text: '‚≠ê –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data: 'menu_withdraw' }
                ],
                [
                    { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'menu_tasks' },
                    { text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'menu_instruction' }
                ],
                [
                    { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'menu_ratings' },
                    { text: 'üéÅ –ö–µ–π—Å—ã', callback_data: 'menu_cases' }
                ],
                [
                    { text: 'üé∞ –õ–æ—Ç–µ—Ä–µ—è', callback_data: 'menu_lottery' }
                ]
            ]
        }
    };
}

// Helper function to create admin menu inline keyboard
function getAdminMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                    { text: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏', callback_data: 'admin_tasks' }
                ],
                [
                    { text: 'üé∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–µ–π', callback_data: 'admin_lottery' },
                    { text: 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã', callback_data: 'admin_promocodes' }
                ],
                [
                    { text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'admin_broadcast' },
                    { text: 'üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data: 'admin_withdrawals' }
                ],
                [
                    { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }
                ]
            ]
        }
    };
}

// Helper function to create back button
function getBackButton(callbackData = 'back_to_main') {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: callbackData }]
            ]
        }
    };
}

// Start command handler
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = msg.from;
    const referralCode = match ? match[1].trim() : null;
    
    try {
        // Check if user exists
        let dbUser = await db.getUser(userId);
        
        if (!dbUser) {
            // New user - check for referral
            let invitedBy = null;
            if (referralCode && !isNaN(referralCode)) {
                const referrer = await db.getUser(parseInt(referralCode));
                if (referrer) {
                    invitedBy = parseInt(referralCode);
                }
            }
            
            // Create user
            dbUser = await db.createOrUpdateUser(user, invitedBy);
        }
        
        // Check subscriptions
        const isSubscribed = await checkSubscriptions(userId);
        const requiredChannels = await getRequiredChannels();

        if (!isSubscribed && requiredChannels.length > 0) {
            let message = 'üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n';

            // Get channel names from database
            try {
                const result = await db.executeQuery('SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE');
                result.rows.forEach((channel, index) => {
                    message += `${index + 1}. ${channel.channel_name || channel.channel_id}\n`;
                });
            } catch (error) {
                requiredChannels.forEach((channel, index) => {
                    message += `${index + 1}. ${channel}\n`;
                });
            }

            message += '\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—ÅÔøΩÔøΩ–∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞';
            bot.sendMessage(chatId, message);
            return;
        }
        
        // Update subscription status
        await db.updateUserField(userId, 'is_subscribed', true);
        
        // Send welcome message with main menu
        const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!**

üí∞ **–ë–∞–ª–∞–Ω—Å:** ${dbUser.balance} ‚≠ê
üë• **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${dbUser.referrals_count}

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üéØ **–ö–ª–∏–∫–µ—Ä** - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üìã **–ó–∞–¥–∞–Ω–∏—è** - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ  
‚Ä¢ üéÅ **–ö–µ–π—Å—ã** - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏
‚Ä¢ üé∞ **–õ–æ—Ç–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
‚Ä¢ üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞** - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π

‚≠ê **–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 –∑–≤–µ–∑–¥—ã!**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            ...getMainMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in start command:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
});

// Admin command handler
bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    try {
        const stats = await db.getUserStats();
        
        const message = `üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê
üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.total_referrals}
üìÖ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.today_users}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            ...getAdminMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in admin command:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
    }
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    try {
        const user = await db.getUser(userId);
        
        if (!user) {
            await bot.editMessageText(
                '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                {
                    chat_id: chatId,
                    message_id: msg.message_id
                }
            );
            return;
        }

        switch (data) {
            case 'menu_profile':
                await handleProfileMenu(chatId, msg.message_id, user);
                break;
            case 'menu_invite':
                await handleInviteMenu(chatId, msg.message_id, user);
                break;
            case 'menu_clicker':
                await handleClickerMenu(chatId, msg.message_id, user);
                break;
            case 'menu_withdraw':
                await handleWithdrawMenu(chatId, msg.message_id, user);
                break;
            case 'menu_tasks':
                await handleTasksMenu(chatId, msg.message_id, user);
                break;
            case 'menu_instruction':
                await handleInstructionMenu(chatId, msg.message_id);
                break;
            case 'menu_ratings':
                await handleRatingsMenu(chatId, msg.message_id);
                break;
            case 'menu_cases':
                await handleCasesMenu(chatId, msg.message_id, user);
                break;
            case 'menu_lottery':
                await handleLotteryMenu(chatId, msg.message_id, user);
                break;
            case 'back_to_main':
                await handleBackToMain(chatId, msg.message_id, user);
                break;
            
            // Admin menu handlers
            case 'admin_stats':
                if (!isAdmin(userId)) return;
                await handleAdminStats(chatId, msg.message_id);
                break;
            case 'admin_tasks':
                if (!isAdmin(userId)) return;
                await handleAdminTasks(chatId, msg.message_id);
                break;
            case 'admin_lottery':
                if (!isAdmin(userId)) return;
                await handleAdminLottery(chatId, msg.message_id);
                break;
            case 'admin_promocodes':
                if (!isAdmin(userId)) return;
                await handleAdminPromocodes(chatId, msg.message_id);
                break;
            case 'admin_broadcast':
                if (!isAdmin(userId)) return;
                await handleAdminBroadcast(chatId, msg.message_id);
                break;
            case 'admin_withdrawals':
                if (!isAdmin(userId)) return;
                await handleAdminWithdrawals(chatId, msg.message_id);
                break;
        }

        // Answer callback query to remove loading state
        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('Error handling callback query:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true
        });
    }
});

// Menu handlers
async function handleProfileMenu(chatId, messageId, user) {
    const message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üÜî **ID:** ${user.id}
üë§ **–ò–º—è:** ${user.first_name}
${user.username ? `üì± **Username:** @${user.username}` : ''}

üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê
üë• **–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${user.referrals_count}
üìÖ **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** ${user.referrals_today}
üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** ${new Date(user.registered_at).toLocaleDateString('ru-RU')}

üéØ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
${user.last_click ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫: ${new Date(user.last_click).toLocaleDateString('ru-RU')}` : '‚Ä¢ –ö–ª–∏–∫–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}
${user.last_case_open ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–µ–π—Å: ${new Date(user.last_case_open).toLocaleDateString('ru-RU')}` : '‚Ä¢ –ö–µ–π—Å—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å'}`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackButton()
    });
}

async function handleInviteMenu(chatId, messageId, user) {
    const inviteLink = `https://t.me/${bot.options.username}?start=${user.id}`;
    
    const message = `üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**

üéÅ **–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 ‚≠ê**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user.referrals_count}
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${user.referrals_today}
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals_count * 3} ‚≠ê

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`${inviteLink}\`

üì¢ **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã!**`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackButton()
    });
}

async function handleClickerMenu(chatId, messageId, user) {
    const now = new Date();
    const lastClick = user.last_click ? new Date(user.last_click) : null;
    const canClick = !lastClick || now.toDateString() !== lastClick.toDateString();

    if (canClick) {
        // Award clicker reward
        const reward = Math.floor(Math.random() * 3) + 1; // 1-3 stars
        await db.updateUserBalance(user.id, reward);
        await db.updateUserField(user.id, 'last_click', now);

        const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** 
–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${reward} ‚≠ê

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance + reward} ‚≠ê

‚è∞ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackButton()
        });
    } else {
        const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

‚è∞ **–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è!**

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

üïê –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µÔøΩÔøΩ—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 –¥–æ 3 ‚≠ê`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackButton()
        });
    }
}

async function handleTasksMenu(chatId, messageId, user) {
    try {
        const allTasks = await db.getTasks();
        const completedTasks = await db.getUserCompletedTasks(user.id);
        const completedTaskIds = completedTasks.map(t => t.id);
        
        const availableTasks = allTasks.filter(task => !completedTaskIds.includes(task.id));

        let message = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è**\n\n';
        
        if (availableTasks.length === 0) {
            message += '‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.';
        } else {
            availableTasks.forEach((task, index) => {
                message += `${index + 1}. **${task.channel_name || task.channel_id}**\n`;
                message += `   üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê\n`;
                message += `   üì± –ö–∞–Ω–∞–ª: ${task.channel_id}\n\n`;
            });
            
            message += 'üìå **–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:**\n';
            message += '1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n';
            message += '2. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏\n';
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    ...availableTasks.map(task => [
                        { text: `‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: ${task.channel_name || task.channel_id}`, callback_data: `check_task_${task.id}` }
                    ]),
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                ]
            }
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...keyboard
        });
    } catch (error) {
        console.error('Error in tasks menu:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackButton()
        });
    }
}

async function handleBackToMain(chatId, messageId, user) {
    const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!**

üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê
üë• **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${user.referrals_count}

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üéØ **–ö–ª–∏–∫–µ—Ä** - –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üìã **–ó–∞–¥–∞–Ω–∏—è** - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ  
‚Ä¢ üéÅ **–ö–µ–π—Å—ã** - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏
‚Ä¢ üé∞ **–õ–æ—Ç–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
‚Ä¢ üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞** - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π

‚≠ê **–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 –∑–≤–µ–∑–¥—ã!**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

    await bot.editMessageText(welcomeMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getMainMenuKeyboard()
    });
}

// Placeholder handlers for other menus
async function handleWithdrawMenu(chatId, messageId, user) {
    const message = `‚≠ê **–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥**

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

üîÑ –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å –∑–≤—ë–∑–¥—ã!`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackButton()
    });
}

async function handleInstructionMenu(chatId, messageId) {
    const message = `üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üéØ **–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã:**

1Ô∏è‚É£ **–ö–ª–∏–∫–µ—Ä** - –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 1-3 ‚≠ê
2Ô∏è‚É£ **–ó–∞–¥–∞–Ω–∏—è** - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
3Ô∏è‚É£ **–†–µ—Ñ–µ—Ä–∞–ª—ã** - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ
4Ô∏è‚É£ **–ö–µ–π—Å—ã** - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏
5Ô∏è‚É£ **–õ–æ—Ç–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

‚≠ê **–ó–≤—ë–∑–¥—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!**`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackButton()
    });
}

async function handleRatingsMenu(chatId, messageId) {
    try {
        const result = await db.executeQuery(`
            SELECT first_name, balance, referrals_count 
            FROM users 
            ORDER BY balance DESC 
            LIMIT 10
        `);
        
        let message = 'üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É**\n\n';
        
        result.rows.forEach((user, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
            message += `${medal} **${user.first_name}**\n`;
            message += `   üí∞ ${user.balance} ‚≠ê | üë• ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n`;
        });

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackButton()
        });
    } catch (error) {
        console.error('Error in ratings menu:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackButton()
        });
    }
}

async function handleCasesMenu(chatId, messageId, user) {
    const message = `üéÅ **–ö–µ–π—Å—ã**

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã —Å –ø—Ä–∏–∑ÔøΩÔøΩ–º–∏!`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackButton()
    });
}

async function handleLotteryMenu(chatId, messageId, user) {
    const message = `üé∞ **–õ–æ—Ç–µ—Ä–µ—è**

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

üîÑ –°–∏—Å—Ç–µ–º–∞ –ª–æ—Ç–µ—Ä–µ–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –ø—Ä–∏–∑–æ–≤!`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackButton()
    });
}

// Admin handlers (placeholders)
async function handleAdminStats(chatId, messageId) {
    try {
        const stats = await db.getUserStats();
        
        const message = `üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: ${stats.total_users}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.today_users}

üí∞ **–≠–∫–æ–Ω–æ–º–∏–∫–∞:**
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.total_referrals}
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: ${stats.total_referrals * 3} ‚≠ê

üìà **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_users > 0 ? (stats.total_balance / stats.total_users).toFixed(2) : 0} ‚≠ê
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${stats.total_users > 0 ? (stats.total_referrals / stats.total_users).toFixed(2) : 0}`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackButton('admin_back')
        });
    } catch (error) {
        console.error('Error in admin stats:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackButton('admin_back')
        });
    }
}

// Placeholder admin functions
async function handleAdminTasks(chatId, messageId) {
    await bot.editMessageText('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackButton('admin_back')
    });
}

async function handleAdminLottery(chatId, messageId) {
    await bot.editMessageText('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackButton('admin_back')
    });
}

async function handleAdminPromocodes(chatId, messageId) {
    await bot.editMessageText('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackButton('admin_back')
    });
}

async function handleAdminBroadcast(chatId, messageId) {
    await bot.editMessageText('üîÑ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackButton('admin_back')
    });
}

async function handleAdminWithdrawals(chatId, messageId) {
    await bot.editMessageText('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackButton('admin_back')
    });
}

// Daily reset cron job
cron.schedule('0 0 * * *', async () => {
    console.log('üîÑ Running daily reset...');
    try {
        await db.resetDailyData();
    } catch (error) {
        console.error('Error in daily reset:', error);
    }
});

// Error handling
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

process.on('SIGINT', async () => {
    console.log('üõë Shutting down bot...');
    await db.closeConnection();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë Shutting down bot...');
    await db.closeConnection();
    process.exit(0);
});

// Start the bot
startBot();
