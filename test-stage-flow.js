/**
 * –¢–µ—Å—Ç –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ flow –ø–æ–¥–ø–∏—Å–æ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
 */

const db = require('./database');
const subscriptionFlow = require('./subscription-flow-manager');

// –°–∏–º—É–ª—è—Ü–∏—è –±–æ—Ç–∞
const mockBot = {
    async getChatMember(channelId, userId) {
        console.log(`[MOCK] Checking ${channelId} for user ${userId}`);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        return { status: 'left' };
    }
};

async function testStageFlow() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ flow –ø–æ–¥–ø–∏—Å–æ–∫...\n');
        
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n');

        const testUserId = 987654321; // –î—Ä—É–≥–æ–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª...');
        await db.executeQuery(`
            INSERT INTO required_channels (channel_id, channel_name, is_active)
            VALUES ($1, $2, $3)
            ON CONFLICT (channel_id) DO UPDATE SET
                channel_name = $2,
                is_active = $3
        `, ['@test_required_channel', '–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª', true]);
        console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω\n');

        // 1. –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–ø—ã
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        let stageInfo = await subscriptionFlow.getCurrentSubscriptionStage(testUserId);
        
        console.log(`üìã –≠—Ç–∞–ø: ${stageInfo.stage}`);
        console.log(`üéØ –î–µ–π—Å—Ç–≤–∏–µ: ${stageInfo.nextAction}`);
        console.log(`üíé –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${stageInfo.sponsorChannels?.length || 0}`);
        console.log(`üì∫ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${stageInfo.requiredChannels?.length || 0}`);
        console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stageInfo.allCompleted}`);
        console.log(`üì§ –ö–∞–Ω–∞–ª–æ–≤ –∫ –ø–æ–∫–∞–∑—É: ${stageInfo.channelsToShow?.length || 0}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞
        const stageMessage = subscriptionFlow.formatStageMessage(stageInfo);
        console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞ "${stageInfo.stage}":`);
        console.log(stageMessage.message);
        console.log(`üîò –ö–Ω–æ–ø–æ–∫: ${stageMessage.buttons.length}\n`);

        // 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        if (stageInfo.stage === subscriptionFlow.SUBSCRIPTION_STAGES.SPONSORS) {
            console.log('2Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã...');
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
            if (stageInfo.sponsorChannels) {
                stageInfo.sponsorChannels.forEach(ch => {
                    ch.subscribed = true;
                    console.log(`   ‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞: ${ch.name}`);
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø
            stageInfo = await subscriptionFlow.updateSubscriptionStage(mockBot, testUserId);
            console.log(`üìã –ù–æ–≤—ã–π —ç—Ç–∞–ø: ${stageInfo.stage}`);
            
            if (stageInfo.stage === subscriptionFlow.SUBSCRIPTION_STAGES.REQUIRED) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –∫ —ç—Ç–∞–ø—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!\n');
                
                const requiredMessage = subscriptionFlow.formatStageMessage(stageInfo);
                console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–∞–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:`);
                console.log(requiredMessage.message);
                console.log(`üîò –ö–Ω–æ–ø–æ–∫: ${requiredMessage.buttons.length}\n`);
            }
        }

        // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        if (stageInfo.stage === subscriptionFlow.SUBSCRIPTION_STAGES.REQUIRED) {
            console.log('3Ô∏è‚É£ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...');
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if (stageInfo.requiredChannels) {
                stageInfo.requiredChannels.forEach(ch => {
                    ch.subscribed = true;
                    console.log(`   ‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: ${ch.name}`);
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø
            stageInfo = await subscriptionFlow.updateSubscriptionStage(mockBot, testUserId);
            console.log(`üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: ${stageInfo.stage}`);
            
            if (stageInfo.allCompleted) {
                console.log('üéâ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç!\n');
                
                const completedMessage = subscriptionFlow.formatStageMessage(stageInfo);
                console.log(`üìù –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`);
                console.log(completedMessage.message);
            }
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É...');
        const canAccess = await subscriptionFlow.canUserAccessBot(testUserId);
        console.log(`üîì –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞: ${canAccess}`);
        
        // 5. –†–µ–∑—é–º–µ —Ç–µ—Å—Ç–∞
        console.log('\nüìä –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('‚úÖ –ü–æ—ç—Ç–∞–ø–Ω—ã–π flow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        console.log('‚úÖ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ');
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        
        console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        await db.closeConnection();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ flow...\n');
testStageFlow();
