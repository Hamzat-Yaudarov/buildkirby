/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã 2 —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–ø—á–∏
 */

const { captchaSystem } = require('./captcha-system');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function testEasyLevel() {
    console.log('\nüü¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–ï–ì–ö–û–ì–û –£–†–û–í–ù–Ø:');
    console.log('=====================================');
    
    for (let i = 0; i < 5; i++) {
        const captcha = captchaSystem.generateCaptcha(12345, captchaSystem.DIFFICULTY_LEVELS.EASY);
        console.log(`\n–¢–µ—Å—Ç ${i + 1}:`);
        console.log(`–¢–∏–ø: ${captcha.type}`);
        console.log(`–í–æ–ø—Ä–æ—Å: ${captcha.question}`);
        console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${captcha.answer}`);
        console.log(`–üÔøΩÔøΩ–∏–Ω–∏–º–∞–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã: ${captcha.acceptedAnswers?.join(', ') || captcha.answer}`);
        
        if (captcha.hints && captcha.hints.length > 0) {
            console.log(`–ü–æ–¥—Å–∫–∞–∑–∫–∏: ${captcha.hints.join(', ')}`);
        }
    }
}

function testHardLevel() {
    console.log('\nüî¥ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–õ–û–ñ–ù–û–ì–û –£–†–û–í–ù–Ø:');
    console.log('=====================================');
    
    for (let i = 0; i < 5; i++) {
        const captcha = captchaSystem.generateCaptcha(54321, captchaSystem.DIFFICULTY_LEVELS.HARD);
        console.log(`\n–¢–µ—Å—Ç ${i + 1}:`);
        console.log(`–¢–∏–ø: ${captcha.type}`);
        console.log(`–í–æ–ø—Ä–æ—Å: ${captcha.question}`);
        console.log(`–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${captcha.answer}`);
        console.log(`–ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã: ${captcha.acceptedAnswers?.join(', ') || captcha.answer}`);
        
        if (captcha.hints && captcha.hints.length > 0) {
            console.log(`–ü–æ–¥—Å–∫–∞–∑–∫–∏: ${captcha.hints.join(', ')}`);
        }
    }
}

function testDifficultyLevels() {
    console.log('\nüìä –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–´–• –£–†–û–í–ù–ï–ô –°–õ–û–ñ–ù–û–°–¢–ò:');
    console.log('==========================================');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:', captchaSystem.DIFFICULTY_LEVELS);
    
    const expectedLevels = ['EASY', 'HARD'];
    const actualLevels = Object.keys(captchaSystem.DIFFICULTY_LEVELS);
    
    console.log(`–û–∂–∏–¥–∞–µ—Ç—Å—è: ${expectedLevels.join(', ')}`);
    console.log(`–§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${actualLevels.join(', ')}`);
    
    const isCorrect = expectedLevels.length === actualLevels.length && 
                     expectedLevels.every(level => actualLevels.includes(level));
    
    console.log(`‚úÖ –£—Ä–æ–≤–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: ${isCorrect ? '–î–ê' : '–ù–ï–¢'}`);
    
    return isCorrect;
}

function testAllCaptchaTypes() {
    console.log('\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –¢–ò–ü–û–í –ö–ê–ü–ß–ò –ù–ê –û–ë–û–ò–• –£–†–û–í–ù–Ø–•:');
    console.log('==================================================');
    
    const types = Object.values(captchaSystem.CAPTCHA_TYPES);
    const levels = Object.values(captchaSystem.DIFFICULTY_LEVELS);
    
    console.log(`–¢–∏–ø—ã –∫–∞–ø—á–∏: ${types.join(', ')}`);
    console.log(`–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${levels.join(', ')}`);
    
    let allWorking = true;
    
    for (const level of levels) {
        const levelName = level === 1 ? '–õ–ï–ì–ö–ò–ô' : '–°–õ–û–ñ–ù–´–ô';
        console.log(`\n--- ${levelName} –£–†–û–í–ï–ù–¨ ---`);
        
        for (let i = 0; i < 10; i++) {
            try {
                const captcha = captchaSystem.generateCaptcha(99999, level);
                console.log(`${i + 1}. ${captcha.type}: ${captcha.question.split('\\n')[0].substring(0, 50)}...`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${levelName} —É—Ä–æ–≤–Ω—è:`, error.message);
                allWorking = false;
            }
        }
    }
    
    console.log(`\n‚úÖ –í—Å–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç: ${allWorking ? '–î–ê' : '–ù–ï–¢'}`);
    return allWorking;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–ê–ü–ß–ò');
console.log('====================================');

try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const levelsCorrect = testDifficultyLevels();
    
    if (!levelsCorrect) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!');
        process.exit(1);
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
    testEasyLevel();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    testHardLevel();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
    const allTypesWorking = testAllCaptchaTypes();
    
    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–íÔøΩÔøΩ–ù–ò–Ø:');
    console.log('===========================');
    console.log(`‚úÖ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${levelsCorrect ? '–ö–û–†–†–ï–ö–¢–ù–´' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`‚úÖ –í—Å–µ —Ç–∏–ø—ã –∫–∞–ø—á–∏: ${allTypesWorking ? '–†–ê–ë–û–¢–ê–Æ–¢' : '–û–®–ò–ë–ö–ê'}`);
    console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: ${levelsCorrect && allTypesWorking ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (levelsCorrect && allTypesWorking) {
        console.log('\nüöÄ –°–ò–°–¢–ï–ú–ê –ö–ê–ü–ß–ò –° 2 –£–†–û–í–ù–Ø–ú–ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!');
    } else {
        console.log('\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö!');
        process.exit(1);
    }
    
} catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
    process.exit(1);
}
