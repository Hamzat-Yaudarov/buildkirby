#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º –∑–≤—ë–∑–¥
 */

const db = require('./database');

async function fixWithdrawalIssues() {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º –∑–≤—ë–∑–¥...\n');

    try {
        let fixedCount = 0;

        // 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        console.log('1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º...');
        
        const insufficientBalance = await db.executeQuery(`
            SELECT 
                wr.id,
                wr.user_id,
                wr.amount,
                u.balance,
                u.first_name
            FROM withdrawal_requests wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.status = 'pending'
            AND u.balance < wr.amount
        `);

        if (insufficientBalance.rows.length > 0) {
            console.log(`   –ù–∞–π–¥–µ–Ω–æ ${insufficientBalance.rows.length} –∑–∞—è–≤–æ–∫ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º`);
            
            for (const request of insufficientBalance.rows) {
                console.log(`   üîÑ –û—Ç–∫–ª–æ–Ω—è—é –∑–∞—è–≤–∫—É #${request.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${request.first_name}`);
                console.log(`      –ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${request.amount}‚≠ê, –¥–æ—Å—Ç—É–ø–Ω–æ: ${request.balance}‚≠ê`);
                
                // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É - –±–∞–ª–∞–Ω—Å –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ
                await db.executeQuery(`
                    UPDATE withdrawal_requests
                    SET status = 'rejected',
                        processed_at = CURRENT_TIMESTAMP,
                        admin_notes = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å'
                    WHERE id = $1
                `, [request.id]);
                
                fixedCount++;
            }
        } else {
            console.log('   ‚úÖ –ó–∞—è–≤–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        // 2. –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫...');
        
        const duplicates = await db.executeQuery(`
            SELECT 
                user_id,
                amount,
                type,
                COUNT(*) as count,
                string_agg(id::text, ',') as ids
            FROM withdrawal_requests
            WHERE status = 'pending'
            GROUP BY user_id, amount, type
            HAVING COUNT(*) > 1
        `);

        if (duplicates.rows.length > 0) {
            for (const dup of duplicates.rows) {
                const ids = dup.ids.split(',');
                const keepId = ids[0]; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
                const removeIds = ids.slice(1); // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                
                console.log(`   üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dup.user_id}: –æ—Å—Ç–∞–≤–ª—è—é –∑–∞—è–≤–∫—É #${keepId}, —É–¥–∞–ª—è—é –¥—É–±–ª–∏: ${removeIds.join(', ')}`);
                
                // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
                for (const removeId of removeIds) {
                    await db.executeQuery(`
                        UPDATE withdrawal_requests
                        SET status = 'rejected',
                            processed_at = CURRENT_TIMESTAMP,
                            admin_notes = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: –¥—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞—è–≤–∫–∞'
                        WHERE id = $1
                    `, [parseInt(removeId)]);
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –¥—É–±–ª–∏—Ä—É—é—â—É—é –∑–∞—è–≤–∫—É
                    await db.updateUserBalance(dup.user_id, parseFloat(dup.amount));
                    fixedCount++;
                }
            }
        } else {
            console.log('   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
        console.log('\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—ã—Ö pending –∑–∞—è–≤–æ–∫...');
        
        const oldRequests = await db.executeQuery(`
            SELECT 
                id,
                user_id,
                amount,
                type,
                created_at,
                (EXTRACT(EPOCH FROM (NOW() - created_at))/3600)::int as hours_old
            FROM withdrawal_requests
            WHERE status = 'pending'
            AND created_at < NOW() - INTERVAL '24 hours'
            ORDER BY created_at ASC
        `);

        if (oldRequests.rows.length > 0) {
            console.log(`   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${oldRequests.rows.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫:`);
            oldRequests.rows.forEach(req => {
                console.log(`      –ó–∞—è–≤–∫–∞ #${req.id}: ${req.hours_old} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ (${req.amount}‚≠ê)`);
            });
            console.log('\n   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –∑–∞–ø—É—Å–∫ userbot');
        } else {
            console.log('   ‚úÖ –°—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        console.log('\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
        
        const finalStats = await db.executeQuery(`
            SELECT 
                status,
                COUNT(*) as count,
                SUM(amount) as total_amount
            FROM withdrawal_requests
            GROUP BY status
            ORDER BY status
        `);

        finalStats.rows.forEach(stat => {
            console.log(`   ${stat.status}: ${stat.count} –∑–∞—è–≤–æ–∫ (${parseFloat(stat.total_amount || 0)}‚≠ê)`);
        });

        console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${fixedCount}`);
        
        if (fixedCount > 0) {
            console.log('\nüìß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö');
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        const pendingCount = await db.executeQuery(`
            SELECT COUNT(*) as count FROM withdrawal_requests WHERE status = 'pending'
        `);
        
        const pending = parseInt(pendingCount.rows[0].count);
        
        if (pending === 0) {
            console.log('\nüéâ –û—Ç–ª–∏—á–Ω–æ! –ù–µ—Ç pending –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        } else if (pending < 10) {
            console.log(`\n‚úÖ –•–æ—Ä–æ—à–æ! –û—Å—Ç–∞–ª–æ—Å—å ${pending} –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            console.log('   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å userbot –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä—É—á–Ω—É—é');
        } else {
            console.log(`\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å ${pending} –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å userbot –∏–ª–∏ –º–∞—Å—Å–æ–≤–∞—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    fixWithdrawalIssues().then(() => {
        console.log('\nüèÅ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
    }).catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { fixWithdrawalIssues };
