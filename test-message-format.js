// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞

// Helper function to escape Markdown special characters
function escapeMarkdown(text) {
    if (!text) return '';
    
    // Remove or replace problematic characters
    let cleanText = text
        .replace(/[\*_`\[\]()~>#+=|{}.!-]/g, '\\$&') // Escape markdown
        .replace(/[\u0000-\u001f\u007f-\u009f]/g, '') // Remove control characters
        .replace(/[‚ò≠‚ßÅ‚Å£‡ºíìÜ©‚Ç¶≈Ç‚Ç¶‚Ñ≥‚Ç≥ìÜ™]/g, '') // Remove specific problematic symbols
        .replace(/[\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F]/g, '') // Remove various unicode spaces and symbols
        .trim();
    
    // Limit length to prevent issues
    if (cleanText.length > 20) {
        cleanText = cleanText.substring(0, 17) + '...';
    }
    
    // If name becomes empty after cleaning, use default
    return cleanText || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–∞
const testUsers = [
    { first_name: 'Youdarov', referrals_count: 8 },
    { first_name: 'DOVING_BG‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠ ‚ò≠', referrals_count: 2 },
    { first_name: '–£–º–Ω—ã–π', referrals_count: 0 },
    { first_name: '–ó–∞—Ä–∏', referrals_count: 0 },
    { first_name: '–Ø', referrals_count: 0 },
    { first_name: 'üåëGerberüåë', referrals_count: 0 },
    { first_name: '–°–ü–õ–ò–ù–¢–ï–†', referrals_count: 0 },
    { first_name: 'Gosha', referrals_count: 0 },
    { first_name: '‚ßÅ‚Å£‡ºíìÜ©‚Ç¶≈Ç‚Ç¶‚Ñ≥‚Ç≥ìÜ™‡ºí‚ßÇ', referrals_count: 0 },
    { first_name: 'ICE', referrals_count: 0 }
];

function testRatingMessage() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞...\n');
    
    let message = 'üìÖ **–†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º**\n\n';
    
    testUsers.forEach((user, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
        const safeName = escapeMarkdown(user.first_name) || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const line = `${medal} ${safeName} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
        
        console.log(`–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: "${user.first_name}"`);
        console.log(`–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è: "${safeName}"`);
        console.log(`–°—Ç—Ä–æ–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: "${line}"`);
        console.log('---');
        
        message += line;
    });
    
    console.log('\nüìã –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
    console.log(message);
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${message.split('\n').length}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const problematicChars = /[‚ò≠‚ßÅ‚Å£‡ºíìÜ©‚Ç¶≈Ç‚Ç¶‚Ñ≥‚Ç≥ìÜ™]/g;
    const matches = message.match(problematicChars);
    console.log(`–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞–π–¥–µ–Ω—ã: ${matches ? matches.length : 0}`);
    
    return message;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testRatingMessage();
