/**
 * Test script for referral system
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

const db = require('./database');

async function testReferralSystem() {
    console.log('üß™ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...\n');

    try {
        // Initialize database
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

        // Test users
        const referrerId = 111111111; // User who invited
        const newUserId = 222222222;  // New user who was invited

        // Clean up any existing test data
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await db.executeQuery('DELETE FROM users WHERE id IN ($1, $2)', [referrerId, newUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n');

        // 1. Create referrer user
        console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞...');
        await db.executeQuery(`
            INSERT INTO users (id, username, first_name, captcha_passed, is_subscribed, registered_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
        `, [referrerId, 'referrer_user', '–†–µ—Ñ–µ—Ä–µ—Ä', true, true]);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–µ—Ñ–µ—Ä–µ—Ä —Å–æ–∑–¥–∞–Ω (ID:', referrerId, ')\n');

        // 2. Create new user with referrer
        console.log('2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞...');
        await db.executeQuery(`
            INSERT INTO users (id, username, first_name, invited_by, captcha_passed, is_subscribed, registered_at)
            VALUES ($1, $2, $3, $4, $5, $6, NOW())
        `, [newUserId, 'new_user', '–ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', referrerId, false, false]);
        console.log('‚úÖ –ù–æ–≤—ã–π ÔøΩÔøΩ–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (ID:', newUserId, ')\n');

        // 3. Check initial referral qualification
        console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        let qualification = await db.checkReferralQualification(newUserId);
        console.log('üìã –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ –∫–∞–ø—á–∏:', qualification);
        console.log('‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è: qualified = false (–Ω–µ—Ç –∫–∞–ø—á–∏)\n');

        // 4. User passes captcha
        console.log('4Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–∞–ø—á—É...');
        await db.executeQuery('UPDATE users SET captcha_passed = TRUE WHERE id = $1', [newUserId]);
        
        qualification = await db.checkReferralQualification(newUserId);
        console.log('üìã –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ –∫–∞–ø—á–∏:', qualification);
        console.log('‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è: qualified = false (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)\n');

        // 5. User subscribes to channels
        console.log('5Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã...');
        await db.executeQuery('UPDATE users SET is_subscribed = TRUE WHERE id = $1', [newUserId]);
        
        qualification = await db.checkReferralQualification(newUserId);
        console.log('üìã –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—ÅÔøΩÔøΩ–∏:', qualification);
        console.log('‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: qualified = true (–≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)\n');

        // 6. Process referral bonus
        if (qualification.qualified) {
            console.log('6Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞...');
            
            // Get referrer balance before
            const referrerBefore = await db.getUser(referrerId);
            console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–æ:', referrerBefore.balance, '‚≠ê');
            console.log('üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–æ:', referrerBefore.referrals_count);
            
            const result = await db.checkAndProcessPendingReferrals(newUserId);
            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', result);
            
            // Get referrer balance after
            const referrerAfter = await db.getUser(referrerId);
            console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ—Å–ª–µ:', referrerAfter.balance, '‚≠ê');
            console.log('üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ—Å–ª–µ:', referrerAfter.referrals_count);
            
            const bonusAwarded = parseFloat(referrerAfter.balance) - parseFloat(referrerBefore.balance);
            const referralsAdded = referrerAfter.referrals_count - referrerBefore.referrals_count;
            
            console.log('üéâ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω:', bonusAwarded, '‚≠ê');
            console.log('üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', referralsAdded);
            
            if (bonusAwarded === 3 && referralsAdded === 1) {
                console.log('‚úÖ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!\n');
            } else {
                console.log('‚ùå –û–®–ò–ë–ö–ê –í –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–ï!\n');
            }
        }

        // 7. Test edge cases
        console.log('7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...\n');

        // Test double processing
        console.log('7.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
        const doubleResult = await db.checkAndProcessPendingReferrals(newUserId);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', doubleResult);
        console.log('‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: processed = 0 (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)\n');

        // Test user without referrer
        console.log('7.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞...');
        const orphanUserId = 333333333;
        await db.executeQuery(`
            INSERT INTO users (id, username, first_name, captcha_passed, is_subscribed, registered_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
        `, [orphanUserId, 'orphan_user', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞', true, true]);
        
        const orphanResult = await db.checkAndProcessPendingReferrals(orphanUserId);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', orphanResult);
        console.log('‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è: processed = 0 (–Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞)\n');

        // 8. Test retroactive activation
        console.log('8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...\n');
        
        // Create a user who was already processed but then became active
        const retroUserId = 444444444;
        await db.executeQuery(`
            INSERT INTO users (id, username, first_name, invited_by, captcha_passed, is_subscribed, referral_processed, registered_at)
            VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
        `, [retroUserId, 'retro_user', '–†–µ—Ç—Ä–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', referrerId, false, false, false]);
        
        console.log('8.1 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º...');
        await db.executeQuery('UPDATE users SET captcha_passed = TRUE, is_subscribed = TRUE WHERE id = $1', [retroUserId]);
        
        const retroResult = await db.activateRetroactiveReferral(retroUserId);
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', retroResult);
        
        if (retroResult.success) {
            console.log('‚úÖ –†–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!\n');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n');
        }

        // 9. Final verification
        console.log('9Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...\n');
        const finalReferrer = await db.getUser(referrerId);
        console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:');
        console.log('  ‚Ä¢ –ë–∞–ª–∞–Ω—Å:', finalReferrer.balance, '‚≠ê');
        console.log('  ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:', finalReferrer.referrals_count);
        console.log('  ‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è:', finalReferrer.referrals_today);

        // Calculate expected values
        const expectedReferrals = 2; // newUserId + retroUserId
        const expectedBalance = expectedReferrals * 3; // 2 * 3 = 6 stars
        
        if (finalReferrer.referrals_count >= expectedReferrals) {
            console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
        }

        // Clean up test data
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await db.executeQuery('DELETE FROM users WHERE id IN ($1, $2, $3, $4)', [referrerId, newUserId, orphanUserId, retroUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

        console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û!');
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç'); 
        console.log('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –†–µ—Ç—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('\nüöÄ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
        console.log('üí° –¢–µ–ø–µ—Ä—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–∞–ø—á–∏ + –ø–æ–¥–ø–∏—Å–∫–∏');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
        console.error('üìç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    } finally {
        await db.closeConnection();
        console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// Run the test
if (require.main === module) {
    testReferralSystem();
}

module.exports = { testReferralSystem };
