/**
 * Test script for SubGram API integration
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SubGram API
 */

const { subgramAPI } = require('./subgram-api');
const db = require('./database');

async function testSubGramIntegration() {
    console.log('üß™ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SubGram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

    try {
        // 1. Test database connection
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

        // 2. Test SubGram settings
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram...');
        const settings = await db.getSubGramSettings();
        console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram:', {
            enabled: settings?.enabled,
            hasApiKey: !!settings?.api_key,
            maxSponsors: settings?.max_sponsors,
            apiUrl: settings?.api_url
        });
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n');

        // 3. Test SubGram API configuration
        console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SubGram API...');
        const config = subgramAPI.getConfig();
        console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:', config);
        console.log('‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞\n');

        // 4. Test SubGram API request (with test data)
        console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ SubGram API...');
        const testUserId = 123456789;
        const testRequest = {
            userId: testUserId.toString(),
            chatId: testUserId.toString(),
            maxOP: 3,
            action: 'subscribe',
            excludeChannelIds: [],
            withToken: true // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ SubGram API...');
        const apiResponse = await subgramAPI.requestSponsors(testRequest);
        
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç SubGram API:');
        console.log('  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ:', apiResponse.success);
        if (apiResponse.success && apiResponse.data) {
            console.log('  ‚Ä¢ –°—Ç–∞—Ç—É—Å:', apiResponse.data.status);
            console.log('  ‚Ä¢ –ö–æ–¥:', apiResponse.data.code);
            console.log('  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ:', apiResponse.data.message);
            console.log('  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫:', apiResponse.data.links?.length || 0);
            
            if (apiResponse.data.additional?.sponsors) {
                console.log('  ‚Ä¢ –°–ø–æ–Ω—Å–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:', apiResponse.data.additional.sponsors.length);
                
                // Show first few sponsors
                const sponsors = apiResponse.data.additional.sponsors.slice(0, 3);
                sponsors.forEach((sponsor, index) => {
                    console.log(`    ${index + 1}. ${sponsor.resource_name} (${sponsor.status})`);
                });
            }
        } else {
            console.log('  ‚Ä¢ –û—à–∏–±–∫–∞:', apiResponse.error);
        }
        console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω\n');

        // 5. Test data processing
        if (apiResponse.success && apiResponse.data) {
            console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
            const processedData = subgramAPI.processAPIResponse(apiResponse.data);
            
            console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
            console.log('  ‚Ä¢ –°—Ç–∞—Ç—É—Å:', processedData.status);
            console.log('  ‚Ä¢ –ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:', processedData.needsSubscription);
            console.log('  ‚Ä¢ –ù—É–∂–µ–Ω –ø–æ–ª:', processedData.needsGender);
            console.log('  ‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:', processedData.allSubscribed);
            console.log('  ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å:', processedData.canProceed);
            console.log('  ‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤:', processedData.channels.length);
            console.log('  ‚Ä¢ –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:', processedData.channelsToSubscribe.length);
            
            if (processedData.channelsToSubscribe.length > 0) {
                console.log('üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:');
                processedData.channelsToSubscribe.forEach((channel, index) => {
                    console.log(`    ${index + 1}. ${channel.name} - ${channel.link}`);
                });
            }
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–∞\n');

            // 6. Test message formatting
            console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏ÔøΩÔøΩ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...');
            const formattedMessage = subgramAPI.formatChannelsMessage(processedData);
            
            console.log('üí¨ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
            console.log('  ‚Ä¢ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', formattedMessage.message.length);
            console.log('  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫:', formattedMessage.buttons.length);
            console.log('  ‚Ä¢ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è:');
            console.log('   ', formattedMessage.message.substring(0, 200) + '...');
            console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
        }

        // 7. Test database operations
        console.log('7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
        
        // Log API request
        await db.logSubGramAPIRequest(
            testUserId,
            'test_request',
            testRequest,
            apiResponse.data || {},
            apiResponse.success,
            apiResponse.error || null
        );
        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥');

        // Get API history
        const history = await db.getSubGramAPIRequestHistory(null, 5);
        console.log('üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:', history.length, '–∑–∞–ø–∏—Å–µ–π');

        // Test session operations
        if (apiResponse.success && apiResponse.data) {
            const processedData = subgramAPI.processAPIResponse(apiResponse.data);
            await db.saveSubGramUserSession(testUserId, apiResponse.data, processedData);
            console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');

            const session = await db.getSubGramUserSession(testUserId);
            console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', !!session);

            if (processedData.channelsToSubscribe.length > 0) {
                await db.saveSubGramChannels(testUserId, processedData.channelsToSubscribe);
                console.log('‚úÖ –ö–∞–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

                const channels = await db.getSubGramChannels(testUserId);
                console.log('‚úÖ –ö–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', channels.length, '—à—Ç—É–∫');
            }
        }
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç\n');

        // 8. Cleanup
        console.log('8Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await db.deleteSubGramUserSession(testUserId);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n');

        console.log('üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã SubGram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
        // Show summary
        console.log('\nüìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ SubGram API: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î: —Ä–∞–±–æ—Ç–∞—é—Ç');
        console.log('\nüöÄ SubGram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message);
        console.error('üìç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        console.log('\nüõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
    } finally {
        // Close database connection
        await db.closeConnection();
        console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// Run the test
if (require.main === module) {
    testSubGramIntegration();
}

module.exports = { testSubGramIntegration };
