const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const config = require('./config');
const Database = require('./database');
const SubGram = require('./subgram');
const WebhookHandler = require('./webhook-handler');

const bot = new TelegramBot(config.BOT_TOKEN, {
    polling: {
        interval: 1000,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
const userCommandLimiter = new Map();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async function checkReferralConditions(userId) {
    try {
        const user = await Database.getUser(userId);
        if (!user || !user.referrer_id) {
            return; // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        const subscriptionStatus = await checkUserSubscription(userId, userId);
        if (!subscriptionStatus.isSubscribed) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª ${userId} –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö SubGram –∑–∞–¥–∞–Ω–∏–π (–∏–º–µ–Ω–Ω–æ –∑–∞–¥–∞–Ω–∏–π, –∞ –Ω–µ –æ–±—â–∏—Ö –∑–∞–¥–∞—á)
        const completedSubgramTasks = await Database.getUserSubgramTasksCount(userId);
        if (completedSubgramTasks < 2) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª —Ç–æ–ª—å–∫–æ ${completedSubgramTasks}/2 SubGram –∑–∞–¥–∞–Ω–∏–π`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
        if (user.referral_completed) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –±—ã–ª–∞ –Ω–∞—áÔøΩÔøΩ—Å–ª–µ–Ω–∞`);
            return;
        }

        // –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        console.log(`üéâ –†–µ—Ñ–µ—Ä–∞–ª ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è! –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${user.referrer_id}`);

        await Database.updateUserBalance(user.referrer_id, 2);
        await Database.updateUserPoints(user.referrer_id, 1);

        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞
        await Database.pool.query(
            'UPDATE users SET referral_completed = TRUE WHERE user_id = $1',
            [userId]
        );

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await Database.pool.query(
            'UPDATE users SET total_referrals = total_referrals + 1, daily_referrals = daily_referrals + 1, referral_earned = referral_earned + 2 WHERE user_id = $1',
            [user.referrer_id]
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try {
            await bot.sendMessage(user.referrer_id,
                'üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è!\n' +
                '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã\n' +
                '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª 2 –∑–∞–¥–∞–Ω–∏—è\n\n' +
                'üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 2 –∑–≤–µ–∑–¥—ã\n' +
                'üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –æ—á–∫–æ'
            );
        } catch (e) {
            console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ÔøΩÔøΩ–µ—Ñ–µ—Ä–µ—Ä—É ${user.referrer_id}`);
        }

    } catch (error) {
        console.error('–ûÔøΩÔøΩ–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤ÔøΩÔøΩ–π:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook handler
const webhookHandler = new WebhookHandler(bot);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initBot() {
    try {
        await Database.init();
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

        // –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        const webhookPort = process.env.PORT || process.env.WEBHOOK_PORT || 3000;
        console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–ΩÔøΩÔøΩ–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        console.log('- PORT:', process.env.PORT);
        console.log('- WEBHOOK_PORT:', process.env.WEBHOOK_PORT);
        console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä—Ç:', webhookPort);
        await webhookHandler.start(webhookPort);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await bot.setMyCommands([
            { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
            { command: 'menu', description: '–ì–ª–∞–≤–ΩÔøΩÔøΩ–µ –º–µ–Ω—é' },
            { command: 'admin', description: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }
        ]);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
function createMainMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
            [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
            [{ text: 'üñ± –ö–ª–∏–∫–µ—Ä', callback_data: 'clicker' }],
            [{ text: 'üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data: 'withdraw' }],
            [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
            [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data: 'instructions' }],
            [{ text: 'üèÜ –†–µ–πÔøΩÔøΩ–∏–Ω–≥–∏', callback_data: 'ratings' }],
            [{ text: 'üéÅ –ö–µ–π—Å—ã', callback_data: 'cases' }],
            [{ text: 'üé≤ –õ–æ—Ç–µ—Ä–µ—è', callback_data: 'lottery' }]
        ]
    };
}

function createBackToMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
}

function createProfileKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'ÔøΩÔøΩÔøΩÔøΩ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promocode' }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π)
async function checkUserSubscription(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤–µ–±—Ö—É–∫–æ–≤ (—Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ - –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        const cachedStatus = webhookHandler.getUserSubscriptionStatus(userId);

        if (cachedStatus.lastUpdate && (Date.now() - cachedStatus.lastUpdate) < 5 * 60 * 1000) {
            console.log(`üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            console.log(`üìä –ö–µ—à:`, cachedStatus);

            if (cachedStatus.isSubscribed === false && cachedStatus.unsubscribedLinks.length > 0) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –µ—ÅÔøΩÔøΩ—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                return {
                    isSubscribed: false,
                    subscriptionData: {
                        links: cachedStatus.unsubscribedLinks,
                        status: 'webhook_cache'
                    }
                };
            }

            if (cachedStatus.isSubscribed === true) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                return {
                    isSubscribed: true,
                    subscriptionData: { status: 'webhook_cache' }
                };
            }
        }

        // –ï—Å–ª–∏ ÔøΩÔøΩ–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ SubGram
        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ SubGram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const taskChannels = await SubGram.checkSubscription(
            userId, 
            chatId, 
            firstName, 
            languageCode, 
            isPremium
        );

        console.log(`üì• SubGram –æ—Ç–≤–µ—Ç:`, JSON.stringify(taskChannels, null, 2));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç SubGram
        if (taskChannels.status === 'error') {
            console.log(`‚ùå –û—à–∏–±–∫–∞ SubGram, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–∞–∫ fallback`);
            
            // –í —Å–ª—É—á–∞–µ –æ—àÔøΩÔøΩ–±–∫–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if (cachedStatus.lastUpdate) {
                return {
                    isSubscribed: cachedStatus.isSubscribed !== false,
                    subscriptionData: { 
                        status: 'fallback_cache',
                        links: cachedStatus.unsubscribedLinks 
                    }
                };
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω (fallback –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æÔøΩÔøΩ–∞)
            return { isSubscribed: true, subscriptionData: { status: 'error_fallback' } };
        }

        // –í–ê–ñ–ù–û: —Å—Ç–∞—Ç—É—Å "warning" –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω!
        if (taskChannels.status === 'warning') {
            console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω (—Å—Ç–∞—Ç—É—Å warning): ${taskChannels.message}`);

            // –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ warning SubGram –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è
            if (!taskChannels.links || taskChannels.links.length === 0) {
                console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (warning –±–µ–∑ —Å—Å—ã–ª–æ–∫)`);

                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
                const attempts = [
                    // 1. –ü–æ–ø—ã—Ç–∫–∞ —Å MaxOP=1 (–∫–∞–∫ –∑–∞–¥–∞–Ω–∏—è)
                    () => SubGram.getTaskChannels(userId, chatId, firstName, languageCode, isPremium),
                    // 2. –ü–æ–ø—ã—Ç–∫–∞ —Å –æ–±—ã—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–æ MaxOP=1
                    () => SubGram.getChannelLinks(userId, chatId, firstName, languageCode, isPremium)
                ];

                for (let i = 0; i < attempts.length; i++) {
                    try {
                        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/2 –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫`);
                        const linksCheck = await attempts[i]();

                        if (linksCheck.links && linksCheck.links.length > 0) {
                            taskChannels.links = linksCheck.links;
                            taskChannels.additional = linksCheck.additional;
                            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å—Å—ã–ª–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${linksCheck.links.length} –∫–∞–Ω–∞–ª–æ–≤`);
                            break;
                        } else {
                            console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ –¥–∞–ª–∞ —Å—Å—ã–ª–æ–∫`);
                        }
                    } catch (e) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ ${i + 1}:`, e.message);
                    }
                }

                if (!taskChannels.links || taskChannels.links.length === 0) {
                    console.log(`‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                }
            }

            return {
                isSubscribed: false,
                subscriptionData: taskChannels
            };
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if (taskChannels.links && taskChannels.links.length > 0) {
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω, –µ—Å—Ç—å ${taskChannels.links.length} –∫–∞–Ω–∞–ª–æ–≤`);
            return {
                isSubscribed: false,
                subscriptionData: taskChannels
            };
        }

        // –°—Ç–∞—Ç—É—Å "ok" –∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        if (taskChannels.status === 'ok') {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥ÔøΩÔøΩ–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (—Å—Ç–∞—Ç—É—Å ok)`);
            return {
                isSubscribed: true,
                subscriptionData: taskChannels
            };
        }

        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback)
        console.log(`ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${taskChannels.status}, —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º`);
        return {
            isSubscribed: true,
            subscriptionData: taskChannels
        };
        
    } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–∞–∫ fallback
        const cachedStatus = webhookHandler.getUserSubscriptionStatus(userId);
        if (cachedStatus.lastUpdate) {
            console.log(`üóÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –∫–∞–∫ fallback –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ API`);
            return {
                isSubscribed: cachedStatus.isSubscribed !== false,
                subscriptionData: { 
                    status: 'fallback_cache',
                    links: cachedStatus.unsubscribedLinks
                }
            };
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ API, –Ω–∏ –∫–µ—à–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω (fallback)
        console.log(`‚ö†ÔøΩÔøΩ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback (–ø–æ–¥–ø–∏—Å–∞–Ω)`);
        return { isSubscribed: true, subscriptionData: { status: 'no_data_fallback' } };
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const referralCode = match[1] ? match[1].trim() : null;

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã)
    const now = Date.now();
    const lastCommand = userCommandLimiter.get(userId);
    if (lastCommand && (now - lastCommand) < 3000) {
        console.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return;
    }
    userCommandLimiter.set(userId, now);

    try {
        let user = await Database.getUser(userId);
        
        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const referrerId = referralCode ? parseInt(referralCode) : null;
            user = await Database.createUser({
                userId: userId,
                username: msg.from.username,
                firstName: msg.from.first_name,
                languageCode: msg.from.language_code || 'ru',
                isPremium: msg.from.is_premium || false,
                referrerId: referrerId
            });
            
            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
            if (referrerId) {
                console.log(`üë• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referrerId}`);
                // –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ñ—É–Ω–∫—ÜÔøΩÔøΩ–∏ checkReferralConditions()
            }
        }
        
        // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É - —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!
        console.log(`üîç –ü—Ä–æÔøΩÔøΩ–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const subscriptionStatus = await checkUserSubscription(
            userId, 
            chatId,
            msg.from.first_name || '',
            msg.from.language_code || 'ru',
            msg.from.is_premium || false
        );
        
        console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:`, subscriptionStatus);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (–¥–∞–∂–µ –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç—ã–µ)
        if (!subscriptionStatus.isSubscribed) {
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø`);

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if (subscriptionStatus.subscriptionData?.links?.length > 0) {
                console.log(`üì¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${subscriptionStatus.subscriptionData.links.length} —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤`);
                const message = SubGram.formatSubscriptionMessage(
                    subscriptionStatus.subscriptionData.links,
                    subscriptionStatus.subscriptionData.additional?.sponsors
                );
                const keyboard = SubGram.createSubscriptionKeyboard(subscriptionStatus.subscriptionData.links);
                await bot.sendMessage(chatId, message, { reply_markup: keyboard });
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                console.log(`‚ö†Ô∏è –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ`);
                await bot.sendMessage(chatId,
                    'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n\n' +
                    '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
                );
            }
            return; // –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        }

        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æÔøΩÔøΩ –º–µ–Ω—é`);
        await showMainMenu(chatId, userId);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –üÔøΩÔøΩ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, userId = null) {
    const message = 'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è ÔøΩÔøΩ–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!\n\n' +
                   '‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n' +
                   '‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n' +
                   '‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n' +
                   '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∏–∫–µ—Ä\n' +
                   '‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö\n\n' +
                   '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

    const keyboard = createMainMenuKeyboard();

    try {
        await bot.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑ÔøΩÔøΩ–≤–∞—Ç–µ–ª—è
        let user = await Database.getUser(userId);
        if (!user) {
            await bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start');
            return;
        }

        // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—ÄÔøΩÔøΩÔøΩ–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –í–°–ï–• –¥–µ–π—Å—Ç–≤–∏–π (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
        const allowedWithoutSubscription = [
            'check_subscription', 
            'admin_', 
            'approve_', 
            'reject_',
            'disabled'  // –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        ];
        
        const isAllowedCommand = allowedWithoutSubscription.some(cmd => data.startsWith(cmd)) || data === 'disabled';
        
        if (!isAllowedCommand) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: ${data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            const subscriptionStatus = await checkUserSubscription(
                userId, 
                chatId,
                callbackQuery.from.first_name || '',
                callbackQuery.from.language_code || 'ru',
                callbackQuery.from.is_premium || false
            );

            if (!subscriptionStatus.isSubscribed && subscriptionStatus.subscriptionData?.links?.length > 0) {
                console.log(`üîí –ë–õ–û–ö–òÔøΩÔøΩ–£–ï–ú –¥–µ–π—Å—Ç–≤–∏–µ "${data}" –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ªÔøΩÔøΩ–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è ÔøΩÔøΩ–æ–¥–ø–∏—Å–∫–∏
                const subscriptionData = subscriptionStatus.subscriptionData;
                const message = SubGram.formatSubscriptionMessage(subscriptionData.links, subscriptionData.additional?.sponsors);
                const keyboard = SubGram.createSubscriptionKeyboard(subscriptionData.links);

                try {
                    await bot.editMessageText(message, {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id,
                        reply_markup: keyboard
                    });
                } catch (e) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.sendMessage(chatId, message, { reply_markup: keyboard });
                }

                await bot.answerCallbackQuery(callbackQuery.id, '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!');
                return; // –í–ê–ñ–ù–û: –±–ª–æ–∫–∏—Ä—É–µ–º ÔøΩÔøΩ—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            }
        }

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
        await bot.answerCallbackQuery(callbackQuery.id);
        
        switch (data) {
            case 'check_subscription':
                await handleSubscriptionCheck(chatId, userId, message.message_id, callbackQuery.id);
                break;
                
            case 'main_menu':
                await editMainMenu(chatId, message.message_id);
                break;
                
            case 'profile':
                await showProfile(chatId, userId, message.message_id);
                break;
                
            case 'invite':
                await showInviteInfo(chatId, userId, message.message_id);
                break;
                
            case 'clicker':
                await showClicker(chatId, userId, message.message_id);
                break;
                
            case 'click':
                await handleClick(chatId, userId, message.message_id, callbackQuery.id);
                break;
                
            case 'withdraw':
                await showWithdrawOptions(chatId, userId, message.message_id);
                break;
                
            case 'tasks':
                await showTasks(chatId, userId, message.message_id);
                break;
                
            case 'instructions':
                await showInstructions(chatId, message.message_id);
                break;
                
            case 'ratings':
                await showRatings(chatId, message.message_id);
                break;
                
            case 'cases':
                await showCases(chatId, userId, message.message_id);
                break;
                
            case 'lottery':
                await showLottery(chatId, message.message_id);
                break;
                
            case 'promocode':
                await handlePromocodeInput(chatId, userId);
                break;
                
            case 'disabled':
                // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                break;
                
            default:
                if (data.startsWith('withdraw_')) {
                    const amount = parseInt(data.split('_')[1]);
                    await handleWithdraw(chatId, userId, amount, message.message_id, callbackQuery.id);
                } else if (data.startsWith('rating_')) {
                    const type = data.split('_')[1];
                    await showRatingType(chatId, type, message.message_id);
                } else if (data.startsWith('admin_')) {
                    await handleAdminCallback(chatId, userId, data, message.message_id, callbackQuery.id);
                } else if (data.startsWith('approve_') || data.startsWith('reject_')) {
                    await handleWithdrawalAction(chatId, userId, data, callbackQuery.id);
                } else if (data.startsWith('broadcast_')) {
                    const type = data.split('_')[1];
                    await handleBroadcast(type);
                    await bot.answerCallbackQuery(callbackQuery.id, 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
                } else if (data === 'admin_back') {
                    await showAdminPanel(chatId);
                } else if (data === 'open_case') {
                    await handleOpenCase(chatId, userId, message.message_id, callbackQuery.id);
                } else if (data === 'check_task') {
                    await handleTaskCheck(chatId, userId, message.message_id, callbackQuery.id);
                } else if (data === 'skip_task') {
                    await showTasks(chatId, userId, message.message_id);
                } else if (data.startsWith('check_custom_task_')) {
                    const taskId = parseInt(data.split('_')[3]);
                    await handleCustomTaskCheck(chatId, userId, taskId, message.message_id, callbackQuery.id);
                }
                break;
        }
        
    } catch (error) {
        console.error('ÔøΩÔøΩ—à–∏ÔøΩÔøΩ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        try {
            await bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        } catch (e) {}
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function handleSubscriptionCheck(chatId, userId, messageId, callbackQueryId = null) {
    console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    const subscriptionStatus = await checkUserSubscription(
        userId,
        chatId,
        '', // –∏–ºÔøΩÔøΩ –Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        'ru',
        false
    );

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', subscriptionStatus);

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    if (subscriptionStatus.isSubscribed || !subscriptionStatus.subscriptionData?.links?.length) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è
        const welcomeMessage = 'üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n\n' +
                              '‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:\n' +
                              '‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n' +
                              '‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n' +
                              '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∏–∫–µÔøΩÔøΩ\n' +
                              '‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö\n\n' +
                              '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        const keyboard = createMainMenuKeyboard();

        await bot.editMessageText(welcomeMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

        if (callbackQueryId) {
            await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await checkReferralConditions(userId);
    } else {
        // –í—Å–µ –µ—â–µ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        const message = SubGram.formatSubscriptionMessage(
            subscriptionStatus.subscriptionData.links, 
            subscriptionStatus.subscriptionData.additional?.sponsors
        );
        const keyboard = SubGram.createSubscriptionKeyboard(subscriptionStatus.subscriptionData.links);

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

        if (callbackQueryId) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!');
        }
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
async function editMainMenu(chatId, messageId) {
    const message = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    const keyboard = createMainMenuKeyboard();
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ...
// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async function showProfile(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const completedTasks = await Database.getUserCompletedTasks(userId);
    const referralStats = await Database.getReferralStats(userId);

    const message = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n` +
                   `üÜî ID: ${user.user_id}\n` +
                   `üë§ –ò–º—è: ${user.first_name}\n` +
                   `üåü –ë–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤—ë–∑–¥\n` +
                   `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referral_earned}\n` +
                   `üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.total_earned}\n` +
                   `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.active}\n` +
                   `‚è≥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.inactive}\n` +
                   `üìà –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: ${user.daily_referrals}\n` +
                   `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${completedTasks}\n` +
                   `üèÜ –û—á–∫–∏: ${user.points}`;

    const keyboard = createProfileKeyboard();

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
async function showInviteInfo(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const botUsername = (await bot.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${userId}`;
    const referralStats = await Database.getReferralStats(userId);

    const message = `üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n\n` +
                   `üéØ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã!\n\n` +
                   `üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: 2 –∑–≤–µ–∑–¥—ã\n` +
                   `üìã –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞:\n` +
                   `‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã\n` +
                   `‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–ª 2 –∑–∞–¥–∞–Ω–∏—è\n\n` +
                   `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n${referralLink}\n\n` +
                   `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                   `‚úÖ –ê–∫—Ç–∏–≤ÔøΩÔøΩ—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.active}\n` +
                   `‚è≥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.inactive}\n` +
                   `üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${user.daily_referrals}\n` +
                   `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.referral_earned} –∑–≤—ë–∑–¥`;
    
    const keyboard = createBackToMenuKeyboard();
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–∫–µ—Ä
async function showClicker(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const today = new Date().toDateString();
    const lastClickDate = user.last_click_time ? new Date(user.last_click_time).toDateString() : null;
    
    let clicksToday = 0;
    if (lastClickDate === today) {
        clicksToday = user.clicks_today || 0;
    }
    
    const remainingClicks = Math.max(0, 10 - clicksToday);
    const nextClickDelay = clicksToday > 0 ? clicksToday * 5 : 0;
    
    let canClick = true;
    let timeToWait = 0;
    
    if (user.last_click_time && lastClickDate === today) {
        const timeSinceLastClick = Date.now() - new Date(user.last_click_time).getTime();
        const requiredWait = nextClickDelay * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        if (timeSinceLastClick < requiredWait) {
            canClick = false;
            timeToWait = Math.ceil((requiredWait - timeSinceLastClick) / 1000 / 60);
        }
    }
    
    const message = `üñ± –ö–ª–∏–∫–µ—Ä\n\n` +
                   `üí∞ –ó–∞ –∫–ª–∏–∫: 0.1 –∑–≤–µ–∑–¥—ã\n` +
                   `üìä –ö–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${clicksToday}/10\n` +
                   `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤: ${remainingClicks}\n\n` +
                   `${canClick ? '‚úÖ –ú–æ–∂–µ—Ç–µ –∫–ª–∏–∫–∞—Ç—å!' : `‚è∞ –ñ–¥–∏—Ç–µ ${timeToWait} –º–∏–Ω.`}\n\n` +
                   `‚ÑπÔ∏è –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–∫–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ΩÔøΩÔøΩ 5 –º–∏–Ω—É—Ç`;
    
    const keyboard = {
        inline_keyboard: [
            [{ 
                text: canClick && remainingClicks > 0 ? 'üñ± –ö–õ–ò–ö!' : '‚ùå –ùÔøΩÔøΩ–¥–æ—Å—Ç—É–ø–Ω–æ', 
                callback_data: canClick && remainingClicks > 0 ? 'click' : 'disabled'
            }],
            [{ text: 'ÔøΩÔøΩÔøΩ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –û–±—ÄÔøΩÔøΩ–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
async function handleClick(chatId, userId, messageId, callbackQueryId) {
    try {
        const clicksToday = await Database.updateUserClicks(userId);
        await Database.updateUserBalance(userId, 0.1);
        await Database.updateUserPoints(userId, 1);

        await bot.answerCallbackQuery(callbackQueryId, 'üéâ +0.1 –∑–≤–µ–∑–¥—ã! +1 –æ—á–∫–æ!');
        await showClicker(chatId, userId, messageId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ãÔøΩÔøΩ–æ–¥–∞
async function showWithdrawOptions(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    
    const message = `üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥\n\n` +
                   `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤—ë–∑–¥\n\n` +
                   `üìã –í—ã–±–µ—ÄÔøΩÔøΩ—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;
    
    const amounts = [15, 25, 50, 100, 1300];
    const keyboard = {
        inline_keyboard: []
    };
    
    amounts.forEach(amount => {
        keyboard.inline_keyboard.push([{
            text: `üí∞ ${amount} –∑–≤—ë–∑–¥`,
            callback_data: `withdraw_${amount}`
        }]);
    });
    
    keyboard.inline_keyboard.push([{
        text: 'üè† –í –≥–ª–∞–≤–Ω–æÔøΩÔøΩ –º–µ–Ω—é',
        callback_data: 'main_menu'
    }]);
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function handleWithdraw(chatId, userId, amount, messageId, callbackQueryId) {
    const user = await Database.getUser(userId);

    if (user.balance < amount) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
        return;
    }
    
    try {
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await Database.updateUserBalance(userId, amount, 'subtract');
        
        // –°–æ–∑–¥–∞–µ–º ÔøΩÔøΩ–∞—è–≤–∫—É
        const request = await Database.createWithdrawalRequest(userId, amount);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω —á–∞—Ç
        const adminMessage = `üí∞ –ù–æ–≤–∞ÔøΩÔøΩ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${request.id}\n\n` +
                            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}\n` +
                            `üÜî ID: ${user.user_id}\n` +
                            `üì± Username: @${user.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
                            `üí∞ –°—É–º–º–∞: ${amount} –∑–≤—ë–∑–¥\n` +
                            `üíé –û—ÅÔøΩÔøΩ–∞—Ç–æ–∫: ${user.balance - amount} –∑–≤—ë–∑–¥\n` +
                            `üîó –ü—Ä–æ—Ñ–∏–ª—å: tg://user?id=${user.user_id}`;

        const adminKeyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `approve_${request.id}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${request.id}` }
                ]
            ]
        };

        await bot.sendMessage(config.ADMIN_CHAT_ID, adminMessage, {
            reply_markup: adminKeyboard
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—ÇÔøΩÔøΩ–ª—è
        const userMessage = `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n` +
                           `üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${request.id}\n` +
                           `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`;
        
        await bot.editMessageText(userMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑ÔøΩÔøΩ–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
    }
}

// –ü–æ–∫–∞–∑ÔøΩÔøΩ—Ç—å –∑–∞–¥–∞–Ω–∏—è
// –ü–æ–∫–∞–∑–∞ÔøΩÔøΩ—å –∑–∞–¥–∞–Ω–∏—è
async function showTasks(chatId, userId, messageId) {
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ getTaskChannels (–±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ —á–µ–º –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        const taskChannels = await SubGram.getTaskChannels(userId, chatId);
        console.log('SubGram –∑–∞–¥–∞–Ω–∏—è (getTaskChannels):', JSON.stringify(taskChannels, null, 2));
        
        // 2. –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ SubGram –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const completedSubgramTasks = await Database.getCompletedSubgramTasks(userId);
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª ${completedSubgramTasks.length} SubGram –∑–∞–¥–∞–Ω–∏–π`);
        
        // 3. –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã - –∏—Å–∫ÔøΩÔøΩ—é—á–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–∞–∫ –∑–∞–¥–∞–Ω–∏—è
        let availableChannels = [];
        if (subscriptionCheck.links && subscriptionCheck.links.length > 0) {
            availableChannels = subscriptionCheck.links.filter(link => 
                !completedSubgramTasks.includes(link)
            );
        }
        
        console.log(`–î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${availableChannels.length}`);
        
        if (subscriptionCheck.status === 'error') {
            // –û—à–∏–±–∫–∞ SubGram - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const message = `üìã –ó–∞–¥–∞–Ω–∏—è\n\n` +
                           `‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏–π.\n` +
                           `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: createBackToMenuKeyboard()
            });
        } else if (availableChannels.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ü–ï–†–í–û–ï –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            const taskLink = availableChannels[0];
            const sponsorIndex = subscriptionCheck.links.indexOf(taskLink);
            const sponsor = subscriptionCheck.additional?.sponsors?.[sponsorIndex];
            const channelName = sponsor?.resource_name || '–ö–∞–Ω–∞–ª';
            
            const message = `üìã –î–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n` +
                           `üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${channelName}\n` +
                           `üí∞ –ù–∞–≥—Ä–∞–¥–∞: 0.3 –∑–≤–µ–∑–¥—ã\n` +
                           `üèÜ –ë–æ–Ω—É—Å: +1 –æ—á–∫–æ\n\n` +
                           `‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æÔøΩÔøΩ–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"`;
            
            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª', url: taskLink }],
                    [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'check_task' }],
                    [{ text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_task' }],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            };
            
            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard
            });
} else {
            // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö SubGram –∑–∞–¥–∞–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            const customTasks = await Database.getTasks(false); // false = –Ω–µ SubGram –∑–∞–¥–∞–Ω–∏—è
            
            // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            let availableCustomTask = null;
            for (const task of customTasks) {
                const isCompleted = await Database.isTaskCompleted(userId, task.id);
                if (!isCompleted) {
                    availableCustomTask = task;
                    break;
                }
            }
            
            if (availableCustomTask) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                const message = `üìã –î–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n` +
                               `üì¢ ${availableCustomTask.title}\n` +
                               `üìù ${availableCustomTask.description || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ'}\n` +
                               `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${availableCustomTask.reward} –∑–≤—ë–∑–¥\n` +
                               `üèÜ –ë–æ–Ω—É—Å: +1 –æ—á–∫–æ\n\n` +
                               `‚ÑπÔ∏è –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"`;
                
                const keyboard = {
                    inline_keyboard: [
                        availableCustomTask.link ? [{ text: 'üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é', url: availableCustomTask.link }] : [],
                        [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: `check_custom_task_${availableCustomTask.id}` }],
                        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æÔøΩÔøΩ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ].filter(row => row.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                };
                
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard
                });
            } else {
                // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤–æ–æ–±—â–µ
                const message = `üìã –ó–∞–¥–∞–Ω–∏—è\n\n` +
                               `‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n` +
                               `‚è∞ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.`;
                
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: createBackToMenuKeyboard()
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
        const message = `üìã –ó–∞–¥–∞–Ω–∏—è\n\n` +
                       `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.\n` +
                       `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        
        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async function showInstructions(chatId, messageId) {
    const message = `ÔøΩÔøΩ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É\n\n` +
                   `üåü –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã:\n\n` +
                   `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:\n` +
                   `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n` +
                   `‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: 2 –∑–≤–µ–∑–¥—ã\n` +
                   `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 2 –∑–∞–¥–∞–Ω–∏ÔøΩÔøΩ\n\n` +
                   `üñ± –öÔøΩÔøΩ–∏–∫–µ—Ä:\n` +
                   `‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –¥–æ 10 —Ä–∞–∑ –≤ ÔøΩÔøΩ–µ–Ω—å\n` +
                   `‚Ä¢ –ó–∞ –∫–ª–∏–∫: 0.1 –∑–≤–µ–∑–¥—ã\n` +
                   `‚Ä¢ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è\n\n` +
                   `üìã –ó–∞–¥–∞–Ω–∏—è:\n` +
                   `‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã\n` +
                   `‚Ä¢ –ó–∞ –∑–∞–¥ÔøΩÔøΩ–Ω–∏–µ: 0.3 –∑–≤–µ–∑–¥—ã\n\n` +
                   `üèÜ –†–µ–π—Ç–∏–Ω–≥–∏:\n` +
                   `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏\n` +
                   `‚Ä¢ –¢–æ–ø 5 –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å—ã\n\n` +
                   `üéÅ –ö–µ–π—Å—ã:\n` +
                   `‚Ä¢ 1 –∫–µ–π—Å –≤ –¥–µ–Ω—å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
                   `‚Ä¢ –í—ã–∏–≥—Ä—ãÔøΩÔøΩ: 1-10 –∑–≤—ë–∑–¥\n\n` +
                   `üí∞ –í—ã–≤–æ–¥:\n` +
                   `‚Ä¢ –ú–∏–Ω–∏–º—É–º: 15 –∑–≤—ë–∑–¥\n` +
                   `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∞–º–∏`;
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: createBackToMenuKeyboard()
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å ÔøΩÔøΩ–µ–π—Ç–∏–Ω–≥–∏
async function showRatings(chatId, messageId) {
    const message = `üèÜ –†–µ–π—Ç–∏–Ω–≥–∏\n\n` +
                   `üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:`;
    
    const keyboard = {
        inline_keyboard: [
            [{ text: 'üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'rating_overall' }],
            [{ text: 'üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'rating_weekly' }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –üÔøΩÔøΩ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ç–∏–ø—É
async function showRatingType(chatId, type, messageId) {
    let leaderboard, title;
    
    if (type === 'overall') {
        leaderboard = await Database.getOverallLeaderboard();
        title = 'üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥';
    } else {
        leaderboard = await Database.getWeeklyLeaderboard();
        title = 'üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥';
    }
    
    let message = `${title}\n\n`;
    
    if (leaderboard.length === 0) {
        message += '‚ÑπÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç';
    } else {
        leaderboard.forEach((user, index) => {
            const position = index + 1;
            const emoji = position <= 3 ? ['ü•á', 'ü•à', 'ü•â'][position - 1] : `${position}.`;
            const points = type === 'overall' ? user.points : user.weekly_points;
            const name = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            
            message += `${emoji} ${name} - ${points} –æ—á–∫–æ–≤\n`;
        });
        
        if (type === 'weekly') {
            message += `\nüéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø 5:\n`;
            message += `ü•á 1 –º–µ—Å—Ç–æ: 100 –∑–≤—ë–∑–¥\n`;
            message += `ü•à 2 –º–µ—Å—Ç–æ: 75 –∑–≤—ë–∑–¥\n`;
            message += `ü•â 3 –º–µ—Å—Ç–æ: 50 –∑–≤—ë–∑–¥\n`;
            message += `4 –º–µ—Å—Ç–æ: 25 –∑–≤—ë–∑–¥\n`;
            message += `5 –º–µ—Å—Ç–æ: 15 –∑–≤—ë–∑–¥`;
        }
    }
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: createBackToMenuKeyboard()
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã
async function showCases(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const today = new Date().toDateString();
    const lastCaseDate = user.last_case_open ? new Date(user.last_case_open).toDateString() : null;
    
    const canOpenCase = user.daily_referrals >= 5 && lastCaseDate !== today;
    
    const message = `üéÅ –ö–µ–π—Å—ã\n\n` +
                   `üìã –£—Å–ª–æ–≤–∏—è:\n` +
                   `‚Ä¢ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å\n` +
                   `‚Ä¢ 1 –∫–µ–π—Å –≤ –¥–µ–Ω—å\n\n` +
                   `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                   `üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${user.daily_referrals}\n` +
                   `üéÅ –ö–µ–π—Å ${lastCaseDate === today ? '—É–∂–µ –æ—Ç–∫ÔøΩÔøΩ—ã—Ç' : '–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n` +
                   `üí∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: 1-10 –∑–≤—ëÔøΩÔøΩ–¥`;
    
    const keyboard = {
        inline_keyboard: [
            [{ 
                text: canOpenCase ? 'üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å' : 'ÔøΩÔøΩ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 
                callback_data: canOpenCase ? 'open_case' : 'disabled'
            }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç–µ—Ä–µ–∏
async function showLottery(chatId, messageId) {
    const lotteries = await Database.getActiveLotteries();
    
    let message = `üé≤ –õ–æ—Ç–µ—Ä–µ–∏\n\n`;
    
    if (lotteries.length === 0) {
        message += '‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—ÄÔøΩÔøΩ–π –Ω–µ—Ç';
    } else {
        lotteries.forEach(lottery => {
            const progress = (lottery.sold_tickets / lottery.total_tickets * 100).toFixed(1);
            message += `üéü ${lottery.name}\n`;
            message += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} –∑–≤—ë–∑–¥\n`;
            message += `üé´ –ë–∏–ª–µÔøΩÔøΩ–æ–≤: ${lottery.sold_tickets}/${lottery.total_tickets} (${progress}%)\n`;
            message += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${lottery.winners_count}\n\n`;
        });
    }
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: createBackToMenuKeyboard()
    });
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—ÄÔøΩÔøΩ–º–æ–∫ÔøΩÔøΩ–¥–∞
async function handlePromocodeInput(chatId, userId) {
    userStates.set(userId, 'waiting_promocode');
    await bot.sendMessage(chatId, 'üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    
    if (!text || text.startsWith('/')) return;
    
    const userState = userStates.get(userId);
    
    if (userState === 'waiting_promocode') {
        userStates.delete(userId);
        
        try {
            const promocode = await Database.usePromocode(userId, text);
            await Database.updateUserBalance(userId, promocode.reward);
            
            await bot.sendMessage(chatId, 
                `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promocode.reward} –∑–≤—ë–∑–¥`
            );
        } catch (error) {
            await bot.sendMessage(chatId, `‚ùå ${error.message}`);
        }
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ config.ADMIN_IDS)
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    await showAdminPanel(chatId);
});

// –üÔøΩÔøΩ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async function showAdminPanel(chatId) {
    const message = 'üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', callback_data: 'admin_stats' }],
            [{ text: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏', callback_data: 'admin_tasks' }],
            [{ text: 'üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏', callback_data: 'admin_lottery' }],
            [{ text: 'üé´ –£–ø—ÄÔøΩÔøΩ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', callback_data: 'admin_promocodes' }],
            [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', callback_data: 'admin_broadcast' }],
            [{ text: 'üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'admin_rewards' }],
            [{ text: 'üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data: 'admin_withdrawals' }]
        ]
    };

    await bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async function handleAdminCallback(chatId, userId, data, messageId, callbackQueryId) {
    // ÔøΩÔøΩ—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }

    switch (data) {
        case 'admin_stats':
            await showBotStats(chatId, messageId);
            break;
        case 'admin_tasks':
            await showAdminTasks(chatId, messageId);
            break;
        case 'admin_lottery':
            await showAdminLottery(chatId, messageId);
            break;
        case 'admin_promocodes':
            await showAdminPromocodes(chatId, messageId);
            break;
        case 'admin_broadcast':
            await showAdminBroadcast(chatId, messageId);
            break;
        case 'admin_rewards':
            await showAdminRewards(chatId, messageId);
            break;
        case 'admin_withdrawals':
            await showAdminWithdrawals(chatId, messageId);
            break;
    }

    await bot.answerCallbackQuery(callbackQueryId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
async function showBotStats(chatId, messageId) {
    try {
        const totalUsers = await Database.pool.query('SELECT COUNT(*) as count FROM users');
        const totalStarsEarned = await Database.pool.query('SELECT SUM(total_earned) as sum FROM users');
        const totalWithdrawals = await Database.pool.query('SELECT SUM(amount) as sum FROM withdrawal_requests WHERE status = \'approved\'');
        const pendingWithdrawals = await Database.pool.query('SELECT COUNT(*) as count, SUM(amount) as sum FROM withdrawal_requests WHERE status = \'pending\'');

        const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
                       `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.rows[0].count}\n` +
                       `‚≠ê –í—Å–µÔøΩÔøΩ–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤—ë–∑–¥: ${totalStarsEarned.rows[0].sum || 0}\n` +
                       `üí∞ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${totalWithdrawals.rows[0].sum || 0}\n` +
                       `‚è≥ –ó–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingWithdrawals.rows[0].count}\n` +
                       `üíé –°—É–º–º–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingWithdrawals.rows[0].sum || 0}`;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏ÔøΩÔøΩ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û—ÅÔøΩÔøΩ–∞–ª—å–ΩÔøΩÔøΩ–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏...
async function showAdminTasks(chatId, messageId) {
    const message = `üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n\n` +
                   `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n` +
                   `–ø–æ–º–∏–º–æ –∑–∞–¥–∞–Ω–∏–π –æ—Ç SubGram`;

    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'create_task' }],
            [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', callback_data: 'list_tasks' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏ÔøΩÔøΩ-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

async function showAdminBroadcast(chatId, messageId) {
    const message = `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n` +
                   `–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:`;

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üèÜ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ', callback_data: 'broadcast_rating' }],
            [{ text: 'üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–ΩÔøΩÔøΩ—è—Ö', callback_data: 'broadcast_tasks' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

async function handleBroadcast(type) {
    try {
        const users = await Database.pool.query('SELECT user_id FROM users');
        let message, keyboard;

        if (type === 'rating') {
            message = `üèÜ –ë—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–∞–¥–∏ ÔøΩÔøΩ —Ç–æ–ø 5 –ø–æ –æ—á–∫–∞–º –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –ø–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –≤ –∫–æ–Ω—Ü–µ ÔøΩÔøΩ–µ–¥–µ–ª–∏!\n\n` +
                     `ü•á 1 –º–µ—Å—Ç–æ: 100 –∑–≤—ë–∑–¥\n` +
                     `ü•à 2 –º–µ—ÅÔøΩÔøΩ–æ: 75 –∑–≤—ë–∑–¥\n` +
                     `ü•â 3 –º–µ—Å—Ç–æ: 50 –∑–≤—ë–∑–¥\n` +
                     `4 –º–µ—Å—Ç–æ: 25 –∑–≤—ë–∑–¥\n` +
                     `5 –º–µ—Å—Ç–æ: 15 –∑–≤—ë–∑–¥`;

            keyboard = {
                inline_keyboard: [
                    [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µÔøΩÔøΩ', callback_data: 'invite' }],
                    [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                    [{ text: 'üè† ÔøΩÔøΩ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            };
        } else {
            message = `üìã –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è!\n\n` +
                     `üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æÔøΩÔøΩ—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è!`;

            keyboard = {
                inline_keyboard: [
                    [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
                    [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            };
        }

        for (const user of users.rows) {
            try {
                await bot.sendMessage(user.user_id, message, { reply_markup: keyboard });
                await new Promise(resolve => setTimeout(resolve, 50)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            } catch (error) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}`);
            }
        }

        console.log(`–†–∞—Å—Å—ã–ª–∫–∞ ${type} –∑–∞–≤–µ—Ä—àÔøΩÔøΩ–Ω–∞`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    }
}

async function showAdminWithdrawals(chatId, messageId) {
    try {
        const pending = await Database.getPendingWithdrawals();

        let message = `üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n\n`;

        if (pending.length === 0) {
            message += '‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫';
        } else {
            message += `üìã –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: ${pending.length}\n\n`;

            for (const request of pending.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                message += `üìÑ –ó–∞—è–≤–∫–∞ #${request.id}\n`;
                message += `üë§ ${request.first_name} (@${request.username || '–ΩÔøΩÔøΩ—Ç'})\n`;
                message += `üí∞ –°—É–º–º–∞: ${request.amount} –∑–≤—ë–∑–¥\n`;
                message += `üíé –û—ÅÔøΩÔøΩ–∞—Ç–æ–∫: ${request.balance} –∑–≤—ë–∑–¥\n\n`;
            }
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_withdrawals' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ ÔøΩÔøΩ–∞—èÔøΩÔøΩ–æ–∫:', error);
    }
}

async function handleWithdrawalAction(chatId, userId, data, callbackQueryId) {
    try {
        const [action, requestId] = data.split('_');
        const request = await Database.pool.query('SELECT * FROM withdrawal_requests WHERE id = $1', [requestId]);

        if (request.rows.length === 0) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const requestData = request.rows[0];

        if (action === 'approve') {
            // –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
            await Database.processWithdrawal(requestId, 'approved');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–ª–∞—Ç–µ–∂–µ–π
            const paymentMessage = `‚úÖ –í—ã–ø–ª–∞—Ç–∞ #${requestId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n` +
                                 `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${requestData.first_name}\n` +
                                 `üí∞ –°—É–º–º–∞: ${requestData.amount} –∑–≤—ë–∑–¥`;

            await bot.sendMessage(config.PAYMENTS_CHAT_ID, paymentMessage);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await bot.sendMessage(requestData.user_id,
                    `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –Ω–∞ –≤—ã–≤–æ–¥ ${requestData.amount} –∑–≤—ë–∑–¥ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`
                );
            } catch (e) {}

            await bot.answerCallbackQuery(callbackQueryId, '‚úÖ ÔøΩÔøΩ–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');

        } else if (action === 'reject') {
            // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            await Database.processWithdrawal(requestId, 'rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
            await Database.updateUserBalance(requestData.user_id, requestData.amount, 'add');

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await bot.sendMessage(requestData.user_id,
                    `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${requestId} –Ω–∞ –≤—ã–≤–æ–¥ ${requestData.amount} –∑–≤—ë–∑–¥ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n` +
                    `üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.`
                );
            } catch (e) {}

            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
}

async function showAdminLottery(chatId, messageId) {
    const message = `üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µÔøΩÔøΩ–º–∏\n\n` +
                   `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ªÔøΩÔøΩ—Ç—å –ª–æ—Ç–µ—Ä–µ—è–º–∏`;

    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é', callback_data: 'create_lottery' }],
            [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏', callback_data: 'list_lotteries' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

async function showAdminPromocodes(chatId, messageId) {
    const message = `üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n` +
                   `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏`;

    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'create_promocode' }],
            [{ text: 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data: 'list_promocodes' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

async function showAdminRewards(chatId, messageId) {
    const message = `üèÜ –ù–µ–¥–µ–ªÔøΩÔøΩ–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n` +
                   `–¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø 5:\n` +
                   `ü•á 1 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[1]} –∑–≤—ë–∑–¥\n` +
                   `ü•à 2 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[2]} –∑–≤—ë–∑–¥\n` +
                   `ü•â 3 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[3]} –∑–≤—ë–∑–¥\n` +
                   `4 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[4]} –∑–≤—ë–∑–¥\n` +
                   `5 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[5]} –∑–≤—ë–∑–¥\n\n` +
                   `‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: –í–ö–õ`;

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üèÜ –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —Å–µ–π—á–∞—Å', callback_data: 'give_rewards_now' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–ΩÔøΩÔøΩ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

async function handleOpenCase(chatId, userId, messageId, callbackQueryId) {
    try {
        const user = await Database.getUser(userId);
        const today = new Date().toDateString();
        const lastCaseDate = user.last_case_open ? new Date(user.last_case_open).toDateString() : null;

        if (user.daily_referrals < 5) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù—É–∂–Ω–æ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å!');
            return;
        }

        if (lastCaseDate === today) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ö–µ–π—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–µ–≥–æ–¥–Ω—è!');
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à (1-10 –∑–≤—ë–∑–¥)
        const reward = Math.floor(Math.random() * 10) + 1;

        // –û–±–Ω–æ–≤–ª—è–µÔøΩÔøΩ –±–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
        await Database.updateUserBalance(userId, reward);
        await Database.pool.query('UPDATE users SET last_case_open = CURRENT_DATE WHERE user_id = $1', [userId]);

        const message = `üéÅ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!\n\n` +
                       `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} –∑–≤—ë–∑–¥!\n` +
                       `üí∞ –ó–≤—ë–∑–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±ÔøΩÔøΩ–ª–∞–Ω—Å`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });

        await bot.answerCallbackQuery(callbackQueryId, `üéâ –í—ã–∏–≥—Ä–∞ÔøΩÔøΩ–∏ ${reward} –∑–≤—ë–∑–¥!`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
    }
}

async function handleTaskCheck(chatId, userId, messageId, callbackQueryId) {
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ - –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä—è–µ–º
        // –î–µ–ª–∞–µ–º —Ç–æ ÔøΩÔøΩ–µ —Å–∞–º–æ–µ —á—Ç–æ –≤ showTasks - –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        const taskChannels = await SubGram.getTaskChannels(userId, chatId);
        const completedSubgramTasks = await Database.getCompletedSubgramTasks(userId);
        
        let availableChannels = [];
        if (subscriptionCheck.links && subscriptionCheck.links.length > 0) {
            availableChannels = subscriptionCheck.links.filter(link => 
                !completedSubgramTasks.includes(link)
            );
        }
        
        // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ
        if (availableChannels.length > 0) {
            const taskLink = availableChannels[0];
            
            // 3. –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞–Ω–∏–π –øÔøΩÔøΩ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newCheck = await SubGram.getTaskChannels(userId, chatId);

            // 4. –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞–Ω–∏–π - –∑–Ω–∞—á–∏—Ç –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
            if (!newCheck.links || !newCheck.links.includes(taskLink)) {
                // –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!
                
                // 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–æÔøΩÔøΩ–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
                const sponsorIndex = subscriptionCheck.links.indexOf(taskLink);
                const sponsor = subscriptionCheck.additional?.sponsors?.[sponsorIndex];
                const channelName = sponsor?.resource_name || '–ö–∞–Ω–∞–ª';
                
                await Database.completeSubgramTask(userId, taskLink, channelName);
                
                // 6. –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                await Database.updateUserBalance(userId, 0.3);
                await Database.updateUserPoints(userId, 1);
                
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª SubGram –∑–∞–¥–∞–Ω–∏–µ: ${taskLink}`);

                const message = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n` +
                               `üí∞ –í—ã –ø–æ–ªÔøΩÔøΩ—á–∏–ª–∏ 0.3 –∑–≤–µ–∑–¥—ã\n` +
                               `üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –æ—á–∫–æ\n\n` +
                               `–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ?`;

                const keyboard = {
                    inline_keyboard: [
                        [{ text: 'üìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'tasks' }],
                        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                };

                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard
                });

                await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');

                // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                await checkReferralConditions(userId);

            } else {
                // –í—Å–µ –µ—â–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Å–ΩÔøΩÔøΩ—á–∞–ª–∞!');
            }
        } else {
            // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
            await showTasks(chatId, userId, messageId); // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function handleCustomTaskCheck(chatId, userId, taskId, messageId, callbackQueryId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        const task = await Database.pool.query('SELECT * FROM tasks WHERE id = $1 AND is_active = true', [taskId]);
        
        if (task.rows.length === 0) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        const taskData = task.rows[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        const isCompleted = await Database.isTaskCompleted(userId, taskId);
        if (isCompleted) {
            await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            await showTasks(chatId, userId, messageId);
            return;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        await Database.completeTask(userId, taskId);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await Database.updateUserBalance(userId, taskData.reward);
        await Database.updateUserPoints(userId, 1);
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${taskId}: ${taskData.title}`);

        const message = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n` +
                       `üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${taskData.reward} –∑–≤—ë–∑–¥\n` +
                       `üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –æ—á–∫–æ\n\n` +
                       `–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ?`;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'tasks' }],
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

        await bot.answerCallbackQuery(callbackQueryId, `‚úÖ +${taskData.reward} –∑–≤—ë–∑–¥!`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–Ω–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
        // await checkReferralConditions(userId); // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ SubGram –∑–∞–¥–∞–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    }
}

// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –úÔøΩÔøΩ–ö)
cron.schedule('0 20 * * 0', async () => {
    console.log('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...');
    
    try {
        const leaderboard = await Database.getWeeklyLeaderboard(5);
        
        for (let i = 0; i < leaderboard.length; i++) {
            const user = leaderboard[i];
            const position = i + 1;
            const reward = config.WEEKLY_REWARDS[position];
            
            if (reward) {
                await Database.updateUserBalance(user.user_id, reward);
                
                try {
                    await bot.sendMessage(user.user_id, 
                        `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–Ω—è–ª–∏ ${position} –º–µ—Å—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!\n` +
                        `üí∞ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥`
                    );
                } catch (e) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}`);
                }
            }
        }
        
        // –°–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—á–∫–æ–≤
        await Database.resetWeeklyPoints();
        console.log('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏ÔøΩÔøΩ –µÔøΩÔøΩ–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞ÔøΩÔøΩ—Ä–∞–¥:', error);
    }
}, {
    timezone: "Europe/Moscow"
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    console.log('Polling error:', error.message);
    if (error.code === 'ETELEGRAM' && error.message.includes('409')) {
        console.log('–ö–æ–Ω—Ñ–ª–∏–∫—Ç polling - –¥—Ä—É–≥–æ–π —ç–∫–∑–µÔøΩÔøΩ–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É—Å—É–≥—É–±–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–ºÔøΩÔøΩ
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ webhook
bot.on('webhook_error', (error) => {
    console.log('Webhook error:', error.message);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initBot();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
    console.error('Unhandled promise rejection:', error);
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught exception:', error);
    process.exit(1);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    webhookHandler.stop();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    webhookHandler.stop();
    process.exit(0);
});
