console.log('[MAIN] Starting imports...');

const TelegramBot = require('node-telegram-bot-api');
console.log('[MAIN] TelegramBot imported');

const cron = require('node-cron');
console.log('[MAIN] cron imported');

const db = require('./database');
console.log('[MAIN] database imported');

const adminHandlers = require('./admin-handlers-final');
console.log('[MAIN] admin-test imported, type:', typeof adminHandlers);
console.log('[MAIN] adminHandlers.handleAdminTasks type:', typeof adminHandlers.handleAdminTasks);

const { throttler } = require('./message-throttler');
console.log('[MAIN] message throttler imported');

const { captchaSystem } = require('./captcha-system');
console.log('[MAIN] captcha system imported');

const { subgramAPI } = require('./subgram-api');
console.log('[MAIN] SubGram API imported');

// –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥ —É–¥–∞–ª–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –æ–±—ÄÔøΩÔøΩ–±–æ—ÇÔøΩÔøΩÔøΩ–∞

// Helper function to send throttled messages
async function sendThrottledMessage(userId, message, options = {}) {
    return await throttler.sendMessage(() => bot.sendMessage(userId, message, options));
}

// Universal message sending function - automatically chooses throttled vs direct
async function sendMessage(chatId, message, options = {}, useThrottling = false) {
    if (useThrottling) {
        return await sendThrottledMessage(chatId, message, options);
    } else {
        return await bot.sendMessage(chatId, message, options);
    }
}

// Bot token - should be set via environment variable for security
let token = process.env.BOT_TOKEN;

if (!token) {
    console.warn('‚ö†Ô∏è  WARNING: BOT_TOKEN environment variable not set!');
    console.warn('   Using fallback token for development - NOT SECURE FOR PRODUCTION!');
    console.warn('üìù Please set BOT_TOKEN in your environment variables for production.');

    // Fallback token for development (replace with env variable in production)
    token = '8379368723:AAEnG133OZ4qMrb5vQfM7VdEFSuLiWydsyM';

    console.log(' Bot starting with fallback token (will fail without real env token)...');
} else {
    console.log('‚úÖ Bot starting with environment token (secure)');
}

// First, try to delete webhook and then use polling
const bot = new TelegramBot(token, { polling: false });

// Clear any existing webhook and enable polling
async function initializeBotMode() {
    try {
        console.log('üîÑ Clearing any existing webhook...');
        await bot.deleteWebHook();
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second

        console.log(' Starting polling mode...');
        await bot.startPolling({ restart: true });
        console.log(' Bot polling started successfully!');
    } catch (error) {
        console.error('‚ùå Error initializing bot mode:', error);
        throw error;
    }
}

// Admin configuration
const ADMIN_ID = 7972065986;
const ADMIN_CHANNEL = process.env.ADMIN_CHANNEL || '@kirbyvivodstars';
const PAYMENTS_CHANNEL = process.env.PAYMENTS_CHANNEL || '@kirbystarspayments';

// Initialize database and bot
async function startBot() {
    try {
        console.log('üöÄ Starting Telegram bot with PostgreSQL...');
        await db.initializeDatabase();
        await initializeBotMode();
        console.log('‚úÖ Bot started successfully!');
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
}

// Helper function to check if user is admin
function isAdmin(userId) {
    return userId === ADMIN_ID;
}

// Helper function to clean text for safe display (no Markdown)
function cleanDisplayText(text) {
    if (!text) return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // Remove all potentially problematic characters for clean display
    let cleanText = text
        // Remove markdown special characters
        .replace(/[*_`\[\]()~>#+=|{}.!-]/g, '')
        // Remove control characters
        .replace(/[\u0000-\u001f\u007f-\u009f]/g, '')
        // Remove specific problematic symbols that cause Telegram parsing errors
        .replace(/[‚ò≠‚ßÅ‚Å£‡ºíìÜ©‚Ç¶≈Ç‚Ç¶‚Ñ≥‚Ç≥ìÜ™‚≠ê]/g, '')
        // Remove various unicode spaces, symbols, and special characters
        .replace(/[\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F]/g, '')
        // Remove other potentially problematic unicode ranges
        .replace(/[\u2600-\u26FF\u2700-\u27BF]/g, '') // Miscellaneous symbols
        .replace(/[\uFE00-\uFE0F]/g, '') // Variation selectors
        .replace(/[\u200D\u200C\u200B]/g, '') // Zero-width characters
        .trim();

    // Limit length to prevent issues
    if (cleanText.length > 20) {
        cleanText = cleanText.substring(0, 17) + '...';
    }

    // If name becomes empty after cleaning, use default
    return cleanText || '–ü–æ–ª—åÔøΩÔøΩ–æ–≤–∞—Ç–µ–ª—å';
}

// Helper function to escape Markdown special characters (keep for backward compatibility)
function escapeMarkdown(text) {
    return cleanDisplayText(text);
}

// Helper function to get required channels from database
async function getRequiredChannels() {
    try {
        const result = await db.executeQuery('SELECT channel_id FROM required_channels WHERE is_active = TRUE');
        return result.rows.map(row => row.channel_id);
    } catch (error) {
        console.error('Error getting required channels:', error);
        return [];
    }
}

// Helper function to check if user is subscribed to all required channels (enhanced)
async function checkAllSubscriptions(userId, recordStats = false) {
    const requiredChannels = await getRequiredChannels();
    if (requiredChannels.length === 0) return true;

    try {
        for (const channel of requiredChannels) {
            try {
                const member = await bot.getChatMember(channel, userId);
                if (member.status === 'left' || member.status === 'kicked') {
                    // Record failed subscription check if requested
                    if (recordStats) {
                        try {
                            await db.recordSubscriptionCheck(userId, false);
                        } catch (statError) {
                            console.error('Error recording subscription check (failed):', statError);
                        }
                    }
                    return false;
                }
            } catch (error) {
                // If bot can't check membership, return false for security
                console.log(`Cannot check subscription for channel ${channel}: ${error.message}`);
                // Only auto-approve if the error is specifically about chat not found or bot not having access
                if (error.response?.body?.error_code === 400 || error.response?.body?.description?.includes('chat not found')) {
                    console.log(`Auto-approving ${channel} - chat not accessible`);
                    continue;
                } else {
                    // Record failed subscription check if requested
                    if (recordStats) {
                        try {
                            await db.recordSubscriptionCheck(userId, false);
                        } catch (statError) {
                            console.error('Error recording subscription check (failed):', statError);
                        }
                    }
                    return false;
                }
            }
        }

        // Record successful subscription check if requested
        if (recordStats) {
            try {
                await db.recordSubscriptionCheck(userId, true);
            } catch (statError) {
                console.error('Error recording subscription check (success):', statError);
            }
        }

        return true;
    } catch (error) {
        console.error('Error checking subscriptions:', error);
        // Record failed subscription check if requested
        if (recordStats) {
            try {
                await db.recordSubscriptionCheck(userId, false);
            } catch (statError) {
                console.error('Error recording subscription check (error):', statError);
            }
        }
        return false;
    }
}

// Legacy function for backward compatibility
async function checkSubscriptions(userId) {
    return await checkAllSubscriptions(userId);
}

// Helper function to get subscription message with channel links
async function getSubscriptionMessage() {
    let message = 'üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n';
    let buttons = [];
    
    try {
        const result = await db.executeQuery('SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE');
        result.rows.forEach((channel, index) => {
            message += `${index + 1}. ${channel.channel_name || channel.channel_id}\n`;
            
            // Create button for each channel
            const channelLink = channel.channel_id.startsWith('@') ? 
                `https://t.me/${channel.channel_id.substring(1)}` : 
                channel.channel_id;
            
            buttons.push([{ text: `üì∫ ${channel.channel_name || channel.channel_id}`, url: channelLink }]);
        });
    } catch (error) {
        console.error('Error getting channel data:', error);
    }
    
    message += '\nüìå –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ ÔøΩÔøΩ–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏';
    buttons.push([{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscriptions' }]);
    
    return { message, buttons };
}

// Enhanced subscription message with SubGram integration
async function getEnhancedSubscriptionMessage(userId) {
    try {
        let message = 'üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n';
        let buttons = [];
        let channelCount = 0;

        // Get regular required channels
        const regularChannels = await db.executeQuery('SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE');

        if (regularChannels.rows.length > 0) {
            message += 'üì∫ **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n';
            regularChannels.rows.forEach((channel, index) => {
                channelCount++;
                message += `${channelCount}. ${channel.channel_name || channel.channel_id}\n`;

                const channelLink = channel.channel_id.startsWith('@') ?
                    `https://t.me/${channel.channel_id.substring(1)}` :
                    channel.channel_id;

                buttons.push([{ text: `üì∫ ${channel.channel_name || channel.channel_id}`, url: channelLink }]);
            });
        }

        // Try to get SubGram channels
        try {
            console.log('[SUBGRAM] Getting SubGram channels for user:', userId);

            const user = await db.getUser(userId);
            if (!user) {
                console.log('[SUBGRAM] User not found, skipping SubGram channels');
                return { message, buttons, hasSubgram: false };
            }

            const subgramResponse = await subgramAPI.requestSponsors({
                userId: userId.toString(),
                chatId: userId.toString(), // Using userId as chatId for private messages
                firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                languageCode: 'ru',
                premium: false, // Default to false, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–∑–∂–µ
                maxOP: 3,
                action: 'subscribe',
                excludeChannelIds: []
            });

            console.log('[SUBGRAM] API Response:', subgramResponse.success, subgramResponse.data?.status);

            if (subgramResponse.success && subgramResponse.data) {
                const processedData = subgramAPI.processAPIResponse(subgramResponse.data);

                // Save API request log
                await db.logSubGramAPIRequest(
                    userId,
                    'request_sponsors',
                    { action: 'subscribe', maxOP: 3 },
                    subgramResponse.data,
                    true
                );

                // Save session data
                await db.saveSubGramUserSession(userId, subgramResponse.data, processedData);

                if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
                    // Save channels to database
                    await db.saveSubGramChannels(userId, processedData.channelsToSubscribe);

                    message += '\nüéØ **–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã:**\n';
                    processedData.channelsToSubscribe.forEach((channel, index) => {
                        channelCount++;
                        message += `${channelCount}. ${channel.name}\n`;
                        buttons.push([{ text: `üéØ ${channel.name}`, url: channel.link }]);
                    });
                }

                // Handle special SubGram statuses
                if (processedData.needsGender) {
                    message += '\nü§ñ **SubGram —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –øÔøΩÔøΩ–ª–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤**';
                    buttons.push([
                        { text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'subgram_gender_male' },
                        { text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'subgram_gender_female' }
                    ]);
                }
            } else {
                console.log('[SUBGRAM] Failed to get sponsors or no sponsors available');

                // Log failed request
                await db.logSubGramAPIRequest(
                    userId,
                    'request_sponsors',
                    { action: 'subscribe', maxOP: 3 },
                    subgramResponse.data || {},
                    false,
                    subgramResponse.error || 'Unknown error'
                );
            }
        } catch (subgramError) {
            console.error('[SUBGRAM] Error getting SubGram channels:', subgramError);

            // Log error
            await db.logSubGramAPIRequest(
                userId,
                'request_sponsors',
                { action: 'subscribe', maxOP: 3 },
                {},
                false,
                subgramError.message
            );
        }

        if (channelCount === 0) {
            message = '‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.';
            buttons.push([{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);
        } else {
            message += '\nüìå –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏';
            buttons.push([{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscriptions_enhanced' }]);
        }

        return { message, buttons, hasSubgram: true };

    } catch (error) {
        console.error('Error getting enhanced subscription message:', error);
        // Fallback to regular subscription message
        return await getSubscriptionMessage();
    }
}

// Create inline keyboards (RESTORED)
function getMainMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }
                ],
                [
                    { text: 'üéØ –öÔøΩÔøΩ–∏–∫–µ—Ä', callback_data: 'clicker' },
                    { text: '‚≠ê –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data: 'withdraw' }
                ],
                [
                    { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' },
                    { text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É', callback_data: 'instruction' }
                ],
                [
                    { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ÔøΩÔøΩ', callback_data: 'ratings' },
                    { text: 'üéÅ –ö–µÔøΩÔøΩ—Å—ã', callback_data: 'cases' }
                ],
                [
                    { text: 'üé∞ –õ–æ—Ç–µ—Ä–µ—è', callback_data: 'lottery' }
                ]
            ]
        }
    };
}

function getProfileKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'ÔøΩÔøΩÔøΩÔøΩ –ü—Ä–æ–º–æ–∫ÔøΩÔøΩ–¥', callback_data: 'promocode' },
                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }
                ],
                [
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getBackToMainKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –ºÔøΩÔøΩ–Ω—é', callback_data: 'main_menu' }]
            ]
        }
    };
}

function getTaskKeyboard(taskId, channelLink) {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelLink }
                ],
                [
                    { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `task_check_${taskId}` }
                ],
                [
                    { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_skip' },
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–ΩÔøΩÔøΩ', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getWithdrawKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '15 ‚≠ê', callback_data: 'withdraw_15' },
                    { text: '25 ‚≠ê', callback_data: 'withdraw_25' }
                ],
                [
                    { text: '50 ‚≠ê', callback_data: 'withdraw_50' },
                    { text: '100 ‚≠ê', callback_data: 'withdraw_100' }
                ],
                [
                    { text: ' Telegram Premium –Ω–∞ 3 –º–µÔøΩÔøΩ—è—Ü–∞ (1300‚≠ê)', callback_data: 'withdraw_premium' }
                ],
                [
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–ΩÔøΩÔøΩ', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getRatingsKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'ratings_all' },
                    { text: 'üìÖ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'ratings_week' }
                ],
                [
                    { text: '‚≠ê –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—á–∫–∏', callback_data: 'ratings_week_points' }
                ],
                [
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getAdminMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                    { text: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏', callback_data: 'admin_tasks' }
                ],
                [
                    { text: 'üì∫ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã', callback_data: 'admin_channels' },
                    { text: 'üé∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ÔøΩÔøΩ–æ—Ç–µÔøΩÔøΩ–µ—è–º–∏', callback_data: 'admin_lottery' }
                ],
                [
                    { text: 'üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—ÄÔøΩÔøΩ–º–æ–∫–æ–¥–∞–º–∏', callback_data: 'admin_promocodes' },
                    { text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–ΩÔøΩÔøΩ–π', callback_data: 'admin_broadcast' }
                ],
                [
                    { text: 'üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'admin_weekly_rewards' },
                    { text: 'üéØ SubGram —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'admin_subgram' }
                ],
                [
                    { text: 'ÔøΩÔøΩ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫', callback_data: 'admin_subscription_stats' }
                ]
            ]
        }
    };
}

// Remove keyboard buttons
bot.onText(/\/start/, () => {}); // This will be handled by the main start handler

// Start command handler
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = msg.from;
    const referralCode = match ? match[1].trim() : null;
    
    try {
        // Check if user exists
        let dbUser = await db.getUser(userId);

        if (!dbUser) {
            // New user - create user first
            dbUser = await db.createOrUpdateUser(user);

            // Check for referral or tracking link
            if (referralCode) {
                // Check if it's a tracking link
                if (referralCode.startsWith('track_')) {
                    // This is a tracking link, not a referral
                    console.log(`[TRACKING] User ${userId} came from tracking link: ${referralCode}`);

                    // Record tracking click
                    try {
                        await db.executeQuery(
                            'INSERT INTO tracking_clicks (tracking_id, user_id, clicked_at) VALUES ($1, $2, NOW())',
                            [referralCode, userId]
                        );

                        // Update tracking link counter
                        await db.executeQuery(
                            'UPDATE tracking_links SET clicks_count = clicks_count + 1 WHERE tracking_id = $1',
                            [referralCode]
                        );

                        console.log(`[TRACKING] Recorded click for tracking link: ${referralCode}`);
                    } catch (error) {
                        console.error('[TRACKING] Error recording click:', error);
                    }
                } else if (!isNaN(referralCode)) {
                    // This is a regular referral
                    const referrerId = parseInt(referralCode);
                    const referrer = await db.getUser(referrerId);
                    if (referrer && referrerId !== userId) { // Prevent self-referral
                        // Store referral info temporarily, will be processed after subscription
                        await db.updateUserField(userId, 'pending_referrer', referrerId);
                    }
                }
            }
        }

        // Check if user passed captcha
        const captchaPassed = await db.getCaptchaStatus(userId);

        if (!captchaPassed) {
            // User hasn't passed captcha - show captcha
            if (captchaSystem.hasActiveSession(userId)) {
                // User has active captcha session - show current question
                const currentQuestion = captchaSystem.getCurrentQuestion(userId);
                await bot.sendMessage(chatId, `ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç**

–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:
**${currentQuestion}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ªÔøΩÔøΩ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]
                        ]
                    }
                });
            } else {
                // Generate new captcha
                const question = captchaSystem.generateCaptcha(userId);
                await bot.sendMessage(chatId, `ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞ÔøΩÔøΩ—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.

–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π ÔøΩÔøΩ—Ä–∏–º–µ—Ä:
**${question}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ªÔøΩÔøΩ–∫ÔøΩÔøΩ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]
                        ]
                    }
                });
            }
            return;
        }

        // Check subscriptions
        const isSubscribed = await checkAllSubscriptions(userId);
        const requiredChannels = await getRequiredChannels();

        if (!isSubscribed && requiredChannels.length > 0) {
            const subData = await getEnhancedSubscriptionMessage(userId);

            await bot.sendMessage(chatId, subData.message, {
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: subData.buttons }
            });
            return;
        }
        
        // User is subscribed - update subscription status
        await db.updateUserField(userId, 'is_subscribed', true);

        // Add weekly points for bot activation
        try {
            await db.addWeeklyPoints(userId, 1, 'bot_activation');
        } catch (pointsError) {
            console.error('Error adding weekly points for bot activation:', pointsError);
        }
        
        // Process pending referrer (set invited_by but don't award bonus yet)
        if (dbUser.pending_referrer) {
            const invitedBy = dbUser.pending_referrer;

            // Clear pending referrer and set invited_by
            await db.updateUserField(userId, 'pending_referrer', null);
            await db.updateUserField(userId, 'invited_by', invitedBy);

            console.log(`[REFERRAL] User ${userId} linked to referrer ${invitedBy} - bonus will be awarded when qualified`);
        }
        
                // Check if user now qualifies for referral processing (new system)
        try {
            const qualification = await db.checkReferralQualification(userId);
            if (qualification.qualified) {
                const result = await db.checkAndProcessPendingReferrals(userId);
                if (result.processed > 0) {
                    // Send notification to referrer
                    try {
                        const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

üë§ –ü—Ä–∏–≥–ª–∞—àÔøΩÔøΩ–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${user.first_name}** –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è:
‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É
‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏–ª —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

üí∞ **–í—ã –ø–æ–ª—É—á–∏–ª–∏:** +3 ‚≠ê
üíé **–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**

üë• –ü—ÄÔøΩÔøΩ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!`;

                        await bot.sendMessage(result.referrerId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                                ]
                            }
                        });
                    } catch (error) {
                        console.error('Error sending qualified referral notification:', error);
                    }
                }
            }
        } catch (error) {
            console.error('Error checking referral qualification:', error);
        }

        // Check for retroactive referral activation (old referrals)
        try {
            const retroResult = await db.activateRetroactiveReferral(userId);
            if (retroResult.success) {
                // Send notification to referrer about retroactive activation
                try {
                    const message = `üîÑ **–íÔøΩÔøΩ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥!**

üë§ –í–∞—à —Ä–µ—Ñ–µ—ÄÔøΩÔøΩ–ª **${user.first_name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è:
‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É
‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã

üí∞ **–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:** +3 ‚≠ê
üíé **–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!**

üéØ –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é!`;

                    await bot.sendMessage(retroResult.referrerId, message, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                            ]
                        }
                    });
                } catch (error) {
                    console.error('Error sending retroactive activation notification:', error);
                }
            }
        } catch (error) {
            console.error('Error checking retroactive activation:', error);
        }

        // Send main menu
        const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarBot!**

üí∞ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

 **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∫–ª–∏–∫–µ—Ä–µ
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–æ–µ
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ÔøΩÔøΩ –ø—Ä–æ–≥—Ä–∞ÔøΩÔøΩ–º–∞ (3‚≠ê –∑–∞ –¥—Ä—É–≥–∞)
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: { remove_keyboard: true }, // Remove custom keyboard
            ...getMainMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in start command:', error);
        bot.sendMessage(chatId, '‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—ÄÔøΩÔøΩÔøΩÔøΩ–±—É–π—Ç–µ –ø–æÔøΩÔøΩ–∂–µ.');
    }
});

// Throttler status command (admin only)
bot.onText(/\/throttler_status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    const status = throttler.getStatus();
    const statusMessage = `üìä **–°—Ç–∞—Ç—É—Å Throttler**

üì® **–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π:** ${status.queueLength}
‚öôÔ∏è **–û–±—Ä–∞–±–æ—Ç–∫–∞:** ${status.processing ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
‚è±Ô∏è **–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É:** ${status.messagesPerSecond}
‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:** ${status.intervalMs}ms

${status.queueLength > 0 ? 'üì§ –í –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–ΩÔøΩÔøΩ—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...' : '‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞'}`;

    bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
});

// Test command to verify version
bot.onText(/\/test_version/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const testMessage = `üîß **–¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ –±–µ—Ç–∞**

üìÖ –í–µ—Ä—Å–∏—è: –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø v5.0 - –° –ö–ù–û–ü–ö–ê–ú–ò –ò –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò!
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üë§ ÔøΩÔøΩ–∞—à ID: ${userId}
üîß Admin ID: ${isAdmin(userId) ? '–í–´ –ê–î–ú–ò–ù' : '–ù–ï –ê–î–úÔøΩÔøΩ–ù'}

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏ÔøΩÔøΩ - —Ä–∞–±–æ—Ç–∞–µ—Ç –ù–û–í–ê–Ø –≤–µ—Ä—Å–∏—è!
üéØ Inline-–∫–Ω–æ–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`;

    bot.sendMessage(chatId, testMessage, { parse_mode: 'Markdown' });
});

// Admin captcha stats command
bot.onText(/\/captcha_stats/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const stats = captchaSystem.getStats();
        const statsMessage = `ü§ñ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—á–∏**

üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—ÅÔøΩÔøΩ–∏:** ${stats.activeSessions}
üî¢ **–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤:** ${stats.totalProblems}

üìù **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:**
${stats.problems.map((problem, index) => `${index + 1}. ${problem}`).join('\n')}

‚è∞ **–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏:** 10 –º–∏–Ω—É—Ç
üéØ **–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫:** 3

${stats.activeSessions > 0 ? '‚ö†Ô∏è –ï—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ—Ö–æ–¥—è—â–∏–µ –∫–∞–ø—á—É...' : '‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã'}`;

        bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('Error getting captcha stats:', error);
        bot.sendMessage(chatId, 'ÔøΩÔøΩÔøΩ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–ø—á–∏.');
    }
});

// Admin command to reset user captcha
bot.onText(/\/reset_captcha (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const targetUserId = parseInt(match[1]);

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        // Clear captcha session
        const sessionCleared = captchaSystem.clearSession(targetUserId);

        // Reset captcha status in database
        await db.setCaptchaPassed(targetUserId, false);

        const message = sessionCleared
            ? `‚úÖ –ö–∞–ø—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}. –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—ÅÔøΩÔøΩ—è –æ—á–∏—â–µ–Ω–∞.`
            : `‚úÖ –ö–∞–ø—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}. –ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –±—ã–ª–æ.`;

        bot.sendMessage(chatId, message);
    } catch (error) {
        console.error('Error resetting captcha:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞–ø—á–∏.');
    }
});

// Admin command to test captcha for current user
bot.onText(/\/test_my_captcha/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        // Reset admin's captcha for testing
        captchaSystem.clearSession(userId);
        await db.setCaptchaPassed(userId, false);

        bot.sendMessage(chatId, '‚úÖ –í–∞—à–∞ –∫–∞–ø—áÔøΩÔøΩ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏.');
    } catch (error) {
        console.error('Error resetting captcha for test:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–∞–ø—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    }
});

// Admin command to run referral audit (dry run)
bot.onText(/\/audit_referrals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, 'üîç –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

        const auditSystem = require('./referral-audit-system');
        const auditResults = await auditSystem.analyzeExistingReferrals();

        // Generate summary
        const summary = await auditSystem.applyReferralCorrections(auditResults, true); // dry run

        let message = `üìä **–ê–£–î–ò–¢ –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´**\n\n`;
        message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${auditResults.length}\n`;
        message += `‚ö†ÔøΩÔøΩÔøΩ –¢—Ä–µ–±—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: ${summary.totalUsersAffected}\n`;
        message += `üí∏ –ó–≤ÔøΩÔøΩ–∑–¥ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: ${summary.totalStarsDeducted}‚≠ê\n\n`;

        if (summary.totalUsersAffected > 0) {
            message += `üî¥ **–ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´!**\n`;
            message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /apply_referral_corrections –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n`;
            message += `‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –≠—Ç–æ —Å–ø–∏—à–µ—Ç –∑–≤—ë–∑–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µÔøΩÔøΩ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!`;
        } else {
            message += `‚úÖ **–í–°–Å –í –ü–û–†–Ø–î–ö–ï!**\n–í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.`;
        }

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error running referral audit:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞.');
    }
});

// Admin command to apply referral corrections
bot.onText(/\/apply_referral_corrections/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç ÔøΩÔøΩ—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');

        const auditSystem = require('./referral-audit-system');
        const auditResults = await auditSystem.analyzeExistingReferrals();

        // Apply corrections
        const summary = await auditSystem.applyReferralCorrections(auditResults, false); // real application

        let message = `‚úÖ **–ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò –ü–†–ò–ú–ï–ù–ï–ù–´!**\n\n`;
        message += `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${summary.totalUsersAffected}\n`;
        message += `üí∏ –ó–≤—ë–∑–¥ —Å–ø–∏—Å–∞–Ω–æ: ${summary.totalStarsDeducted}‚≠ê\n\n`;

        if (summary.totalUsersAffected > 0) {
            message += `üìã **–ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨:**\n`;
            for (const correction of summary.corrections.slice(0, 10)) { // Show first 10
                message += `ÔøΩÔøΩÔøΩ ${correction.referrerName}: -${correction.starsDeducted}‚≠ê (${correction.inactiveReferrals} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)\n`;
            }

            if (summary.corrections.length > 10) {
                message += `... –∏ –µ—â–µ ${summary.corrections.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
            }

            message += `\nüîÑ **–ó–≤—ë–∑–¥—ã –≤–µ—Ä–Ω—É—Ç—Å—è –∫–æ–≥–¥–∞ —Ä–µ—Ñ–µÔøΩÔøΩ–∞–ª—ã —Å—Ç–∞–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏!**`;
        }

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error applying referral corrections:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫.');
    }
});

// Admin command to get detailed audit report
bot.onText(/\/detailed_audit_report/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—ÄÔøΩÔøΩ–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, 'üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...');

        const auditSystem = require('./referral-audit-system');
        const auditResults = await auditSystem.analyzeExistingReferrals();
        const report = await auditSystem.generateAuditReport(auditResults);

        // Split long report into chunks
        const maxLength = 4000;
        if (report.length <= maxLength) {
            bot.sendMessage(chatId, report);
        } else {
            const chunks = [];
            for (let i = 0; i < report.length; i += maxLength) {
                chunks.push(report.substring(i, i + maxLength));
            }

            for (let i = 0; i < chunks.length; i++) {
                const chunkHeader = i === 0 ? '' : `üìÑ **–ß–∞—Å—Ç—å ${i + 1}/${chunks.length}**\n\n`;
                bot.sendMessage(chatId, chunkHeader + chunks[i]);
            }
        }

    } catch (error) {
        console.error('Error generating detailed audit report:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.');
    }
});

// Admin commands for manual user management
bot.onText(/\/endlottery (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, ' –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const lotteryId = parseInt(match[1]);
        
        const lotteryResult = await db.executeQuery('SELECT * FROM lotteries WHERE id = $1 AND is_active = TRUE', [lotteryId]);
        
        if (lotteryResult.rows.length === 0) {
            bot.sendMessage(chatId, `‚ùå –ê–∫ÔøΩÔøΩ–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å ID ${lotteryId} –Ω–µ –Ω–∞–π–¥–µ–ΩÔøΩÔøΩ.`);
            return;
        }

        const lottery = lotteryResult.rows[0];
        
        const participantsResult = await db.executeQuery('SELECT COUNT(*) as count FROM lottery_tickets WHERE lottery_id = $1', [lotteryId]);
        const participantCount = participantsResult.rows[0].count;
        
        if (participantCount === 0) {
            bot.sendMessage(chatId, `‚ùå –í –ª–æ—Ç–µ—Ä–µ–µ ${lottery.name} –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!`);
            return;
        }

        await distributeLotteryRewards(lotteryId, lottery);
        
        bot.sendMessage(chatId, `‚úÖ –õ–æ—Ç–µ—Ä–µ—è "${lottery.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}\nüèÜ –ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É ${Math.min(lottery.winners_count, participantCount)} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏.`);

    } catch (error) {
        console.error('Error ending lottery:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏.');
    }
});

bot.onText(/\/refupplayer (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const refCount = parseInt(match[2]);
        
        const result = await db.executeQuery(
            'UPDATE users SET referrals_count = referrals_count + $1, referrals_today = referrals_today + $2 WHERE id = $3',
            [refCount, refCount, targetUserId]
        );

        if (result.rowCount > 0) {
            // Check if this user now qualifies for referral processing
            try {
                const qualificationResult = await db.handleNewReferralEarned(targetUserId);

                let message = `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${refCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!`;

                if (qualificationResult.qualified && qualificationResult.processed) {
                    message += `\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –±–æ–Ω—É—Å –≤—ã–ø–ª–∞—á–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä—É!`;
                } else if (qualificationResult.qualified) {
                    message += `\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)`;
                } else {
                    message += `\n‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–Ω—É–∂–Ω—ã: –∫ÔøΩÔøΩ–ø—á–∞ + –ø–æ–¥–ø–∏—Å–∫–∞ + 1 —Ä–µ—Ñ–µ—Ä–∞–ª)`;
                }

                bot.sendMessage(chatId, message);
            } catch (error) {
                bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${refCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!`);
                console.error('Error checking qualification:', error);
            }

            try {
                await bot.sendMessage(targetUserId, `‚≠ê **–ë–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ **${refCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤** –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\nüí´ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`, { parse_mode: 'Markdown' });
            } catch (error) {
                console.log('Could not notify user about referral bonus');
            }
        } else {
            bot.sendMessage(chatId, ` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error in refupplayer:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
    }
});

bot.onText(/\/starsupplayer (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—ÉÔøΩÔøΩ–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const starsCount = parseInt(match[2]);
        
        const result = await db.updateUserBalance(targetUserId, starsCount);

        if (result) {
            bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –¥ÔøΩÔøΩ–±–∞–≤–ª–µ–Ω–æ ${starsCount} ‚≠ê!`);
            
            try {
                await bot.sendMessage(targetUserId, `üéâ **–ë–æ–ΩÔøΩÔøΩ—Å –æ—Ç –∞ÔøΩÔøΩ–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ **${starsCount} ‚≠ê** –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\nüí´ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`, { parse_mode: 'Markdown' });
            } catch (error) {
                console.log('Could not notify user about stars bonus');
            }
        } else {
            bot.sendMessage(chatId, ` –üÔøΩÔøΩ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error in starsupplayer:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥.');
    }
});

// Admin command handler
bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    console.log(`[ADMIN] /admin command called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æÔøΩÔøΩ—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    try {
        const stats = await db.getUserStats();

        const message = `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏ÔøΩÔøΩ–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üé∞ **/endlottery [ID]** - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é ÔøΩÔøΩ—Ä—É—á–Ω—É—é
üë• **/refupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚≠ê **/starsupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

**–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏:**
üîó **/create_tracking_link –Ω–∞–∑–≤–∞–Ω–∏–µ** - —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
üìä **/list_tracking** - —Å–ø–∏ÔøΩÔøΩ–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
üìà **/tracking_stats ID** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            ...getAdminMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in admin command:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
    }
});

// Admin task creation
bot.onText(/\/create_task (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—ÇÔøΩÔøΩ–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length < 3) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/create_task –∫–∞–Ω–∞–ª|–Ω–∞–∑–≤–∞–Ω–∏–µ|–Ω–∞–≥—Ä–∞–¥–∞|–ª–∏–º–∏—Ç`\n\n–ì–¥–µ –ª–∏–º–∏—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `/create_task @channel|–ú–æ–π –∫–∞–Ω–∞–ª|1.5`\n‚Ä¢ `/create_task @channel|–ú–æ–π –∫–∞–Ω–∞–ª|1.5|100`', { parse_mode: 'Markdown' });
            return;
        }

        const [channelId, channelName, reward, maxCompletions] = params;
        const rewardAmount = parseFloat(reward) || 1.0;
        const limit = maxCompletions ? parseInt(maxCompletions) : null;

        console.log('[CREATE-TASK] Creating task:', { channelId, channelName, rewardAmount, limit });

        await db.executeQuery(
            'INSERT INTO tasks (channel_id, channel_name, reward, max_completions) VALUES ($1, $2, $3, $4) ON CONFLICT (channel_id) DO UPDATE SET channel_name = $2, reward = $3, max_completions = $4',
            [channelId.trim(), channelName.trim(), rewardAmount, limit]
        );

        let message = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüì∫ –ö–∞–Ω–∞–ª: ${channelId.trim()}\nüìù –ù–∞–∑–≤–∞–Ω–∏ÔøΩÔøΩ: ${channelName.trim()}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: ${rewardAmount} `;
        if (limit) {
            message += `\n   –õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–ΩÔøΩÔøΩ–π: ${limit}`;
        } else {
            message += `\nüî¢ –õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏ÔøΩÔøΩ`;
        }

        bot.sendMessage(chatId, message);
        console.log('[CREATE-TASK] Task created successfully');

    } catch (error) {
        console.error('Error creating task:', error);
        console.error('Full error:', error.stack);
        bot.sendMessage(chatId, ` –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    }
});

// Admin task deletion
bot.onText(/\/delete_task (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const taskId = parseInt(match[1]);

        // Check if task exists
        const taskResult = await db.executeQuery('SELECT * FROM tasks WHERE id = $1', [taskId]);
        if (taskResult.rows.length === 0) {
            bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
            return;
        }

        const task = taskResult.rows[0];

        // Delete task (this will also delete related user_tasks due to foreign key)
        await db.executeQuery('DELETE FROM tasks WHERE id = $1', [taskId]);

        bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\nüì∫ –ö–∞–Ω–∞–ª: ${task.channel_name || task.channel_id}\n –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê`);

    } catch (error) {
        console.error('Error deleting task:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    }
});

// Admin channel management
bot.onText(/\/add_channel (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        const channelId = params[0].trim();
        const channelName = params[1] ? params[1].trim() : channelId;

        await db.executeQuery(
            'INSERT INTO required_channels (channel_id, channel_name) VALUES ($1, $2) ON CONFLICT (channel_id) DO NOTHING',
            [channelId, channelName]
        );

        bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª ÔøΩÔøΩ–æ–±–∞–≤–ª–µ–Ω!\nüì∫ ${channelName} (${channelId})`);

    } catch (error) {
        console.error('Error adding channel:', error);
        bot.sendMessage(chatId, '‚ùå –û—àÔøΩÔøΩ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.');
    }
});

// Admin lottery creation
bot.onText(/\/create_lottery (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length !== 5) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|–±–∏–ª–µ—Ç—ã|—Ü–µ–Ω–∞|–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏|–ø—Ä–æ—Ü–µ–Ω—Ç');
            return;
        }

        const [name, maxTickets, ticketPrice, winnersCount, botPercent] = params;
        const lotteryName = name.trim();
        const maxTicketsNum = parseInt(maxTickets);
        const ticketPriceNum = parseFloat(ticketPrice);
        const winnersCountNum = parseInt(winnersCount);
        const botPercentNum = parseInt(botPercent);

        console.log('[CREATE-LOTTERY] Creating lottery:', { lotteryName, maxTicketsNum, ticketPriceNum, winnersCountNum, botPercentNum });

        await db.executeQuery(
            'INSERT INTO lotteries (name, ticket_price, max_tickets, winners_count, bot_percent, current_tickets) VALUES ($1, $2, $3, $4, $5, 0)',
            [lotteryName, ticketPriceNum, maxTicketsNum, winnersCountNum, botPercentNum]
        );

        bot.sendMessage(chatId, `‚úÖ –õ–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞!\n ${lotteryName}\nüé´ ${maxTicketsNum} –±–∏–ª–µ—Ç–æ–≤ –ø–æ ${ticketPriceNum} ‚≠ê\nüèÜ ${winnersCountNum} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ—Ç–∞: ${botPercentNum}%`);
        console.log('[CREATE-LOTTERY] Lottery created successfully');

    } catch (error) {
        console.error('Error creating lottery:', error);
        console.error('Full error:', error.stack);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
});

// Admin referral lottery creation (Type 1: with condition)
bot.onText(/\/create_referral_lottery (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length < 5) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ãÔøΩÔøΩ —Ñ–æ—Ä–º–∞—Ç!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
\`/create_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|–≤—Ä–µ–º—è_—á–∞—Å–æ–≤|–º–∏–Ω_—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤|—Ü–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–º–µ—Å—Ç–æ1:–ø—Ä–∏–∑1|–º–µ—Å—Å–æ2:–ø—Ä–∏–∑2|...\`

–ü—Ä–∏–º–µ—Ä:
\`/create_referral_lottery –ù–µ–¥–µ–ª—å–Ω–∞—è|168|3|1.5|1:50|2:30|3:20\`

üë• –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–µ–¥–µ–ª—å–Ω–∞—è
‚Ä¢ –í—Ä–µ–º—è: 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)
‚Ä¢ –£—Å–ª–æ–≤–∏–µ: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –¶–µ–Ω–∞ –¥–æ–ø. –±–∏–ª–µ—Ç–∞: 1.5 ‚≠ê
‚Ä¢ –ü—Ä–∏–∑—ã: 1–º-50‚≠ê, 2–º-30‚≠ê, 3–º-20‚≠ê`, { parse_mode: 'Markdown' });
            return;
        }

        const [name, timeHours, minReferrals, ticketPrice, ...prizeParams] = params;

        // Parse prizes
        const prizes = [];
        for (const prizeParam of prizeParams) {
            const [place, amount] = prizeParam.split(':');
            if (!place || !amount) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–∑–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–µ—Å—Ç–æ:—Å—ÉÔøΩÔøΩ–º–∞');
                return;
            }
            prizes.push(parseFloat(amount));
        }

        if (prizes.length === 0) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑!');
            return;
        }

        // Create lottery
        const timeHoursNum = parseInt(timeHours);
        const endsAt = new Date();
        endsAt.setHours(endsAt.getHours() + timeHoursNum);

        const lotteryData = {
            name: name.trim(),
            ticket_price: 0, // Free base ticket
            max_tickets: 999999, // No limit for referral lotteries
            winners_count: prizes.length,
            lottery_type: 'referral_condition'
        };

        const refLotteryData = {
            required_referrals: parseInt(minReferrals),
            referral_time_hours: timeHoursNum,
            additional_ticket_price: parseFloat(ticketPrice),
            ends_at: endsAt
        };

        const lotteryId = await db.createReferralLottery(lotteryData, refLotteryData, prizes);

        let message = `‚úÖ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æÔøΩÔøΩ–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞!**

üé∞ **–ùÔøΩÔøΩ–∑–≤–∞–Ω–∏–µ:** ${name}
   **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${timeHours} —á–∞—Å–æ–≤
üë• **–£—Å–ª–æ–≤–∏–µ:** –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å ${minReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
üí∞ **–¶–µ–Ω–∞ –¥–æÔøΩÔøΩ. –±–∏–ª–µ—Ç–∞:** ${ticketPrice} ‚≠ê
üèÜ **–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞:** ${prizes.length}

**–ü—Ä–∏–∑—ã:**`;

        for (let i = 0; i < prizes.length; i++) {
            const place = i + 1;
            const emoji = place === 1 ? 'ü•á' : place === 2 ? 'ü•à' : place === 3 ? 'ü•â' : 'üèÖ';
            message += `\n${emoji} ${place} –º–µ—Å—Ç–æ: ${prizes[i]} ‚≠ê`;
        }

        message += `\n\n‚è∞ **ÔøΩÔøΩ–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** ${endsAt.toLocaleString('ru-RU')}`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log('[CREATE-REF-LOTTERY] Referral lottery created successfully, ID:', lotteryId);

    } catch (error) {
        console.error('Error creating referral lottery:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
});

// Admin auto referral lottery creation (Type 2: automatic)
bot.onText(/\/create_auto_referral_lottery (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤ÔøΩÔøΩÔøΩÔøΩ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length < 3) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
\`/create_auto_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|–≤—Ä–µ–º—è_—á–∞—Å–æ–≤|–º–µ—Å—Ç–æ1:–ø—Ä–∏–∑1|–º–µ—Å—Ç–æ2:–ø—Ä–∏–∑2|...\`

–ü—Ä–∏–º–µ—Ä:
\`/create_auto_referral_lottery –ê–≤—Ç–æ|72|1:100|2:60|3:40|4:20|5:10\`

‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: –ê–≤—Ç–æ
‚Ä¢ –í—Ä–µ–º—è: 72 —á–∞—Å–∞ (3 ÔøΩÔøΩÔøΩÔøΩ–Ω—è)
‚Ä¢ –ü—Ä–∏–∑—ã: 1–º-100‚≠ê, 2–º-60‚≠ê, 3–º-40‚≠ê, 4–º-20‚≠ê, 5–º-10‚≠ê
‚Ä¢ –ë–∏–ª–µ—Ç—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞`, { parse_mode: 'Markdown' });
            return;
        }

        const [name, timeHours, ...prizeParams] = params;

        // Parse prizes
        const prizes = [];
        for (const prizeParam of prizeParams) {
            const [place, amount] = prizeParam.split(':');
            if (!place || !amount) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–∑–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–µ—Å—Ç–æ:—Å—É–º–º–∞');
                return;
            }
            prizes.push(parseFloat(amount));
        }

        if (prizes.length === 0) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥ÔøΩÔøΩ–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑!');
            return;
        }

        // Create lottery
        const timeHoursNum = parseInt(timeHours);
        const endsAt = new Date();
        endsAt.setHours(endsAt.getHours() + timeHoursNum);

        const lotteryData = {
            name: name.trim(),
            ticket_price: 0, // No purchasing for auto referral
            max_tickets: 999999, // No limit
            winners_count: prizes.length,
            lottery_type: 'referral_auto'
        };

        const refLotteryData = {
            required_referrals: 1, // Each referral = 1 ticket
            referral_time_hours: timeHoursNum,
            additional_ticket_price: 0, // No additional tickets
            ends_at: endsAt
        };

        const lotteryId = await db.createReferralLottery(lotteryData, refLotteryData, prizes);

        let message = `‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞!**

üé∞ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${name}
‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${timeHours} —á–∞—Å–æ–≤
üé´ **–ë–∏–ª–µ—Ç—ã:** –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∏–ª–µ—Ç
üèÜ **–ü—Ä–∏–∑ÔøΩÔøΩ–≤—ã–µ –º–µ—Å—Ç–∞:** ${prizes.length}

**–ü—Ä–∏–∑—ã:**`;

        for (let i = 0; i < prizes.length; i++) {
            const place = i + 1;
            const emoji = place === 1 ? 'ü•á' : place === 2 ? 'ÔøΩÔøΩÔøΩÔøΩ' : place === 3 ? 'ü•â' : 'üèÖ';
            message += `\n${emoji} ${place} –º–µ—Å—ÇÔøΩÔøΩ: ${prizes[i]} ‚≠ê`;
        }

        message += `\n\n‚è∞ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** ${endsAt.toLocaleString('ru-RU')}`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log('[CREATE-AUTO-REF-LOTTERY] Auto referral lottery created successfully, ID:', lotteryId);

    } catch (error) {
        console.error('Error creating auto referral lottery:', error);
        bot.sendMessage(chatId, `ÔøΩÔøΩ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
});

// Admin command to select lottery winners manually
bot.onText(/\/select_lottery_winners (\d+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const lotteryId = parseInt(match[1]);
        const winnersData = match[2].split(' ');

        const winners = {};
        for (const winnerStr of winnersData) {
            const [place, winnerUserId] = winnerStr.split(':');
            if (!place || !winnerUserId) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞ÔøΩÔøΩ! –ò—Å–ø–æ–ª—å–∑—É–π—ÇÔøΩÔøΩ: /select_lottery_winners ID –º–µ—Å—Ç–æ1:userID –º–µ—Å—Ç–æ2:userID');
                return;
            }
            winners[place] = parseInt(winnerUserId);
        }

        // Select winners and distribute prizes
        await db.selectLotteryWinners(lotteryId, winners);

        // Get lottery info and prizes for broadcast
        const lotteryResult = await db.executeQuery('SELECT name FROM lotteries WHERE id = $1', [lotteryId]);
        const prizes = await db.getLotteryPrizes(lotteryId);

        if (lotteryResult.rows.length === 0) {
            bot.sendMessage(chatId, '‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        const lotteryName = lotteryResult.rows[0].name;

        // Send broadcast message to all users
        await broadcastLotteryResults(lotteryName, prizes);

        bot.sendMessage(chatId, `‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!\n\nüéâ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —ÄÔøΩÔøΩ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ª–æ—Ç–µ—Ä–µ–∏ "${lotteryName}".`);

    } catch (error) {
        console.error('Error selecting lottery winners:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${error.message}`);
    }
});

// Referral lottery handlers
async function handleReferralLotteryCheck(chatId, messageId, userId, lotteryId) {
    try {
        // Check if user meets referral condition
        const condition = await db.checkReferralCondition(lotteryId, userId);

        if (condition.qualified) {
            // Add free ticket for qualified user
            await db.addReferralTicket(lotteryId, userId, 'free');

            await bot.editMessageText(`‚úÖ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ!\n\nüë• –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${condition.referralCount}/${condition.required}\nüé´ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç!\n\nüí∞ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É–≤–µÔøΩÔøΩ–∏—á–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–±–µ–¥—É.`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üé´ –ö—É–ø–∏—Ç—å –¥–æ–ø. –±–∏–ª–µ—Ç', callback_data: `ref_lottery_buy_${lotteryId}` }],
                        [{ text: 'üé∞  –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
        } else {
            await bot.editMessageText(`‚ùå **–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**\n\nüë• –ü—Ä–∏–≥ÔøΩÔøΩ–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${condition.referralCount}/${condition.required}\n\nüìã –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ ${condition.required - condition.referralCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\nüí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
                        [{ text: 'üé∞ ÔøΩÔøΩ –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
        }
    } catch (error) {
        console.error('Error checking referral lottery condition:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleReferralLotteryBuy(chatId, messageId, userId, lotteryId) {
    try {
        // Get lottery details
        const lotteryResult = await db.executeQuery(`
            SELECT l.name, rl.additional_ticket_price, rl.ends_at
            FROM lotteries l
            JOIN referral_lotteries rl ON l.id = rl.lottery_id
            WHERE l.id = $1 AND l.is_active = TRUE
        `, [lotteryId]);

        if (lotteryResult.rows.length === 0) {
            await bot.editMessageText('‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const lottery = lotteryResult.rows[0];

        // Check if lottery is still active
        if (new Date() > new Date(lottery.ends_at)) {
            await bot.editMessageText('‚ùå –õ–æ—Ç–µ—Ä–µ—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–ΩÔøΩÔøΩ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check user balance
        const user = await db.getUser(userId);
        if (user.balance < lottery.additional_ticket_price) {
            await bot.editMessageText(`‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω—É–∂–ΩÔøΩÔøΩ: ${lottery.additional_ticket_price} ‚≠ê\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                        [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
                        [{ text: 'üé∞ –ö –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }]
                    ]
                }
            });
            return;
        }

        // Buy additional ticket
        await db.executeQuery('BEGIN');

        try {
            // Deduct balance
            await db.updateUserBalance(userId, -lottery.additional_ticket_price);

            // Add weekly points for lottery ticket purchase
            try {
                await db.addWeeklyPoints(userId, 1, 'lottery_ticket_purchase');
            } catch (pointsError) {
                console.error('Error adding weekly points for lottery purchase:', pointsError);
            }

            // Add purchased ticket
            await db.addReferralTicket(lotteryId, userId, 'purchased');

            await db.executeQuery('COMMIT');

            await bot.editMessageText(`‚úÖ **–ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!**\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–∏–ª–µ—Ç –≤ –ª–æ—Ç–µ—Ä–µ—é "${lottery.name}"!\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ: ${lottery.additional_ticket_price} ‚≠ê\nüíé ÔøΩÔøΩ–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance - lottery.additional_ticket_price} ‚≠ê\n\nüçÄ –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'ÔøΩÔøΩÔøΩ –ö—É–ø–∏—Ç—å –µ—â–µ –±–∏–ª–µ—Ç', callback_data: `ref_lottery_buy_${lotteryId}` }],
                        [{ text: 'üé∞ –ö –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }],
                        [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });

        } catch (error) {
            await db.executeQuery('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('Error buying referral lottery ticket:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

// Function to send completed withdrawal notification to payments channel
async function sendPaymentNotification(withdrawalId, user, amount, type) {
    try {
        const completedCount = await db.getCompletedWithdrawalsCount();

        // Clean user display name
        const displayName = cleanDisplayText(user.first_name);
        const usernameText = user.username ? ` | @${user.username}` : '';

        const typeText = type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : `${amount}‚≠êÔ∏è`;

        const message = `‚úÖ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ${completedCount}

üë§ –ü–æÔøΩÔøΩ—å–∑–æ–≤–∞—Ç–µ–ª—å: ${displayName}${usernameText}| ID: ${user.id}
üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${typeText}

üîÑ –°—Ç–∞—Ç—É—Å: –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéÅ`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üì∫ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª', url: 'https://t.me/kirbyvivodstars' },
                        { text: 'üí¨ –ù–∞—à —á–∞—Ç', url: 'https://t.me/kirbychat_stars' },
                        { text: 'ü§ñ –ë–æ—Ç', url: 'https://t.me/kirby_stars_bot' }
                    ]
                ]
            }
        };

        await bot.sendMessage(PAYMENTS_CHANNEL, message, {
            parse_mode: 'Markdown',
            ...keyboard
        });

        console.log(`[PAYMENT] Notification sent to ${PAYMENTS_CHANNEL} for withdrawal #${completedCount}`);
        return true;
    } catch (error) {
        console.error('Error sending payment notification:', error);
        return false;
    }
}

// Function to broadcast lottery results to all users
async function broadcastLotteryResults(lotteryName, prizes) {
    try {
        const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');

        let message = ` **–õ–æ—Ç–µ—Ä–µ—è "${lotteryName}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\nüèÜ **–ü–æ–±–µ–¥ÔøΩÔøΩ—Ç–µ–ª–∏:**\n`;

        for (const prize of prizes) {
            if (prize.winner_user_id) {
                const winnerResult = await db.executeQuery('SELECT first_name, username FROM users WHERE id = $1', [prize.winner_user_id]);
                if (winnerResult.rows.length > 0) {
                    const winner = winnerResult.rows[0];
                    const displayName = winner.username ? `@${winner.username}` : winner.first_name;
                    const emoji = prize.place === 1 ? 'ü•á' : prize.place === 2 ? 'ü•à' : prize.place === 3 ? 'ü•â' : 'üèÖ';
                    message += `${emoji} ${prize.place} –º–µ—Å—Ç–æ: ${displayName} - ${prize.prize_amount} ‚≠ê\n`;
                }
            }
        }

        message += '\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéä';

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ÔøΩÔøΩÔøΩÔøΩ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æÔøΩÔøΩ–µ—Ä–µ—è—Ö', callback_data: 'lottery' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        // Use throttler for broadcast
        const result = await throttler.broadcastMessages(
            users.rows,
            (user) => bot.sendMessage(user.id, message, {
                parse_mode: 'Markdown',
                ...keyboard
            })
        );

        console.log(`[LOTTERY-BROADCAST] Results sent to ${result.success} out of ${result.total} users, ${result.errors} errors`);
        return result.success;

    } catch (error) {
        console.error('Error broadcasting lottery results:', error);
        throw error;
    }
}

// Admin subscription statistics command
bot.onText(/\/subscription_stats/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤ÔøΩÔøΩ—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const stats = await db.getChannelSubscriptionStats();
        const uniqueUsersCount = await db.getUniqueSubscriptionUsersCount();

        if (stats.length === 0) {
            bot.sendMessage(chatId, `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö.\n\n–î–æ–±–∞–≤ÔøΩÔøΩÔøΩÔøΩÔøΩ–µ –æ–±—è–∑–∞ÔøΩÔøΩ–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫.`, { parse_mode: 'Markdown' });
            return;
        }

        let message = `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∫–∞–Ω–∞ÔøΩÔøΩ–∞–º**\n\n`;
        message += `üë• **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É:** ${uniqueUsersCount}\n`;
        message += `üîÑ *(–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)*\n\n`;

        let totalChecks = 0;

        for (const stat of stats) {
            const channelName = stat.channel_name || stat.channel_id;
            const addedDate = stat.channel_added_at ? new Date(stat.channel_added_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const lastCheck = stat.last_check_at ? new Date(stat.last_check_at).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞';
            const activeStatus = stat.is_active ? '‚úÖ' : 'ÔøΩÔøΩÔøΩ';

            message += `${activeStatus} **${channelName}**\n`;
            message += `   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: **${stat.successful_checks}**\n`;
            message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${addedDate}\n`;
            message += `   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${lastCheck}\n\n`;

            totalChecks += parseInt(stat.successful_checks);
        }

        message += `üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—ÇÔøΩÔøΩ–∫–∞:**\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${uniqueUsersCount}**\n`;
        message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: **${stats.filter(s => s.is_active).length}**\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: **${stats.length}**`;

        bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_unique_users' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error getting subscription stats:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ÔøΩÔøΩ–æ–¥–ø–∏—Å–æ–∫.');
    }
});

// Admin command to view latest unique subscription users
bot.onText(/\/unique_users/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const uniqueUsers = await db.getLatestUniqueSubscriptionUsers(15);
        const totalCount = await db.getUniqueSubscriptionUsersCount();

        let message = `üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** (${totalCount} –≤—Å–µ–≥–æ)\n\n`;

        if (uniqueUsers.length === 0) {
            message += 'üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.';
        } else {
            for (let i = 0; i < uniqueUsers.length; i++) {
                const user = uniqueUsers[i];
                const cleanName = cleanDisplayText(user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π');
                const date = new Date(user.first_success_at).toLocaleString('ru-RU');

                message += `${i + 1}. **${cleanName}**\n`;
                message += `   üÜî ID: ${user.user_id}\n`;
                if (user.username) {
                    message += `   üì± @${user.username}\n`;
                }
                message += `   üìÖ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${date}\n\n`;
            }
        }

        bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown'
        });
    } catch (error) {
        console.error('Error getting unique users:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æÔøΩÔøΩ–∞—Ç–µ–ª—è—Ö.');
    }
});

// Admin promocode creation
bot.onText(/\/create_promo (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –øÔøΩÔøΩ–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length !== 3) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞ÔøΩÔøΩ! –ò—Å–ø–æ–ª—å–∑—É–π—ÇÔøΩÔøΩ: /create_promo –ö–û–î|–Ω–∞–≥—Ä–∞–¥–∞|–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
            return;
        }

        const [code, reward, maxUses] = params;

        await db.executeQuery(
            'INSERT INTO promocodes (code, reward, max_uses, created_by) VALUES ($1, $2, $3, $4)',
            [code.trim().toUpperCase(), parseFloat(reward), parseInt(maxUses), userId]
        );

        bot.sendMessage(chatId, `ÔøΩÔøΩÔøΩ –ü—Ä–æ–º–æ–∫ÔøΩÔøΩ–¥ —Å–æ–∑–¥–∞–Ω!\nüéÅ –ö–æ–¥: ${code.toUpperCase()}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: ${reward} ‚≠ê\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${maxUses}`);

    } catch (error) {
        console.error('Error creating promocode:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ºÔøΩÔøΩ–∫–æ–¥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).');
    }
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`[CALLBACK] Received: ${data} from userId: ${userId}`);

    try {
        // Check captcha first (except for captcha-related buttons)
        if (data !== 'new_captcha' && data !== 'restart_after_captcha' && !isAdmin(userId)) {
            const captchaPassed = await db.getCaptchaStatus(userId);
            if (!captchaPassed) {
                // User hasn't passed captcha - show captcha
                if (captchaSystem.hasActiveSession(userId)) {
                    const currentQuestion = captchaSystem.getCurrentQuestion(userId);
                    await bot.editMessageText(`ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æÔøΩÔøΩ**

–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:
**${currentQuestion}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]
                            ]
                        }
                    });
                } else {
                    const question = captchaSystem.generateCaptcha(userId);
                    await bot.editMessageText(`ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç**

–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:
**${question}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]
                            ]
                        }
                    });
                }
                await bot.answerCallbackQuery(callbackQuery.id);
                return;
            }
        }

        // Check subscription for all important buttons (except admin functions)
        if (data !== 'check_subscriptions' && data !== 'main_menu' && data !== 'new_captcha' && data !== 'restart_after_captcha' && !data.startsWith('admin_') && !isAdmin(userId)) {
            const isSubscribed = await checkAllSubscriptions(userId);
            if (!isSubscribed) {
                const subData = await getEnhancedSubscriptionMessage(userId);
                await bot.editMessageText(subData.message, {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: subData.buttons }
                });
                await bot.answerCallbackQuery(callbackQuery.id);
                return;
            }
        }

        // Get user data
        const user = await db.getUser(userId);
        
        if (!user && !data.startsWith('admin_') && data !== 'main_menu' && data !== 'check_subscriptions') {
            await bot.editMessageText(
                '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                {
                    chat_id: chatId,
                    message_id: msg.message_id
                }
            );
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }

        // Handle different callback data
        switch (data) {
            case 'new_captcha':
                // Generate new captcha for user
                const newQuestion = captchaSystem.generateCaptcha(userId);
                await bot.editMessageText(`ü§ñ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç**

–†–µ—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä:
**${newQuestion}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]
                        ]
                    }
                });
                await bot.answerCallbackQuery(callbackQuery.id, { text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µÔøΩÔøΩ–∏—Ä–æ–≤–∞–Ω!' });
                break;

            case 'restart_after_captcha':
                // User passed captcha and wants to restart bot
                await bot.editMessageText('ÔøΩÔøΩ –ü–µ—Ä–µ–∑ÔøΩÔøΩ–ø—É—Å–∫...', {
                    chat_id: chatId,
                    message_id: msg.message_id
                });

                // Simulate /start command
                setTimeout(async () => {
                    try {
                        const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarBot!**

üí∞ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∫–ª–∏–∫–µ—Ä–µ
ÔøΩÔøΩÔøΩ –í—ã–ø–æ–ªÔøΩÔøΩ–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (3‚≠ê –∑–∞ –¥—Ä—É–≥–∞)
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
ÔøΩÔøΩ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

                        await bot.sendMessage(chatId, welcomeMessage, {
                            parse_mode: 'Markdown',
                            reply_markup: { remove_keyboard: true },
                            ...getMainMenuKeyboard()
                        });
                    } catch (error) {
                        console.error('Error in restart after captcha:', error);
                    }
                }, 1000);

                await bot.answerCallbackQuery(callbackQuery.id);
                break;

            case 'check_subscriptions':
                const isSubscribed = await checkAllSubscriptions(userId, true); // Enable stats recording
                
                if (isSubscribed) {
                    await db.updateUserField(userId, 'is_subscribed', true);

                    // Add weekly points for bot activation
                    try {
                        await db.addWeeklyPoints(userId, 1, 'bot_activation');
                    } catch (pointsError) {
                        console.error('Error adding weekly points for bot activation:', pointsError);
                    }
                    
                    // Process pending referrer (set invited_by but don't award bonus yet)
                    const user = await db.getUser(userId);
                    if (user && user.pending_referrer) {
                        const invitedBy = user.pending_referrer;

                        // Clear pending referrer and set invited_by
                        await db.updateUserField(userId, 'pending_referrer', null);
                        await db.updateUserField(userId, 'invited_by', invitedBy);

                        console.log(`[REFERRAL] User ${userId} linked to referrer ${invitedBy} - bonus will be awarded when qualified`);
                    }

                    // Check if user now qualifies for referral processing (new system)
                    try {
                        const qualification = await db.checkReferralQualification(userId);
                        if (qualification.qualified) {
                            const result = await db.checkAndProcessPendingReferrals(userId);
                            if (result.processed > 0) {
                                // Send notification to referrer
                                try {
                                    const userInfo = await db.getUser(userId);
                                    const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

üë§ –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${userInfo.first_name}** –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è:
‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É
‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
ÔøΩÔøΩÔøΩ –ü—Ä–∏–≥–ª–∞—Å–∏–ª —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

üí∞ **–í—ã –ø–æ–ª—É—á–∏–ª–∏:** +3 ‚≠ê
üíé **–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ªÔøΩÔøΩ–µ–Ω!**

üë• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!`;

                                    await bot.sendMessage(result.referrerId, message, {
                                        parse_mode: 'Markdown',
                                        reply_markup: {
                                            inline_keyboard: [
                                                [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                                            ]
                                        }
                                    });
                                } catch (error) {
                                    console.error('Error sending qualified referral notification:', error);
                                }
                            }
                        }
                    } catch (error) {
                        console.error('Error checking referral qualification:', error);
                    }

                    // Check for retroactive referral activation (old referrals)
                    try {
                        const retroResult = await db.activateRetroactiveReferral(userId);
                        if (retroResult.success) {
                            // Send notification to referrer about retroactive activation
                            try {
                                const userInfo = await db.getUser(userId);
                                const message = `üîÑ **–í–æ–∑ÔøΩÔøΩ—Ä–∞—Ç –∑–≤—ë–∑–¥!**

üë§ –í–∞—à —Ä–µÔøΩÔøΩ–µ—Ä–∞–ª **${userInfo.first_name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è:
‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É
‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã

üí∞ **–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:** +3 ‚≠ê
üíé **–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!**

üéØ –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é!`;

                                await bot.sendMessage(retroResult.referrerId, message, {
                                    parse_mode: 'Markdown',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                                        ]
                                    }
                                });
                            } catch (error) {
                                console.error('Error sending retroactive activation notification:', error);
                            }
                        }
                    } catch (error) {
                        console.error('Error checking retroactive activation:', error);
                    }

                    await handleMainMenu(chatId, msg.message_id);
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: '‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!',
                        show_alert: true
                    });
                }
                break;
            case 'main_menu':
                await handleMainMenu(chatId, msg.message_id);
                break;
            case 'profile':
                await handleProfile(chatId, msg.message_id, user);
                break;
            case 'invite':
                await handleInvite(chatId, msg.message_id, user);
                break;
            case 'clicker':
                await handleClicker(chatId, msg.message_id, user);
                break;
            case 'withdraw':
                await handleWithdraw(chatId, msg.message_id, user);
                break;
            case 'tasks':
                await handleTasks(chatId, msg.message_id, user);
                break;
            case 'instruction':
                await handleInstruction(chatId, msg.message_id);
                break;
            case 'ratings':
                await handleRatings(chatId, msg.message_id);
                break;
            case 'ratings_all':
                await handleRatingsAll(chatId, msg.message_id);
                break;
            case 'ratings_week':
                await handleRatingsWeek(chatId, msg.message_id);
                break;
            case 'ratings_week_points':
                await handleRatingsWeekPoints(chatId, msg.message_id);
                break;
            case 'cases':
                await handleCases(chatId, msg.message_id, user);
                break;
            case 'lottery':
                await handleLottery(chatId, msg.message_id, userId);
                break;
            case 'promocode':
                await handlePromocodeInput(chatId, msg.message_id, userId);
                break;
            
            // Withdraw handlers
            case 'withdraw_15':
            case 'withdraw_25':
            case 'withdraw_50':
            case 'withdraw_100':
            case 'withdraw_premium':
                await handleWithdrawRequest(chatId, msg.message_id, userId, data);
                break;
            
            // Task handlers
            case 'task_skip':
                await handleTaskSkip(chatId, msg.message_id, userId);
                break;
            
            // Admin handlers
            case 'admin_stats':
                if (isAdmin(userId)) await handleAdminStats(chatId, msg.message_id);
                break;
            case 'admin_weekly_rewards':
                if (isAdmin(userId)) {
                    await handleAdminWeeklyRewards(chatId, msg.message_id);
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!', show_alert: true });
                }
                break;
            case 'admin_weekly_enable':
                if (isAdmin(userId)) {
                    await db.updateWeeklyRewardsSettings(true);
                    await handleAdminWeeklyRewards(chatId, msg.message_id);
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤–∫–ª—é—á–µ–Ω—ã!' });
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!', show_alert: true });
                }
                break;
            case 'admin_weekly_disable':
                if (isAdmin(userId)) {
                    await db.updateWeeklyRewardsSettings(false);
                    await handleAdminWeeklyRewards(chatId, msg.message_id);
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–∫–ª—éÔøΩÔøΩ–µ–Ω—ã!' });
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!', show_alert: true });
                }
                break;
            case 'admin_weekly_trigger':
                if (isAdmin(userId)) {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: 'üèÜ –ó–∞–ø—É—Å–∫–∞—é —ÄÔøΩÔøΩ—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥...' });
                    try {
                        const result = await distributeWeeklyRewards(true);
                        if (result.success) {
                            await bot.editMessageText(`‚úÖ **–ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!**\n\nüë• –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.users}\nüìä –û—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã\n\nüéØ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å!`, {
                                chat_id: chatId,
                                message_id: msg.message_id,
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ÔøΩÔøΩ–∞–≥—Ä–∞–¥–∞–º–∏', callback_data: 'admin_weekly_rewards' }],
                                        [{ text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }]
                                    ]
                                }
                            });
                        } else {
                            await bot.editMessageText(`‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥**\n\n${result.message}`, {
                                chat_id: chatId,
                                message_id: msg.message_id,
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üèÜ ÔøΩÔøΩ–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏', callback_data: 'admin_weekly_rewards' }],
                                        [{ text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }]
                                    ]
                                }
                            });
                        }
                    } catch (error) {
                        console.error('Error in manual weekly rewards trigger:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏', callback_data: 'admin_weekly_rewards' }],
                                    [{ text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }]
                                ]
                            }
                        });
                    }
                }
                break;
            case 'admin_menu':
                if (isAdmin(userId)) {
                    const stats = await db.getUserStats();
                    const message = `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

                    await bot.editMessageText(message, {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...getAdminMenuKeyboard()
                    });
                }
                break;

            // Stars Agent —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–Ω–æ—Å—Ç—å —É–¥ÔøΩÔøΩ–ª–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –æ–±ÔøΩÔøΩ–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫

            case 'admin_tasks':
                console.log(`[MAIN] Admin tasks called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminTasks...');
                        console.log('[MAIN] adminHandlers object:', typeof adminHandlers);
                        console.log('[MAIN] handleAdminTasks function:', typeof adminHandlers.handleAdminTasks);

                        if (typeof adminHandlers.handleAdminTasks !== 'function') {
                            throw new Error('handleAdminTasks is not a function');
                        }

                        await adminHandlers.handleAdminTasks(bot, chatId, msg.message_id);
                        console.log('[MAIN] handleAdminTasks completed successfully');
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminTasks:', error);
                        console.error('[MAIN] Error stack:', error.stack);
                        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_channels':
                console.log(`[MAIN] Admin channels called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminChannels...');
                        console.log('[MAIN] handleAdminChannels function:', typeof adminHandlers.handleAdminChannels);

                        if (typeof adminHandlers.handleAdminChannels !== 'function') {
                            throw new Error('handleAdminChannels is not a function');
                        }

                        await adminHandlers.handleAdminChannels(bot, chatId, msg.message_id);
                        console.log('[MAIN] handleAdminChannels completed successfully');
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminChannels:', error);
                        console.error('[MAIN] Error stack:', error.stack);
                        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_subscription_stats':
                if (isAdmin(userId)) {
                    await handleSubscriptionStats(chatId, msg.message_id);
                }
                break;
            case 'admin_subgram':
                if (isAdmin(userId)) {
                    await handleAdminSubGram(chatId, msg.message_id);
                }
                break;
            case 'admin_subgram_settings':
                if (isAdmin(userId)) {
                    await handleAdminSubGramSettings(chatId, msg.message_id);
                }
                break;
            case 'admin_subgram_stats':
                if (isAdmin(userId)) {
                    await handleAdminSubGramStats(chatId, msg.message_id);
                }
                break;
            case 'admin_subgram_logs':
                if (isAdmin(userId)) {
                    await handleAdminSubGramLogs(chatId, msg.message_id);
                }
                break;
            case 'admin_subscription_history':
                if (isAdmin(userId)) {
                    await handleSubscriptionHistory(chatId, msg.message_id);
                }
                break;
            case 'admin_unique_users':
                if (isAdmin(userId)) {
                    await handleUniqueUsers(chatId, msg.message_id);
                }
                break;
            case 'admin_lottery':
                console.log(`[MAIN] Admin lottery called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminLottery...');
                        await adminHandlers.handleAdminLottery(bot, chatId, msg.message_id);
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminLottery:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—ÇÔøΩÔøΩ—Ä–µ—è–º–∏.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_promocodes':
                console.log(`[MAIN] Admin promocodes called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminPromocodes...');
                        await adminHandlers.handleAdminPromocodes(bot, chatId, msg.message_id);
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminPromocodes:', error);
                        await bot.editMessageText('ÔøΩÔøΩÔøΩ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_broadcast':
                if (isAdmin(userId)) await adminHandlers.handleAdminBroadcast(bot, chatId, msg.message_id);
                break;
            case 'broadcast_tasks':
                if (isAdmin(userId)) await adminHandlers.handleBroadcastTasks(bot, chatId, msg.message_id);
                break;
            case 'broadcast_referrals':
                if (isAdmin(userId)) await adminHandlers.handleBroadcastReferrals(bot, chatId, msg.message_id);
                break;
            case 'broadcast_custom':
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling handleBroadcastCustom...');
                        await handleBroadcastCustom(chatId, msg.message_id, userId);
                        console.log('[MAIN] handleBroadcastCustom completed successfully');
                    } catch (error) {
                        console.error('[MAIN] Error in handleBroadcastCustom:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'ÔøΩÔøΩÔøΩÔøΩ –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ªÔøΩÔøΩ–µ', callback_data: 'admin_broadcast' }]] }
                        });
                    }
                }
                break;
            case 'admin_list_tasks':
                if (isAdmin(userId)) await adminHandlers.handleAdminListTasks(bot, chatId, msg.message_id);
                break;
            case 'admin_list_channels':
                if (isAdmin(userId)) await adminHandlers.handleAdminListChannels(bot, chatId, msg.message_id);
                break;
            case 'admin_list_lotteries':
                if (isAdmin(userId)) await adminHandlers.handleAdminListLotteries(bot, chatId, msg.message_id);
                break;
            case 'admin_list_promos':
                if (isAdmin(userId)) await adminHandlers.handleAdminListPromos(bot, chatId, msg.message_id);
                break;
            case 'admin_menu':
                if (isAdmin(userId)) await handleAdminMenu(chatId, msg.message_id);
                break;
            case 'cancel_broadcast':
                if (isAdmin(userId)) {
                    await db.updateUserField(userId, 'temp_action', null);
                    await bot.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]]
                        }
                    });
                }
                break;

            // SubGram handlers
            case 'check_subscriptions_enhanced':
                await handleEnhancedSubscriptionCheck(chatId, msg.message_id, userId);
                break;
            case 'subgram_check':
                await handleSubGramCheck(chatId, msg.message_id, userId);
                break;
            case 'subgram_gender_male':
                await handleSubGramGender(chatId, msg.message_id, userId, 'male');
                break;
            case 'subgram_gender_female':
                await handleSubGramGender(chatId, msg.message_id, userId, 'female');
                break;

            default:
                // Handle dynamic callback data
                if (data.startsWith('task_check_')) {
                    const taskId = data.replace('task_check_', '');
                    await handleTaskCheck(chatId, msg.message_id, userId, taskId);
                } else if (data.startsWith('lottery_buy_')) {
                    const lotteryId = data.replace('lottery_buy_', '');
                    await handleLotteryBuy(chatId, msg.message_id, userId, lotteryId);
                } else if (data.startsWith('ref_lottery_check_')) {
                    const lotteryId = data.replace('ref_lottery_check_', '');
                    await handleReferralLotteryCheck(chatId, msg.message_id, userId, lotteryId);
                } else if (data.startsWith('ref_lottery_buy_')) {
                    const lotteryId = data.replace('ref_lottery_buy_', '');
                    await handleReferralLotteryBuy(chatId, msg.message_id, userId, lotteryId);
                } else if (data === 'lottery_sold_out') {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: 'üö´ –í—Å–µ –±–∏–ª–µ—Ç—ã –≤ —ç—Ç—É –ª–æ—Ç–µ—Ä–µ—é –ø—Ä–æ–¥–∞–Ω—ã!',
                        show_alert: true
                    });
                    return; // Don't process further
                } else if (data.startsWith('approve_withdrawal_')) {
                    if (isAdmin(userId)) await handleWithdrawalApproval(chatId, msg.message_id, data);
                } else if (data.startsWith('reject_withdrawal_')) {
                    if (isAdmin(userId)) await handleWithdrawalRejection(chatId, msg.message_id, data, userId);
                }
                break;
        }

        // Answer callback query
        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('Error handling callback query:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true
        });
    }
});

// Lottery reward distribution
async function distributeLotteryRewards(lotteryId, lottery) {
    try {
        console.log(`[LOTTERY] Starting reward distribution for lottery ${lotteryId}`);

        // Get all participants
        const participants = await db.executeQuery(
            'SELECT user_id FROM lottery_tickets WHERE lottery_id = $1',
            [lotteryId]
        );

        if (participants.rows.length === 0) {
            console.log('[LOTTERY] No participants found');
            return;
        }

        // Select random winners
        const winnersCount = Math.min(lottery.winners_count, participants.rows.length);
        const shuffled = [...participants.rows].sort(() => 0.5 - Math.random());
        const winners = shuffled.slice(0, winnersCount);

        // Calculate reward per winner (with bot percentage)
        const totalPrizePool = lottery.ticket_price * lottery.max_tickets;
        const botPercent = lottery.bot_percent || 20; // Default 20% if not set
        const playersPrizePool = totalPrizePool * (1 - botPercent / 100);
        const botTake = totalPrizePool - playersPrizePool;
        const rewardPerWinner = Math.floor(playersPrizePool / winnersCount * 100) / 100; // Round to 2 decimals

        console.log(`[LOTTERY] Total pool: ${totalPrizePool} ‚≠ê, Bot take (${botPercent}%): ${botTake} ‚≠ê, Players pool: ${playersPrizePool} ‚≠ê, ${winnersCount} winners, ${rewardPerWinner} ‚≠ê each`);

        // Distribute rewards
        for (const winner of winners) {
            await db.updateUserBalance(winner.user_id, rewardPerWinner);

            // Notify winner
            try {
                const user = await db.getUser(winner.user_id);
                const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ!**

üé∞ –õ–æ—Ç–µ—Ä–µ—è: **${lottery.name}**
üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: **${rewardPerWinner} ‚≠ê**
üèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winnersCount}

üéâ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ ÔøΩÔøΩÔøΩÔøΩ—à –±–∞–ª–∞–Ω—Å!`;

                await bot.sendMessage(winner.user_id, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                console.log(`[LOTTERY] Winner ${winner.user_id} notified`);
            } catch (notifyError) {
                console.error(`[LOTTERY] Failed to notify winner ${winner.user_id}:`, notifyError);
            }
        }

        // Mark lottery as inactive
        await db.executeQuery(
            'UPDATE lotteries SET is_active = FALSE WHERE id = $1',
            [lotteryId]
        );

        console.log(`[LOTTERY] Lottery ${lotteryId} completed successfully`);

    } catch (error) {
        console.error('[LOTTERY] Error distributing rewards:', error);
    }
}

// Menu handlers
async function handleMainMenu(chatId, messageId) {
    const welcomeMessage = `üåü **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é StarBot**

üí∞ **–í–∞—à –ø–µ—ÄÔøΩÔøΩ–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

üéØ **–î–æ—Å—ÇÔøΩÔøΩ–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ ÔøΩÔøΩÔøΩÔøΩ **–ö–ª–∏–∫–µ—Ä** - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ 0.1 ‚≠ê
‚Ä¢ üìã **–ó–∞–¥–∞–Ω–∏—è** - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤–æÔøΩÔøΩ–Ω–∞–≥—Ä–∞–∂–¥ÔøΩÔøΩ–Ω–∏–µ
‚Ä¢ üë• **ÔøΩÔøΩ–µ—Ñ–µ—Ä–∞–ª—ã** - ÔøΩÔøΩ—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π (3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ)
‚Ä¢ üéÅ **–ö–µ–π—Å—ã** - –ø—Ä–∏–∑—ã –æ—Ç 1 –¥–æ 10 ‚≠ê
‚Ä¢ üé∞ **–õ–æÔøΩÔøΩ–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π ÔøΩÔøΩ–∞–∑–¥ÔøΩÔøΩ–ª:`;

    await bot.editMessageText(welcomeMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getMainMenuKeyboard()
    });
}

async function handleProfile(chatId, messageId, user) {
    const registrationDate = new Date(user.registered_at).toLocaleDateString('ru-RU');
    const totalEarned = user.referrals_count * 3; // From referrals

    const message = `üë§ **–õ–∏—á–ΩÔøΩÔøΩ–π –ø—Ä–æ—Ñ–∏–ª—å**

 **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**
‚Ä¢ –ò–º—è: **${user.first_name}**
‚Ä¢ ID: \`${user.id}\`
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: **${registrationDate}**

üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **${user.balance} ‚≠ê**
‚Ä¢ –ó–∞—Ä–∞–±ÔøΩÔøΩ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: **${totalEarned} ‚≠ê**

üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: **${user.referrals_count}**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: **${user.referrals_today}**

üéØ **–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
${user.last_click ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫: ${new Date(user.last_click).toLocaleDateString('ru-RU')}` : '‚Ä¢ –ö–ª–∏–∫–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}
${user.last_case_open ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–µ–π—Å: ${new Date(user.last_case_open).toLocaleDateString('ru-RU')}` : '‚Ä¢ –ö–µ–π—Å—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å'}`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getProfileKeyboard()
    });
}

async function handleInvite(chatId, messageId, user) {
    // Get bot username
    let botUsername = 'starsbotexample'; // fallback
    try {
        const botInfo = await bot.getMe();
        botUsername = botInfo.username;
    } catch (error) {
        console.error('Error getting bot info:', error);
    }

    const inviteLink = `https://t.me/${botUsername}?start=${user.id}`;

    const message = `üåü **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**

üí∞ **–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–πÔøΩÔøΩ–µ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏!**
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ **3 ‚≠ê** –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

üîó **–í–∞—à–∞ –ø–µ—Ä—Å–æÔøΩÔøΩÔøΩÔøΩ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`${inviteLink}\`

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:**
üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: **${user.referrals_count}**
üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: **${user.referrals_today}**
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: **${user.referrals_count * 3} ‚≠ê**

üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –ü–æ–¥ÔøΩÔøΩ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ
3. –î—Ä—É–≥ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
4. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 ‚≠ê –Ω–∞ –±–∞–ª–∞–Ω—Å!

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –†–µ—Ñ–µÔøΩÔøΩ–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–øÔøΩÔøΩ—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì• –ø–æÔøΩÔøΩ–µ–ª–∏—Ç—å—Å—è', switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤ÔøΩÔøΩ–∑–¥! ${inviteLink}` }],
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        }
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...keyboard
    });
}

async function handleClicker(chatId, messageId, user) {
    const now = new Date();
    const lastClick = user.last_click ? new Date(user.last_click) : null;
    const clicksToday = user.clicks_today || 0;

    // Check if it's a new day (reset clicks)
    const isNewDay = !lastClick || now.toDateString() !== lastClick.toDateString();
    const currentClicks = isNewDay ? 0 : clicksToday;

    // Maximum 10 clicks per day
    if (currentClicks >= 10) {
        const nextDay = new Date(now);
        nextDay.setDate(nextDay.getDate() + 1);
        nextDay.setHours(0, 0, 0, 0);

        const timeUntilNext = nextDay - now;
        const hoursLeft = Math.floor(timeUntilNext / (1000 * 60 * 60));
        const minutesLeft = Math.floor((timeUntilNext % (1000 * 60 * 60)) / (1000 * 60));

        const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

‚ùå **–õ–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ –∏—ÅÔøΩÔøΩ–µ—Ä–ø–∞–Ω!**

üìä **–°–µ–≥ÔøΩÔøΩ–¥–Ω—è –∫–ª–∏–∫–Ω—É—Ç–æ:** ${currentClicks}/10
üí∞ **–í–∞—à –±–∞–ªÔøΩÔøΩ–Ω—Å:** ${user.balance} ‚≠ê

‚è≥ **–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${hoursLeft}—á ${minutesLeft}ÔøΩÔøΩÔøΩ
üéÅ **–ó–∞–≤—Ç—Ä–∞ –¥–æ—Å—ÇÔøΩÔøΩ–ø–Ω–æ:** 10 –Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤

üí° **–°–æ–≤–µ—Ç:** –í—ã–ø–æ–ª–Ω—è–π—ÇÔøΩÔøΩ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
        return;
    }

    // Check cooldown for next click (if not first click of the day)
    if (!isNewDay && lastClick && currentClicks > 0) {
        // Progressive delay: 5, 10, 15, 20, 25, 30, 35, 40, 45 minutes (max 45 for 9th click)
        const delayMinutes = Math.min(currentClicks * 5, 45);
        const nextClickTime = new Date(lastClick.getTime() + delayMinutes * 60 * 1000);

        if (now < nextClickTime) {
            const timeLeft = nextClickTime - now;
            const minutesLeft = Math.ceil(timeLeft / (1000 * 60));

            const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

‚è∞ **–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–∫–æ–º!**

üìä **–°–µ–≥–æ–¥–Ω—è –∫–ª–∏–∫–Ω—É–ª–æ:** ${currentClicks}/10
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

‚è≥ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞:** ${minutesLeft} –º–∏–Ω
‚è∞ **–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞:** 0.1 ‚≠ê

‚åõ **–í—Ä–µ–º—è ÔøΩÔøΩÔøΩ–∂–∏–¥–∞–Ω–∏—è:** ${delayMinutes} –º–∏–Ω (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –∫–ª–∏–∫–æ–º)`;

            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'ÔøΩÔøΩÔøΩ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'clicker' }],
                        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
            return;
        }
    }

    // Can click - award reward
    const reward = 0.1;
    const newClicks = currentClicks + 1;

    try {
        await db.executeQuery('BEGIN');

        await db.updateUserBalance(user.id, reward);
        await db.updateUserField(user.id, 'last_click', now);
        await db.updateUserField(user.id, 'clicks_today', newClicks);

        await db.executeQuery('COMMIT');

        // Add weekly points for click (separate transaction to not break main clicker if points fail)
        try {
            await db.addWeeklyPoints(user.id, 1, 'click');
        } catch (pointsError) {
            console.error('Error adding weekly points for click:', pointsError);
            // Continue - don't break clicker functionality for points error
        }

    } catch (error) {
        try {
            await db.executeQuery('ROLLBACK');
        } catch (rollbackError) {
            console.error('Error rolling back clicker transaction:', rollbackError);
        }

        console.error('Error in clicker operation:', error);

        try {
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫ÔøΩÔøΩ. –ü–æ–øÔøΩÔøΩ–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
        } catch (botError) {
            console.error('Error sending clicker error message:', botError);
        }
        return;
    }

    // Calculate next wait time
    const nextDelayMinutes = newClicks < 10 ? newClicks * 5 : '–ó–∞–≤—Ç—Ä–∞';
    const remainingClicks = 10 - newClicks;

    const message = `üéØ **–ö–ªÔøΩÔøΩ–∫–µ—Ä**

üéâ **–û—Ç–ª–∏—á–Ω–æ!** –ö–ª–∏–∫ ${newClicks}/10 –≤—ã–ø–æ–ª–Ω–µ–Ω!
üí∞ –ù–∞ÔøΩÔøΩ–∏—Å–ª–µ–Ω–æ: **+${reward} ‚≠ê** (+1 –æ—á–∫–æ)

 **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${(parseFloat(user.balance) + parseFloat(reward)).toFixed(1)} ‚≠ê
üî¢ –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤: ${remainingClicks}
${remainingClicks > 0 ? `‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏ÔøΩÔøΩ —á–µ—Ä–µ–∑: ${nextDelayMinutes} –º–∏–Ω` : 'üéâ –í—Å–µ –∫–ª–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!'}

 **–°–æ–≤–µ—Ç:** –° ÔøΩÔøΩ–∞–∂–¥—ã–º –∫–ª–∏–∫–æ–º –≤—Ä–µ–º—è –æ–∂–∏–¥ÔøΩÔøΩ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 5 –º–∏–Ω—É—Ç`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                remainingClicks > 0 ? [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'clicker' }] : [],
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ].filter(row => row.length > 0)
        }
    });
}

async function handleWithdraw(chatId, messageId, user) {
    const message = `‚≠ê **–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥**

**–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

${user.referrals_count < 5 ? 
    '‚ùå **–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞ÔøΩÔøΩ–æ–≤**' : 
    '‚úÖ **–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞**'
}

–íÔøΩÔøΩ–±ÔøΩÔøΩ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getWithdrawKeyboard()
    });
}

async function handleWithdrawRequest(chatId, messageId, userId, data) {
    try {
        const user = await db.getUser(userId);

        if (!user) {
            await bot.editMessageText('‚ùå ÔøΩÔøΩ–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        if (user.referrals_count < 5) {
            await bot.editMessageText('‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µÔøΩÔøΩ—Å—Ç–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const amounts = {
            'withdraw_15': 15,
            'withdraw_25': 25,
            'withdraw_50': 50,
            'withdraw_100': 100,
            'withdraw_premium': 1300
        };

        const amount = amounts[data];
        const type = data === 'withdraw_premium' ? 'premium' : 'stars';

        if (!amount) {
            await bot.editMessageText('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏ÔøΩÔøΩ –≤—ã–≤–æ–¥–∞.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if (parseFloat(user.balance) < amount) {
            await bot.editMessageText('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑ÔøΩÔøΩ—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
            const withdrawalResult = await db.executeQuery(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES ($1, $2, $3) RETURNING id',
                [userId, amount, type]
            );
            const withdrawalId = withdrawalResult.rows[0].id;

            // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞
            await db.updateUserBalance(userId, -amount);

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
            const cleanName = cleanDisplayText(user.first_name);
            const adminMessage = `üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${withdrawalId}**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${cleanName}
üÜî **ID:** ${user.id}
${user.username ? `üì± **Username:** @${user.username}` : ''}
üîó **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏ÔøΩÔøΩ—å](tg://user?id=${user.id})

üí∞ **–°—É–º–º–∞:** ${amount} ‚≠ê
üì¶ **–¢–∏–ø:** ${type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : '–ó–≤—ë–∑–¥—ã'}
üíé **–ë–∞–ª–∞–Ω—Å –ø–æÔøΩÔøΩ–ª–µ –≤—ã–≤–æ–¥–∞:** ${(parseFloat(user.balance) - amount).toFixed(2)} ‚≠ê`;

            const adminKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `approve_withdrawal_${userId}_${amount}_${type}_${withdrawalId}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_data: `reject_withdrawal_${userId}_${amount}_${type}_${withdrawalId}` }
                        ]
                    ]
                }
            };

            // –û–°–¢–ê–í–õ–Ø–ï–ú: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª
            try {
                await bot.sendMessage(ADMIN_CHANNEL, adminMessage, {
                    parse_mode: 'Markdown',
                    ...adminKeyboard
                });
            } catch (adminError) {
                console.error('[WITHDRAWAL] Error sending to admin channel:', adminError.message);
                // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—ÅÔøΩÔøΩ–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                // –ó–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã
            }

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
            await bot.editMessageText('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });

            console.log(`[WITHDRAWAL] Request created: User ${userId}, Amount ${amount}, Type ${type}, ID ${withdrawalId}`);

        } catch (error) {
            console.error('[WITHDRAWAL] Error processing withdrawal:', error);

            await bot.editMessageText('‚ùå –û—à–∏ÔøΩÔøΩ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—èÔøΩÔøΩ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
        }

    } catch (error) {
        console.error('[WITHDRAWAL] Main error:', error?.message || error);

        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æÔøΩÔøΩ–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleTasks(chatId, messageId, user) {
    try {
        // Get all tasks
        const allTasks = await db.getTasks();

        // Get completed tasks for user
        const completedTasks = await db.getUserCompletedTasks(user.id);
        const completedTaskIds = completedTasks.map(t => t.id);

        // Filter available tasks
        const availableTasks = allTasks.filter(task => !completedTaskIds.includes(task.id));

        if (availableTasks.length === 0) {
            await bot.editMessageText('‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ãÔøΩÔøΩ –∑–∞–¥–∞–Ω–∏–π.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Show first available task with channel link
        const task = availableTasks[0];
        const channelLink = task.channel_id.startsWith('@') ?
            `https://t.me/${task.channel_id.substring(1)}` :
            task.channel_id;

        const message = `üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞ÔøΩÔøΩ–∏—è**

üìã **–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:**
–ü–æ–¥–ø–∏—Å–∫ÔøΩÔøΩ –Ω–∞ –∫–∞–Ω–∞–ª **${task.channel_name || task.channel_id}**

üí∞ **–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:** ${task.reward} ‚≠ê
üìä **–ü—Ä–æÔøΩÔøΩ—Ä–µ—Å—Å:** ${completedTasks.length}/${allTasks.length} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—ÇÔøΩÔøΩÔøΩÔøΩ—è" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞–Ω–∞–ª—É
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—ÇÔøΩÔøΩ "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
4. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞ÔøΩÔøΩ—É!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getTaskKeyboard(task.id, channelLink)
        });

    } catch (error) {
        console.error('Error in tasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}


async function handleTaskCheck(chatId, messageId, userId, taskId) {
    try {
        const result = await db.executeQuery('SELECT * FROM tasks WHERE id = $1 AND is_active = TRUE', [taskId]);

        if (result.rows.length === 0) {
            await bot.editMessageText('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const task = result.rows[0];

        // Check if user is subscribed to the channel
        try {
            const member = await bot.getChatMember(task.channel_id, userId);
            
            if (member.status === 'left' || member.status === 'kicked') {
                await bot.editMessageText('ÔøΩÔøΩÔøΩ –í—ã –Ω–µ –ø–æ–¥–ø–∏ÔøΩÔøΩ–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                    chat_id: chatId,
                    message_id: messageId,
                    ...getTaskKeyboard(taskId)
                });
                return;
            }

            // Complete the task
            try {
                const completed = await db.completeTask(userId, taskId);

                if (completed) {
                    await bot.editMessageText(`‚úÖ **–ó–∞–¥–∞–Ω–∏–µ ÔøΩÔøΩ—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ **${task.reward} ‚≠ê**\n\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å!`, {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        ...getBackToMainKeyboard()
                    });
                } else {
                    await bot.editMessageText('‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ.', {
                        chat_id: chatId,
                        message_id: messageId,
                        ...getBackToMainKeyboard()
                    });
                }
            } catch (taskError) {
                if (taskError.message === 'Task completion limit reached') {
                    await bot.editMessageText('‚ùå **–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!**\n\n–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æÔøΩÔøΩ–Ω–µ–Ω–∏—è.\n\n–ø–æ–ø—Ä–æ–±—É–πÔøΩÔøΩ–µ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è!', {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        ...getBackToMainKeyboard()
                    });
                } else {
                    await bot.editMessageText('‚ùå –û—à–∏ÔøΩÔøΩ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                        chat_id: chatId,
                        message_id: messageId,
                        ...getBackToMainKeyboard()
                    });
                }
            }

        } catch (error) {
            console.error(`Error checking task subscription: ${error.message}`);

            // Only auto-approve for specific errors (chat not found, private chat)
            if (error.response?.body?.error_code === 400 || error.response?.body?.description?.includes('chat not found')) {
                console.log(`Auto-approving task ${taskId} for user ${userId} - chat not accessible`);

                try {
                    const completed = await db.completeTask(userId, taskId);

                    if (completed) {
                        await bot.editMessageText(`‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ **${task.reward} ‚≠ê**\n\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n‚ö†Ô∏è *–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏*`, {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            ...getBackToMainKeyboard()
                        });
                    } else {
                        await bot.editMessageText('‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ.', {
                            chat_id: chatId,
                            message_id: messageId,
                            ...getBackToMainKeyboard()
                        });
                    }
                } catch (taskError) {
                    if (taskError.message === 'Task completion limit reached') {
                        await bot.editMessageText(' **–õ–∏–º–∏ÔøΩÔøΩ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!**\n\n–≠—Ç–æ –∑–∞–¥–∞ÔøΩÔøΩ–∏–µ –±–æÔøΩÔøΩ—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.', {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            ...getBackToMainKeyboard()
                        });
                    } else {
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥ÔøΩÔøΩ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                            chat_id: chatId,
                            message_id: messageId,
                            ...getBackToMainKeyboard()
                        });
                    }
                }
            } else {
                await bot.editMessageText('‚ùå –û—àÔøΩÔøΩ–±ÔøΩÔøΩ–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.', {
                    chat_id: chatId,
                    message_id: messageId,
                    ...getBackToMainKeyboard()
                });
            }
        }

    } catch (error) {
        console.error('Error in task check:', error);
    }
}

async function handleTaskSkip(chatId, messageId, userId) {
    try {
        const user = await db.getUser(userId);

        // Get all tasks
        const allTasks = await db.getTasks();

        // Get completed tasks for user
        const completedTasks = await db.getUserCompletedTasks(userId);
        const completedTaskIds = completedTasks.map(t => t.id);

        // Filter available tasks
        const availableTasks = allTasks.filter(task => !completedTaskIds.includes(task.id));

        if (availableTasks.length <= 1) {
            // No more tasks available
            await bot.editMessageText('‚úÖ –ë–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥ÔøΩÔøΩ–Ω–∏–π –Ω–µ—Ç!\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Show next available task (skip first one)
        const nextTask = availableTasks[1];
        const channelLink = nextTask.channel_id.startsWith('@') ?
            `https://t.me/${nextTask.channel_id.substring(1)}` :
            nextTask.channel_id;

        const message = `üìã **–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ**

üéØ **–ó–∞–¥–∞–Ω–∏ÔøΩÔøΩ:**
–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª **${nextTask.channel_name || nextTask.channel_id}**

üí∞ **–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:** ${nextTask.reward} ‚≠ê
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${completedTasks.length}/${allTasks.length + completedTasks.length} –∑–∞–¥–∞–ΩÔøΩÔøΩ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞–Ω–∞–ª—É
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
3. –íÔøΩÔøΩ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
4. –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getTaskKeyboard(nextTask.id, channelLink)
        });

    } catch (error) {
        console.error('Error in task skip:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleInstruction(chatId, messageId) {
    const message = `üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É**

üéØ **–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã:**

1ÔøΩÔøΩ‚É£ **–ö–ª–∏–∫–µ—Ä** - –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫ÔøΩÔøΩ–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 0.1 ‚≠ê
2Ô∏è‚É£ **–ó–∞–¥–∞–Ω–∏—è** - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—ÅÔøΩÔøΩ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
3Ô∏è‚É£ **–†–µ—Ñ–µ—Ä–∞–ª—ã** - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ ÔøΩÔøΩ—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 3 ‚≠ê –∑–∞ ÔøΩÔøΩ–∞–∂–¥–æ–≥–æ
4Ô∏è‚É£ **–ö–µ–π—Å—ã** - –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏ (–Ω—É–∂–Ω–æ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –¥–µ–Ω—å)
5Ô∏è‚É£ **ÔøΩÔøΩ–æ—Ç–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö

üí∞ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—ÅÔøΩÔøΩ–≤:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã —Å—É–º–º—ã: 15, 25, 50, 100 ‚≠ê
‚Ä¢ Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –∑–∞ 1300 ‚≠ê

üìà **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –∑–∞ÔøΩÔøΩ–∞–Ω–∏—è

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –†–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞—Å—á–∏ÔøΩÔøΩ—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackToMainKeyboard()
    });
}

async function handleRatings(chatId, messageId) {
    const message = `üèÜ **–†–µ–π—Ç–∏–Ω–≥–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getRatingsKeyboard()
    });
}

async function handleRatingsAll(chatId, messageId) {
    try {
        const result = await db.executeQuery(`
            SELECT first_name, referrals_count
            FROM users
            WHERE referrals_count > 0
            ORDER BY referrals_count DESC
            LIMIT 10
        `);

        let message = 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n\n';

        if (result.rows.length === 0) {
            message += 'üìä –ü–æ–∫ÔøΩÔøΩ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—ÇÔøΩÔøΩ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.\n\n –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ!';
        } else {
            result.rows.forEach((user, index) => {
                const medal = index === 0 ? 'ÔøΩÔøΩÔøΩ' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const safeName = cleanDisplayText(user.first_name);
                message += `${medal} ${safeName} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
            });
            message += '\nÔøΩÔøΩ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!';
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: undefined, // –£–±–∏—Ä–∞–µ–º Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—ÇÔøΩÔøΩ
            ...getBackToMainKeyboard()
        });
    } catch (error) {
        console.error('Error in ratings all:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—ÇÔøΩÔøΩ–Ω–≥–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleRatingsWeek(chatId, messageId) {
    try {
        // –ü–æ–ª—É—á–∞ÔøΩÔøΩ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const result = await db.executeQuery(`
            SELECT first_name, referrals_count
            FROM users
            WHERE registered_at > NOW() - INTERVAL '7 days' OR updated_at > NOW() - INTERVAL '7 days'
            ORDER BY referrals_count DESC
            LIMIT 10
        `);

        let message = 'üìÖ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n\n';

        if (result.rows.length === 0) {
            message += '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.';
        } else {
            result.rows.forEach((user, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const safeName = cleanDisplayText(user.first_name);
                message += `${medal} ${safeName} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: undefined, // –£–±–∏—Ä–∞–µ–º Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ...getBackToMainKeyboard()
        });
    } catch (error) {
        console.error('Error in ratings week:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞ÔøΩÔøΩ—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleRatingsWeekPoints(chatId, messageId) {
    try {
        // Get weekly top users by points
        const users = await db.getWeeklyTopUsers(10);

        let message = '‚≠ê **–ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—á–∫–∞–º**\n\n';

        if (users.length === 0) {
            message += '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ ÔøΩÔøΩ—Ç—É –Ω–µ–¥–µÔøΩÔøΩ—é.';
        } else {
            message += 'üèÜ **–¢–æ–ø-10 –ø–æ –æ—á–∫–∞–º ÔøΩÔøΩ–∞ –Ω–µ–¥–µ–ª—é:**\n\n';

            users.forEach((user, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const safeName = cleanDisplayText(user.first_name);
                message += `${medal} ${safeName} - ${user.weekly_points} –æ—á–∫–æ–≤\n`;
            });

            message += '\nüìà **–ö–∞–∫ –∑–∞—ÄÔøΩÔøΩ–±–æ—Ç–∞—Ç—å –æ—á–∫–∏:**\n';
            message += '‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ - 1 –æ—á–∫–æ\n';
            message += '‚Ä¢ –ö–∞–∂–¥—ã–π –∫–ª–∏–∫ - 1 –æ—á–∫–æ\n';
            message += '‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ - 2 ÔøΩÔøΩ—á–∫–∞\n';
            message += '‚Ä¢ –ö—É–ø–ª–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –ª–æ—Ç–µ—Ä–µ–∏ - 1 –æ—á–∫–æ\n';
            message += 'ÔøΩÔøΩ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª - 1 –æ—á–∫–æ\n';
            message += '\nüéÅ **ÔøΩÔøΩ–æ–ø-5 –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–æ–ª—É—á–∞—Ç –Ω–∞–≥—Ä–∞–¥—ã!**';
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
    } catch (error) {
        console.error('Error in ratings week points:', error);
        await bot.editMessageText('‚ùå –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –æ—á–∫–∞–º.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleCases(chatId, messageId, user) {
    const now = new Date();
    const lastCaseOpen = user.last_case_open ? new Date(user.last_case_open) : null;
    const canOpen = !lastCaseOpen || now.toDateString() !== lastCaseOpen.toDateString();
    const hasEnoughReferrals = user.referrals_today >= 3;

    if (!hasEnoughReferrals) {
        const message = `üéÅ **–ö–µ–π—ÅÔøΩÔøΩ**

‚ùå **–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ 3+ —Ä–µ—Ñ–µÔøΩÔøΩ–∞–ª–æ–≤ –≤ –¥–µ–Ω—å**

**–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å–µ–≥–æ–¥–Ω—è:** ${user.referrals_today}/3

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–πÔøΩÔøΩ–µ—Å—å!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
        return;
    }

    if (!canOpen) {
        const message = `üéÅ **–ö–µ–π—Å—ã**

‚è∞ **–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!**

–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
        return;
    }

    // Open case
    const reward = Math.floor(Math.random() * 10) + 1; // 1-10 stars
    await db.updateUserBalance(user.id, reward);
    await db.updateUserField(user.id, 'last_case_open', now);

    const message = `üéÅ **–ö–µ–π—Å—ã**

üéâ **ÔøΩÔøΩ–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –æ—Ç–∫—Ä—ãÔøΩÔøΩ–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ **${reward} ‚≠ê**

üí∞ **–í–∞—à ÔøΩÔøΩ–∞–ª–∞–Ω—Å:** ${user.balance + reward} ‚≠ê

‚è∞ –í–æ–∑–≤—Ä–∞—à–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º!`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        }
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...keyboard
    });
}

async function handleLottery(chatId, messageId, userId = null) {
    try {
        // Get standard lotteries
        const standardResult = await db.executeQuery('SELECT * FROM lotteries WHERE is_active = TRUE AND (lottery_type = $1 OR lottery_type IS NULL) ORDER BY id', ['standard']);

        // Get referral lotteries
        const referralLotteries = await db.getReferralLotteries();

        if (standardResult.rows.length === 0 && referralLotteries.length === 0) {
            await bot.editMessageText('üé∞ **–õ–æ—Ç–µ—Ä–µ–∏**\n\n‚ùå –ê–∫—Ç–∏–≤–Ω—ãÔøΩÔøΩ –ª–æ—Ç–µ—Ä–µ–π –ø–æ–∫–∞ ÔøΩÔøΩ–µ—Ç.\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!', {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Get user's tickets if userId provided
        let userTickets = [];
        if (userId) {
            const ticketsResult = await db.executeQuery(
                'SELECT lottery_id FROM lottery_tickets WHERE user_id = $1',
                [userId]
            );
            userTickets = ticketsResult.rows.map(row => row.lottery_id);
        }

        let message = 'üé∞ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏**\n\n';
        const keyboards = [];

        // Standard lotteries
        standardResult.rows.forEach((lottery) => {
            const hasPurchased = userTickets.includes(lottery.id);

            message += `üé´ **${lottery.name}** (–æ–±—ã—á–Ω–∞—è)\n`;
            message += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} ‚≠ê\n`;
            message += `üéØ –ë–∏–ª–µ—Ç–æ–≤: ${lottery.current_tickets}/${lottery.max_tickets}\n`;
            message += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${lottery.winners_count}\n`;

            if (hasPurchased) {
                message += `‚úÖ **–í–∞—à –±–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!**\n\n`;
            } else {
                message += `\n`;
                if (lottery.current_tickets >= lottery.max_tickets) {
                    keyboards.push([{ text: `üö´ ${lottery.name} - –ü–†–û–î–ê–ù–û`, callback_data: 'lottery_sold_out' }]);
                } else {
                    keyboards.push([{ text: `üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç - ${lottery.name}`, callback_data: `lottery_buy_${lottery.id}` }]);
                }
            }
        });

        // Referral lotteries
        for (const refLottery of referralLotteries) {
            const timeLeft = new Date(refLottery.ref_ends_at) - new Date();
            const hoursLeft = Math.max(0, Math.floor(timeLeft / (1000 * 60 * 60)));

            if (timeLeft <= 0) continue; // Skip expired lotteries

            // Get user participation info
            let participant = null;
            if (userId) {
                const participantResult = await db.executeQuery(
                    'SELECT * FROM lottery_participants WHERE lottery_id = $1 AND user_id = $2',
                    [refLottery.id, userId]
                );
                participant = participantResult.rows[0];
            }

            const totalTickets = participant ? participant.total_tickets : 0;

            if (refLottery.lottery_type === 'referral_condition') {
                message += `üë• **${refLottery.name}** (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è)\n`;
                message += `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤\n`;
                message += `üìã –£—Å–ª–æ–≤–∏–µ: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å ${refLottery.required_referrals} ÔøΩÔøΩ–µ—Ñ–µ—ÄÔøΩÔøΩ–ª–æ–≤\n`;
                message += `üí∞ –î–æ–ø. –±–∏–ª–µ—Ç: ${refLottery.additional_ticket_price} üé´\n`;
                message += `üé´ –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: ${totalTickets}\n`;

                if (participant && participant.qualified) {
                    message += `‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã–øÔøΩÔøΩ–ª–Ω–µ–Ω–æ!\n\n`;
                    keyboards.push([{ text: `üé´ –ö—É–ø–∏—Ç—å –¥–æ–ø. –±–∏–ª–µ—Ç - ${refLottery.name}`, callback_data: `ref_lottery_buy_${refLottery.id}` }]);
                } else {
                    message += `‚ùå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${refLottery.required_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è\n\n`;
                    keyboards.push([{ text: `üë• –ü—Ä–æÔøΩÔøΩ–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ - ${refLottery.name}`, callback_data: `ref_lottery_check_${refLottery.id}` }]);
                }

            } else if (refLottery.lottery_type === 'referral_auto') {
                message += `üë• **${refLottery.name}** (–∞–≤—Ç–æ-—Ä–µÔøΩÔøΩ–µ—Ä–∞–ª—å–Ω–∞—è)\n`;
                message += `ÔøΩÔøΩÔøΩ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤\n`;
                message += `üé´ –ë–∏–ª–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalTickets}\n`;
                message += `üìã –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∏–ª–µ—Ç\n\n`;

                keyboards.push([{ text: `üë• ÔøΩÔøΩ—Ä–∏–≥–ª–∞—ÅÔøΩÔøΩ—Ç—å –¥—Ä—É–∑–µ–π - ${refLottery.name}`, callback_data: 'invite' }]);
            }
        }

        keyboards.push([{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboards }
        });

    } catch (error) {
        console.error('Error in lottery:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleLotteryBuy(chatId, messageId, userId, lotteryId) {
    try {
        const user = await db.getUser(userId);
        
        // Get lottery details
        const lotteryResult = await db.executeQuery('SELECT * FROM lotteries WHERE id = $1 AND is_active = TRUE', [lotteryId]);
        
        if (lotteryResult.rows.length === 0) {
            await bot.editMessageText('‚ùå –õ–æÔøΩÔøΩÔøΩÔøΩ–µ—Ä–µ—è –Ω–µ –Ω–∞–πÔøΩÔøΩ–µ–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const lottery = lotteryResult.rows[0];

        // Check if user already has a ticket
        const ticketCheck = await db.executeQuery(
            'SELECT 1 FROM lottery_tickets WHERE lottery_id = $1 AND user_id = $2',
            [lotteryId, userId]
        );

        if (ticketCheck.rows.length > 0) {
            await bot.editMessageText('‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –≤ —ç—Ç—É –ª–æ—Ç–µ—Ä–µ—é!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check balance
        if (user.balance < lottery.ticket_price) {
            await bot.editMessageText('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—ÇÔøΩÔøΩ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check if lottery is full
        if (lottery.current_tickets >= lottery.max_tickets) {
            await bot.editMessageText('‚ùå –í—Å–µ –±–∏–ª–µ—Ç—ã –≤ –ª–æ—Ç–µ—Ä–µ—é –ø—Ä–æÔøΩÔøΩ–∞–ΩÔøΩÔøΩ!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Buy ticket
        await db.executeQuery('BEGIN');
        
        try {
            // Add ticket
            await db.executeQuery(
                'INSERT INTO lottery_tickets (lottery_id, user_id) VALUES ($1, $2)',
                [lotteryId, userId]
            );

            // Update lottery count
            const updatedLottery = await db.executeQuery(
                'UPDATE lotteries SET current_tickets = current_tickets + 1 WHERE id = $1 RETURNING current_tickets, max_tickets',
                [lotteryId]
            );

            // Deduct from balance
            await db.updateUserBalance(userId, -lottery.ticket_price);

            // Add weekly points for lottery ticket purchase
            try {
                await db.addWeeklyPoints(userId, 1, 'lottery_ticket_purchase');
            } catch (pointsError) {
                console.error('Error adding weekly points for lottery purchase:', pointsError);
            }

            await db.executeQuery('COMMIT');

            // Check if lottery is now full and distribute rewards
            const newTicketCount = updatedLottery.rows[0].current_tickets;
            const maxTickets = updatedLottery.rows[0].max_tickets;

            if (newTicketCount >= maxTickets) {
                console.log(`[LOTTERY] Lottery ${lotteryId} is full, distributing rewards...`);
                await distributeLotteryRewards(lotteryId, lottery);
            }

            await bot.editMessageText(`‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∑–∞ ${lottery.ticket_price} ‚≠ê!`, {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });

        } catch (error) {
            await db.executeQuery('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('Error in lottery buy:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handlePromocodeInput(chatId, messageId, userId) {
    // Set temp action for user
    await db.updateUserField(userId, 'temp_action', 'awaiting_promocode');
    
    await bot.editMessageText('üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackToMainKeyboard()
    });
}

// Withdrawal approval handler
async function handleWithdrawalApproval(chatId, messageId, callbackData) {
    try {
        console.log('[WITHDRAWAL] Processing approval:', callbackData);
        const parts = callbackData.split('_');
        const targetUserId = parseInt(parts[2]);
        const amount = parseFloat(parts[3]);
        const type = parts[4];
        const withdrawalId = parts[5] ? parseInt(parts[5]) : null; // Support both old and new format

        console.log('[WITHDRAWAL] Parsed data:', { targetUserId, amount, type, withdrawalId });

        // Get user info
        const user = await db.getUser(targetUserId);
        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        console.log('[WITHDRAWAL] User found:', user.first_name);

        // Approve withdrawal in database - use specific withdrawal ID if available
        let approvedWithdrawalId;
        if (withdrawalId) {
            // Use specific withdrawal ID for newer format
            approvedWithdrawalId = await db.approveWithdrawalRequestById(withdrawalId, ADMIN_ID);
        } else {
            // Fallback to old method for backward compatibility
            approvedWithdrawalId = await db.approveWithdrawalRequest(targetUserId, amount, type, ADMIN_ID);
        }

        if (!approvedWithdrawalId) {
            await bot.editMessageText('‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        console.log('[WITHDRAWAL] Withdrawal approved in database, ID:', approvedWithdrawalId);

        // Send payment notification to payments channel
        await sendPaymentNotification(approvedWithdrawalId, user, amount, type);

        // Send congratulations to user
        const typeDisplay = type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : `${amount} ‚≠ê`;
        const congratsMessage = `üéâ **–ü–æÔøΩÔøΩ–¥—Ä–∞–≤–ª—è–µ–º!**

‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±–º–µ–Ω–∞!**

üí∞ **–°—É–º–º–∞:** ${typeDisplay}

üéØ **–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–∞!** –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—ÇÔøΩÔøΩ!

üë• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤ÔøΩÔøΩ—Ç—å –µ—â–µ –±–æ–ª—å—à–µ!`;

        await sendThrottledMessage(targetUserId, congratsMessage, { parse_mode: 'Markdown' });
        console.log('[WITHDRAWAL] Congratulations sent to user');

        // Update admin message
        const completedCount = await db.getCompletedWithdrawalsCount();
        await bot.editMessageText(`‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞** (#${completedCount})

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${cleanDisplayText(user.first_name)}
üí∞ –°—É–º–º–∞: ${typeDisplay}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –ø–ª–∞—Ç–µ–∂–µ–π.`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
        });

        console.log('[WITHDRAWAL] Admin message updated');

    } catch (error) {
        console.error('Error in withdrawal approval:', error);
        console.error('Full error:', error.stack);
        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: ${error.message}`, {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

// Withdrawal rejection handler
async function handleWithdrawalRejection(chatId, messageId, callbackData, adminId) {
    try {
        const parts = callbackData.split('_');
        const targetUserId = parseInt(parts[2]);
        const amount = parseInt(parts[3]);
        const type = parts[4];
        const withdrawalId = parts[5] ? parseInt(parts[5]) : null; // Support both old and new format

        // Get user info
        const user = await db.getUser(targetUserId);
        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        // Set admin state to await rejection reason - include withdrawal ID if available
        const rejectionAction = withdrawalId ?
            `rejecting_withdrawal_${targetUserId}_${amount}_${type}_${withdrawalId}` :
            `rejecting_withdrawal_${targetUserId}_${amount}_${type}`;
        await db.updateUserField(adminId, 'temp_action', rejectionAction);

        // Update message to ask for reason
        const rejectionTitle = withdrawalId ? `‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${withdrawalId}**` : `‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏**`;
        await bot.editMessageText(`${rejectionTitle}

ÔøΩÔøΩÔøΩÔøΩ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}
üí∞ –°—É–º–º–∞: ${amount} ‚≠ê
üì¶ –¢–∏–ø: ${type === 'premium' ? 'Telegram Premium' : '–ó–≤—ë–∑–¥—ã'}

‚úèÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
        });

    } catch (error) {
        console.error('Error in withdrawal rejection:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

// Handle text messages (for promocodes and rejection reasons)
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/') && !msg.from.is_bot) {
        const userId = msg.from.id;
        const chatId = msg.chat.id;

        try {
            console.log(`[MESSAGE] Received text message from user ${userId}: "${msg.text}"`);

            // Check if this message should be handled by broadcast handler
            let user = await db.getUser(userId);
            if (user && user.temp_action === 'waiting_broadcast_message' && isAdmin(userId)) {
                return; // Let the second handler process this
            }

            // Check if user has active captcha session
            if (captchaSystem.hasActiveSession(userId)) {
                console.log(`[MESSAGE] User ${userId} has active captcha session, processing answer: "${msg.text}"`);
                const result = captchaSystem.verifyAnswer(userId, msg.text);
                console.log(`[MESSAGE] Captcha verification result:`, result);

                if (result.success) {
                    // Captcha passed - update database and send success message
                    await db.setCaptchaPassed(userId, true);

                    // Check for retroactive referral activation after captcha
                    try {
                        const retroResult = await db.activateRetroactiveReferral(userId);
                        if (retroResult.success) {
                            // Send notification to referrer about retroactive activation
                            try {
                                const userInfo = await db.getUser(userId);
                                const message = `üîÑ **–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥!**

üë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª **${userInfo.first_name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è:
‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É
‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã

üí∞ **–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:** +3 ‚≠ê
üíé **–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!**

üéØ –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é!`;

                                await bot.sendMessage(retroResult.referrerId, message, {
                                    parse_mode: 'Markdown',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{ text: 'üë• –ü—ÄÔøΩÔøΩ–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                                        ]
                                    }
                                });
                            } catch (error) {
                                console.error('Error sending retroactive activation notification:', error);
                            }
                        }
                    } catch (error) {
                        console.error('Error checking retroactive activation after captcha:', error);
                    }

                    await bot.sendMessage(chatId, `${result.message}

üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.`, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'restart_after_captcha' }]
                            ]
                        }
                    });
                } else {
                    // Wrong answer or no attempts left
                    if (result.shouldRestart) {
                        // Generate new captcha
                        const newQuestion = captchaSystem.generateCaptcha(userId);
                        await bot.sendMessage(chatId, `${result.message}

ü§ñ **–ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä:**
**${newQuestion}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üîÑ –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'new_captcha' }]
                                ]
                            }
                        });
                    } else {
                        // Still has attempts
                        const currentQuestion = captchaSystem.getCurrentQuestion(userId);
                        await bot.sendMessage(chatId, `${result.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
**${currentQuestion}**

üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26)`, {
                            parse_mode: 'Markdown'
                        });
                    }
                }
                return; // Don't process other message handlers
            }

            // User already declared above as let, so we can just reassign
            user = await db.getUser(userId);

            if (user && user.temp_action) {
                if (user.temp_action === 'awaiting_promocode') {
                    const promocode = msg.text.trim().toUpperCase();

                    // Clear temp action
                    await db.updateUserField(userId, 'temp_action', null);

                    // Check promocode
                    const promoResult = await db.getPromocode(promocode);

                    if (!promoResult) {
                        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                        return;
                    }

                    // Use promocode
                    const success = await db.usePromocode(userId, promoResult.id);

                    if (success) {
                        bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promoResult.reward} ‚≠ê`);
                    } else {
                        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–µÔøΩÔøΩ—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!');
                    }
                } else if (user.temp_action.startsWith('rejecting_withdrawal_')) {
                    console.log('[REJECTION] Processing rejection reason:', msg.text);
                    const rejectionReason = msg.text.trim();
                    const actionParts = user.temp_action.split('_');
                    const targetUserId = parseInt(actionParts[2]);
                    const amount = parseFloat(actionParts[3]);
                    const type = actionParts[4];
                    const withdrawalId = actionParts[5] ? parseInt(actionParts[5]) : null; // Support new format with ID

                    console.log('[REJECTION] Parsed data:', { targetUserId, amount, type, withdrawalId, rejectionReason });

                    // Clear temp action
                    await db.updateUserField(userId, 'temp_action', null);
                    console.log('[REJECTION] Temp action cleared');

                    // Reject withdrawal in database (this will also return money to user)
                    let rejectedWithdrawalId;
                    if (withdrawalId) {
                        // Use specific withdrawal ID for newer format
                        rejectedWithdrawalId = await db.rejectWithdrawalRequestById(withdrawalId, userId, rejectionReason);
                    } else {
                        // Fallback to old method for backward compatibility
                        rejectedWithdrawalId = await db.rejectWithdrawalRequest(targetUserId, amount, type, userId, rejectionReason);
                    }

                    if (!rejectedWithdrawalId) {
                        await bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ªÔøΩÔøΩ —É–∂–µ –æÔøΩÔøΩ—Ä–∞–±–æ—Ç–∞–Ω–∞.');
                        return;
                    }

                    console.log('[REJECTION] Withdrawal rejected in database, ID:', rejectedWithdrawalId);

                    // Get target user info
                    const targetUser = await db.getUser(targetUserId);
                    console.log('[REJECTION] Target user found:', targetUser.first_name);

                    // Send rejection notice to user
                    const typeDisplay = type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : `${amount} ‚≠ê`;
                    const rejectionTitle = rejectedWithdrawalId ? `‚ùå **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${rejectedWithdrawalId} –æ—ÇÔøΩÔøΩ–ª–æ–Ω–µ–Ω–∞**` : `‚ùå **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**`;
                    const rejectionMessage = `${rejectionTitle}

 **–°—É–º–º–∞:** ${typeDisplay}

üìù **–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**
${rejectionReason}

üí∏ **–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.**

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—ÇÔøΩÔøΩ –≤–æÔøΩÔøΩ—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`;

                    await sendThrottledMessage(targetUserId, rejectionMessage, { parse_mode: 'Markdown' });
                    console.log('[REJECTION] Rejection message sent to user');

                    // Confirm to admin
                    const adminTitle = rejectedWithdrawalId ? `‚úÖ **–ó–∞—è–≤–∫–∞ #${rejectedWithdrawalId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**` : `‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ªÔøΩÔøΩ–Ω–µ–Ω–∞**`;
                    await bot.sendMessage(chatId, `${adminTitle}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${cleanDisplayText(targetUser.first_name)}
üí∞ –°—ÉÔøΩÔøΩÔøΩÔøΩ–∞: ${typeDisplay}
üìù –ü—Ä–∏—á–∏–Ω–∞: ${rejectionReason}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
üí∏ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.`, { parse_mode: 'Markdown' });
                    console.log('[REJECTION] Confirmation sent to admin');
                }
            }
        } catch (error) {
            console.error('Error handling message:', error);
        }
    }
});

// Admin handlers
async function handleAdminStats(chatId, messageId) {
    try {
        const stats = await db.getUserStats();
        
        // Get weekly active users
        const weeklyResult = await db.executeQuery(`
            SELECT COUNT(*) as weekly_active 
            FROM users 
            WHERE updated_at > CURRENT_DATE - INTERVAL '7 days'
        `);
        
        const dailyResult = await db.executeQuery(`
            SELECT COUNT(*) as daily_active 
            FROM users 
            WHERE updated_at > CURRENT_DATE
        `);

        const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µÔøΩÔøΩ:** ${stats.total_users}
üìÖ **–ê–∫—Ç–∏–≤–Ω—ã–µ ÔøΩÔøΩ–∞ –Ω–µ–¥–µÔøΩÔøΩ—é:** ${weeklyResult.rows[0]?.weekly_active || 0}
üìÖ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –¥–µ–Ω—å:** ${dailyResult.rows[0]?.daily_active || 0}
üí∞ **–û–±—â–∏ÔøΩÔøΩ –±–∞–ª–∞–Ω—Å:** ${stats.total_balance} ‚≠ê
üë• **–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${stats.total_referrals}`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error in admin stats:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

async function handleAdminMenu(chatId, messageId) {
    try {
        const stats = await db.getUserStats();

        const message = `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—ÄÔøΩÔøΩ—è —Å—Ç–∞ÔøΩÔøΩ–∏—Å—Ç–∏–∫–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æÔøΩÔøΩ–∞–Ω–¥—ã:**
üé∞ **/endlottery [ID]** - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é –≤—Ä—É—á–Ω—É—é
üë• **/refupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚≠ê **/starsupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–í—ã–±ÔøΩÔøΩ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getAdminMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in admin menu:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

// Tracking links system
bot.onText(/\/create_tracking_link (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const linkName = match[1].trim();

        if (!linkName) {
            bot.sendMessage(chatId, '‚ùå —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_tracking_link –ù–∞–∑–≤–∞–Ω–∏–µ_—Ä–µ–∫–ª–∞ÔøΩÔøΩ—ã');
            return;
        }

        // Generate unique tracking ID
        const trackingId = 'track_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

        // Get bot username
        let botUsername = 'starsbotexample';
        try {
            const botInfo = await bot.getMe();
            botUsername = botInfo.username;
        } catch (error) {
            console.error('Error getting bot info:', error);
        }

        // Create tracking link
        const trackingLink = `https://t.me/${botUsername}?start=${trackingId}`;

        // Save to database
        await db.executeQuery(
            'INSERT INTO tracking_links (tracking_id, name, created_by, created_at) VALUES ($1, $2, $3, NOW())',
            [trackingId, linkName, userId]
        );

        const message = `‚úÖ **–¢—Ä–µ–∫–∏–ΩÔøΩÔøΩ–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${linkName}
üîó **–°—Å—ã–ª–∫–∞:** \`${trackingLink}\`
üÜî **ID:** \`${trackingId}\`

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** /tracking_stats ${trackingId}
üìã **–í—Å–µ —Å—Å—ã–ª–∫–∏:** /list_tracking`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log(`[TRACKING] Created tracking link: ${trackingId} for ${linkName}`);

    } catch (error) {
        console.error('Error creating tracking link:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: ${error.message}`);
    }
});

// List tracking links
bot.onText(/\/list_tracking/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const result = await db.executeQuery(
            'SELECT tracking_id, name, clicks_count, created_at FROM tracking_links ORDER BY created_at DESC'
        );

        if (result.rows.length === 0) {
            bot.sendMessage(chatId, 'üìã **–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.**\n\n –°–æ–∑–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É: /create_tracking_link –Ω–∞–∑–≤–∞–Ω–∏–µ', { parse_mode: 'Markdown' });
            return;
        }

        let message = 'üìã **–°–ø–∏—Å–æÔøΩÔøΩ —Ç—ÄÔøΩÔøΩ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫**\n\n';

        result.rows.forEach((link, index) => {
            const date = new Date(link.created_at).toLocaleDateString('ru-RU');
            message += `${index + 1}. **${link.name}**\n`;
            message += `   üîó ID: \`${link.tracking_id}\`\n`;
            message += `     –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: ${link.clicks_count || 0}\n`;
            message += `   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${date}\n\n`;
        });

        message += 'üí° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏:** /tracking_stats ID';

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error listing tracking links:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫ÔøΩÔøΩ –∑–∞–≥—Ä—É–∑–∫–∏ ÔøΩÔøΩ–ø–∏—Å–∫–∞: ${error.message}`);
    }
});

// Tracking stats
bot.onText(/\/tracking_stats (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const trackingId = match[1].trim();

        // Get tracking link info
        const linkResult = await db.executeQuery(
            'SELECT * FROM tracking_links WHERE tracking_id = $1',
            [trackingId]
        );

        if (linkResult.rows.length === 0) {
            bot.sendMessage(chatId, '‚ùå —Ç—Ä–µ–Ω–∏ÔøΩÔøΩÔøΩ–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        const link = linkResult.rows[0];

        // Get detailed stats
        const statsResult = await db.executeQuery(
            'SELECT COUNT(*) as total_clicks, COUNT(DISTINCT user_id) as unique_users FROM tracking_clicks WHERE tracking_id = $1',
            [trackingId]
        );

        const recentResult = await db.executeQuery(
            'SELECT COUNT(*) as recent_clicks FROM tracking_clicks WHERE tracking_id = $1 AND clicked_at > NOW() - INTERVAL \'24 hours\'',
            [trackingId]
        );

        const stats = statsResult.rows[0];
        const recentStats = recentResult.rows[0];

        const createdDate = new Date(link.created_at).toLocaleDateString('ru-RU');

        const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —Å—Å—ã–ª–∫–∏**\n\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${link.name}\nüÜî **ID:** \`${trackingId}\`\nüìÖ **–°–æ–∑–¥–∞–Ω–∞:** ${createdDate}\n\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\nüë• –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æÔøΩÔøΩ: **${stats.total_clicks || 0}**\n –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${stats.unique_users || 0}**\n‚è∞ –óÔøΩÔøΩ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: **${recentStats.recent_clicks || 0}**\n\nüîó **–°—Å—ã–ª–∫–∞:** \`https://t.me/YOUR_BOT?start=${trackingId}\``;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error getting tracking stats:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
});

// Admin delete commands
bot.onText(/\/delete_task (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç ÔøΩÔøΩ—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const taskId = parseInt(match[1]);
        const result = await db.executeQuery('DELETE FROM tasks WHERE id = $1', [taskId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} —É–¥–∞–ª–µ–Ω–æ!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        }
    } catch (error) {
        console.error('Error deleting task:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏ÔøΩÔøΩ.');
    }
});

bot.onText(/\/delete_channel (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µÔøΩÔøΩ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const channelId = parseInt(match[1]);
        const result = await db.executeQuery('DELETE FROM required_channels WHERE id = $1', [channelId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª —Å ID ${channelId} —É–¥–∞–ª–µ–Ω!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –ö–∞–Ω–∞–ª —Å ID ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error deleting channel:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.');
    }
});

bot.onText(/\/delete_lottery (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const lotteryId = parseInt(match[1]);

        // Check if lottery has participants
        const ticketsResult = await db.executeQuery('SELECT COUNT(*) as count FROM lottery_tickets WHERE lottery_id = $1', [lotteryId]);
        const hasTickets = ticketsResult.rows[0].count > 0;

        if (hasTickets) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é —Å ID ${lotteryId} - –≤ –Ω–µ–π –µ—Å—ÇÔøΩÔøΩ —É—á–∞—Å—Ç–Ω–∏–∫–∏! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ—é ÔøΩÔøΩ–æ–º–∞–Ω–¥–æ–π /endlottery ${lotteryId}`);
            return;
        }

        const result = await db.executeQuery('DELETE FROM lotteries WHERE id = $1', [lotteryId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –õ–æ—Ç–µ—Ä–µ—è —Å ID ${lotteryId} —ÉÔøΩÔøΩ–∞–ª–µ–Ω–∞!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –õ–æ—Ç–µ—Ä–µ—è —Å ID ${lotteryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
    } catch (error) {
        console.error('Error deleting lottery:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏.');
    }
});

// Custom broadcast command
bot.onText(/\/custom_broadcast\s+([\s\S]+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const broadcastMessage = match[1].trim();

        if (!broadcastMessage) {
            bot.sendMessage(chatId, '‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /custom_broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return;
        }

        // Get all users
        const users = await db.executeQuery('SELECT id FROM users');
        const totalUsers = users.rows.length;
        let successCount = 0;
        let failCount = 0;

        // Send confirmation
        const confirmMsg = await bot.sendMessage(chatId, `üì§ **–ù–∞ÔøΩÔøΩ–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%`);

        // Send to all users
        for (let i = 0; i < users.rows.length; i++) {
            const user = users.rows[i];
            try {
                await bot.sendMessage(user.id, `\n\n${broadcastMessage}`, { parse_mode: 'Markdown' });
                successCount++;
            } catch (error) {
                failCount++;
                console.log(`Failed to send to user ${user.id}: ${error.message}`);
            }

            // Update progress every 10 users
            if (i % 10 === 0 || i === users.rows.length - 1) {
                const progress = Math.round((i + 1) / totalUsers * 100);
                try {
                    await bot.editMessageText(`üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\nÔøΩÔøΩÔøΩ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${failCount}\n‚è≥ –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`, {
                        chat_id: chatId,
                        message_id: confirmMsg.message_id,
                        parse_mode: 'Markdown'
                    });
                } catch (e) {
                    // Ignore edit errors
                }
            }

            // Small delay to avoid rate limits
            await new Promise(resolve => setTimeout(resolve, 50));
        }

        // Final report
        await bot.editMessageText(`ÔøΩÔøΩÔøΩ **–†–∞—Å—Å—ã–ª–∫–∞ ÔøΩÔøΩ–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µÔøΩÔøΩ: ${totalUsers}\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${failCount}\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(successCount/totalUsers*100)}%`, {
            chat_id: chatId,
            message_id: confirmMsg.message_id,
            parse_mode: 'Markdown'
        });

        console.log(`[BROADCAST] Custom broadcast completed: ${successCount}/${totalUsers} successful`);

    } catch (error) {
        console.error('Error in custom broadcast:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
    }
});

// Handle broadcast custom (inline interface)
async function handleBroadcastCustom(chatId, messageId, userId) {
    try {
        // Set user in broadcast mode
        await db.updateUserField(userId, 'temp_action', 'waiting_broadcast_message');

        const message = `‚úèÔ∏è **–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ä–∞—Å—Å—ã–ª–∫—É**

üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**

–ë–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–∑–æ—à–ª–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æÔøΩÔøΩ–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æÔøΩÔøΩ–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—ÅÔøΩÔøΩ–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è!

ÔøΩÔøΩÔøΩÔøΩ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ÔøΩÔøΩÔøΩ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_broadcast' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleBroadcastCustom:', error);
        throw error;
    }
}

bot.onText(/\/delete_promo (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const promoId = parseInt(match[1]);
        const result = await db.executeQuery('DELETE FROM promocodes WHERE id = $1', [promoId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å ID ${promoId} —É–¥–∞–ª–µ–Ω!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å ID ${promoId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error deleting promocode:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
});

// Daily reset cron job
cron.schedule('0 0 * * *', async () => {
    console.log('üîÑ Running daily reset...');
    try {
        await db.resetDailyData();
        console.log('‚úÖ Daily reset completed successfully');
    } catch (error) {
        console.error('‚ùå Critical error in daily reset:', error);
        // Send alert to admin if possible
        try {
            await bot.sendMessage(ADMIN_CHANNEL, ` **–û—à–∏–±ÔøΩÔøΩ–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö**\n\n–û—à–∏–±–∫–∞: ${error.message}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`, { parse_mode: 'Markdown' });
        } catch (alertError) {
            console.error('Failed to send alert to admin:', alertError);
        }
    }
}, {
    timezone: 'Europe/Moscow'
});

// Function to distribute weekly rewards
async function distributeWeeklyRewards(isManual = false) {
    console.log(`üèÜ ${isManual ? 'Manual' : 'Automatic'} weekly rewards distribution...`);
    try {
        // Get top 5 users by weekly points
        const users = await db.getWeeklyTopUsers(5);

        if (users.length === 0) {
            console.log('[WEEKLY-REWARDS] No users with points this week');
            if (isManual) {
                return { success: false, message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–∫–∞–º–∏ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é' };
            }
            return;
        }

        const rewards = [100, 75, 50, 25, 15]; // Stars for positions 1-5
        const positions = ['ü•á', 'ÔøΩÔøΩÔøΩ', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];

        let rewardMessage = 'üèÜ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!**\n\nüìÖ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n';

        for (let i = 0; i < users.length; i++) {
            const user = users[i];
            const reward = rewards[i];
            const position = positions[i];

            // Give reward to user
            await db.updateUserBalance(user.id, reward);

            // Add to message
            const safeName = cleanDisplayText(user.first_name);
            rewardMessage += `${position} **${safeName}** - ${user.weekly_points} –æ—á–∫–æ–≤ (+${reward} ‚≠ê)\n`;

            // Send personal congratulations
            try {
                const personalMessage = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n${position} **–í—ã –∑–∞–Ω—è–ª–∏ ${i + 1} –º–µ—Å—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –æ—á–∫–∞–º!**\n\n‚≠ê **–û—á–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:** ${user.weekly_points}\nüí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +${reward} ‚≠ê\n\nüéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—ÇÔøΩÔøΩ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`;

                await sendThrottledMessage(user.id, personalMessage, { parse_mode: 'Markdown' });
                console.log(`[WEEKLY-REWARDS] Reward sent to ${user.first_name}: ${reward} stars`);
            } catch (error) {
                console.error(`[WEEKLY-REWARDS] Failed to notify user ${user.id}:`, error);
            }
        }

        rewardMessage += '\nüéØ **–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—éÔøΩÔøΩ–µ–π –Ω–µ–¥–µ–ª–µ!**';

        // Send summary to admin channel
        try {
            await bot.sendMessage(ADMIN_CHANNEL, rewardMessage, { parse_mode: 'Markdown' });
            console.log('[WEEKLY-REWARDS] Summary sent to admin channel');
        } catch (error) {
            console.error('[WEEKLY-REWARDS] Failed to send summary to admin:', error);
        }

        // Reset weekly points for all users
        await db.resetWeeklyData();

        console.log('[WEEKLY-REWARDS] Weekly rewards completed successfully');

        if (isManual) {
            await db.recordManualRewardsTrigger();
            return { success: true, message: `–ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`, users: users.length };
        }

    } catch (error) {
        console.error('Error in weekly rewards:', error);
        if (isManual) {
            return { success: false, message: `–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥: ${error.message}` };
        }
    }
}

// Weekly rewards for top 5 users (Sundays at 20:00 MSK)
cron.schedule('0 20 * * 0', async () => {
    try {
        // Check if automatic rewards are enabled
        const settings = await db.getWeeklyRewardsSettings();
        if (!settings.auto_rewards_enabled) {
            console.log('[WEEKLY-REWARDS] Automatic rewards are disabled, skipping...');
            return;
        }

        await distributeWeeklyRewards(false);
        const result = await db.executeQuery(`
            SELECT id, first_name, referrals_today
            FROM users
            WHERE referrals_today > 0
            ORDER BY referrals_today DESC
            LIMIT 5
        `);

        if (result.rows.length === 0) {
            console.log('[WEEKLY-REWARDS] No users with referrals this week');
            return;
        }

        const rewards = [100, 75, 50, 25, 15]; // Stars for positions 1-5
        const positions = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];

        let rewardMessage = 'üèÜ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!**\n\nüìÖ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—ÄÔøΩÔøΩ–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n';

        for (let i = 0; i < result.rows.length; i++) {
            const user = result.rows[i];
            const reward = rewards[i];
            const position = positions[i];

            // Give reward to user
            await db.updateUserBalance(user.id, reward);

            // Add to message
            rewardMessage += `${position} **${user.first_name}** - ${user.referrals_today} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (+${reward} ‚≠ê)\n`;

            // Send personal congratulations
            try {
                const personalMessage = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n${position} **–í—ã –∑–∞–Ω—è–ª–∏ ${i + 1} –º–µ—Å—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!**\n\nüë• **–†–µ—Ñ–µ—Ä–∞–ªÔøΩÔøΩ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:** ${user.referrals_today}\nüí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +${reward} ‚≠ê\n\nüéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!`;

                await sendThrottledMessage(user.id, personalMessage, { parse_mode: 'Markdown' });
                console.log(`[WEEKLY-REWARDS] Reward sent to ${user.first_name}: ${reward} stars`);
            } catch (error) {
                console.error(`[WEEKLY-REWARDS] Failed to notify user ${user.id}:`, error);
            }
        }

        rewardMessage += '\nÔøΩÔøΩ **–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!**';

        // Send summary to admin channel
        try {
            await bot.sendMessage(ADMIN_CHANNEL, rewardMessage, { parse_mode: 'Markdown' });
            console.log('[WEEKLY-REWARDS] Summary sent to admin channel');
        } catch (error) {
            console.error('[WEEKLY-REWARDS] Failed to send summary to admin:', error);
        }

        console.log('[WEEKLY-REWARDS] Weekly rewards completed successfully');

    } catch (error) {
        console.error('Error in scheduled weekly rewards:', error);
    }
}, {
    timezone: 'Europe/Moscow'
});

// Admin function for weekly rewards management
async function handleAdminWeeklyRewards(chatId, messageId) {
    try {
        const settings = await db.getWeeklyRewardsSettings();
        const status = settings.auto_rewards_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : ' –û—Ç–∫–ª—é—á–µ–Ω—ã';
        const lastManual = settings.last_manual_trigger ?
            new Date(settings.last_manual_trigger).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞';

        const message = `üèÜ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏**

ÔøΩÔøΩÔøΩÔøΩ **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: ${status}
‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00 –ú–°–ö
üìÖ –ü–æ—Å–ªÔøΩÔøΩ–¥–Ω–∏–π —Ä—É—á–Ω–æ–π –∑–∞–øÔøΩÔøΩ—Å–∫: ${lastManual}

üí° **–°–∏—Ç—Ç–µ–º–∞ –æ—á–∫–æ–≤:**
‚Ä¢ –ê–∫—ÇÔøΩÔøΩ–≤–∞—Ü–∏—è –±–æÔøΩÔøΩÔøΩÔøΩ - 1 –æ—á–∫–æ
‚Ä¢ ÔøΩÔøΩ–∞–∂–¥—ã–π –∫–ª–∏–∫ - 1 –æ—á–∫–æ
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ - 2 –æ—á–∫–∞
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ - 1 –æ—á–∫–æ
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª - 1 –æ—á–∫–æ

üèÜ **–ù–∞–≥—Ä–∞–¥—ã —Ç–æ–ø-5:**
ü•á 1 –º–µ—Å—Ç–æ: 100 ‚≠ê
ü•à 2 –º–µ—Å—Ç–æ: 75 ‚≠ê
ü•â 3 –º–µ—Å—Ç–æ: 50 ‚≠ê
4 –º–µ—Å—Ç–æ: 25 ‚≠ê
5 –º–µ—Å—Ç–æ: 15 ‚≠ê`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: settings.auto_rewards_enabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ' : 'ÔøΩÔøΩ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ',
                            callback_data: settings.auto_rewards_enabled ? 'admin_weekly_disable' : 'admin_weekly_enable'
                        },
                        { text: 'üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: 'admin_weekly_trigger' }
                    ],
                    [
                        { text: '‚≠ê –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'ratings_week_points' }
                    ],
                    [
                        { text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }
                    ]
                ]
            }
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...keyboard
        });

    } catch (error) {
        console.error('Error in admin weekly rewards:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

// Admin commands for managing weekly rewards
bot.onText(/\/weekly_rewards_status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const settings = await db.getWeeklyRewardsSettings();
        const users = await db.getWeeklyTopUsers(5);

        let message = `üèÜ **–°—Ç–∞—Ç—É—Å –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥**\n\n`;
        message += `üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—ÅÔøΩÔøΩ–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:** ${settings.auto_rewards_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n`;
        message += `üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:** ${settings.last_manual_trigger ? new Date(settings.last_manual_trigger).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥ÔøΩÔøΩ–∞'}\n\n`;

        message += `üìä **–¢–µ–∫—É—â–∏–π —Ç–æ–ø-5 –ø–æ –æ—á–∫–∞–º:**\n`;
        if (users.length === 0) {
            message += '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n';
        } else {
            users.forEach((user, i) => {
                const pos = i + 1;
                const emoji = pos === 1 ? 'ü•á' : pos === 2 ? 'ü•à' : pos === 3 ? 'ü•â' : `${pos}.`;
                message += `${emoji} ${cleanDisplayText(user.first_name)} - ${user.weekly_points} –æ—á–∫–æ–≤\n`;
            });
        }

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('Error in weekly rewards status:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥.');
    }
});

bot.onText(/\/weekly_rewards_enable/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        await db.updateWeeklyRewardsSettings(true);
        bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤–∫–ª—é—á–µ–Ω—ã!');
    } catch (error) {
        console.error('Error enabling weekly rewards:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.');
    }
});

bot.onText(/\/weekly_rewards_disable/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        await db.updateWeeklyRewardsSettings(false);
        bot.sendMessage(chatId, '‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!');
    } catch (error) {
        console.error('Error disabling weekly rewards:', error);
        bot.sendMessage(chatId, 'ÔøΩÔøΩÔøΩ –û—à–∏–±–∫–∞ ÔøΩÔøΩ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.');
    }
});

bot.onText(/\/weekly_rewards_trigger/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, 'üèÜ –ó–∞–ø—É—Å–∫–∞—é —ÄÔøΩÔøΩ—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...');

        const result = await distributeWeeklyRewards(true);

        if (result.success) {
            bot.sendMessage(chatId, `ÔøΩÔøΩÔøΩ ${result.message}!\n\nüéØ –û—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞ÔøΩÔøΩ–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å.`);
        } else {
            bot.sendMessage(chatId, `‚ùå ${result.message}`);
        }
    } catch (error) {
        console.error('Error triggering weekly rewards:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.');
    }
});



bot.onText(/\/send_stars_manual (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const amount = parseInt(match[2]);

        bot.sendMessage(chatId, `ü§ñ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞: ${amount} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}...`);

        // –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ Stars Agent –æ—Ç–∫–ª—é—á–µÔøΩÔøΩ–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        const result = { success: false, error: 'Stars Agent –æ—Ç–∫ÔøΩÔøΩ—é—á–µ–Ω, —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞' };

        if (result.success) {
            bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞!\n\nüéØ ${amount} –∑–≤—ë–∑–¥ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ªÔøΩÔøΩ–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
        } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }

    } catch (error) {
        console.error('Error manual stars send:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—èÔøΩÔøΩ–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
bot.onText(/\/process_old_withdrawals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        // –ù–∞–π—Ç–∏ –≤—Å–µ pending –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
        const oldWithdrawals = await db.executeQuery(`
            SELECT id, user_id, amount, type, created_at
            FROM withdrawal_requests
            WHERE status = 'pending'
            ORDER BY created_at ASC
        `);

        if (oldWithdrawals.rows.length === 0) {
            bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        let message = `üìã **–ù–∞–π–¥–µ–Ω–æ ${oldWithdrawals.rows.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥**\n\n`;
        let processedCount = 0;
        let skippedCount = 0;

        for (const withdrawal of oldWithdrawals.rows) {
            try {
                // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –øÔøΩÔøΩ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const user = await db.getUser(withdrawal.user_id);
                if (!user) {
                    skippedCount++;
                    continue;
                }

                const cleanName = cleanDisplayText(user.first_name);

                // –ê–≤—Ç–æ–º–∞—ÇÔøΩÔøΩ—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–æ 200
                if (withdrawal.type === 'stars' && withdrawal.amount <= 200) {
                    // –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ Stars Agent –æ—Ç–∫–ª—é—á–µ–Ω–∞
                    const result = { success: false, error: 'Stars Agent –æ—Ç–∫–ª—é—á–µ–Ω, —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞' };

                    if (result.success) {
                        message += `‚úÖ ${cleanName} - ${withdrawal.amount}‚≠ê (–∞–≤—Ç–æ–º–∞—Ç)\n`;
                        processedCount++;
                    } else {
                        message += `‚ö†Ô∏è ${cleanName} - ${withdrawal.amount}‚≠ê (–æ—à–∏–±–∫–∞: ${result.error})\n`;
                        skippedCount++;
                    }
                } else {
                    message += `üî∂ ${cleanName} - ${withdrawal.amount}‚≠ê (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æÔøΩÔøΩ–∫–∏)\n`;
                    skippedCount++;
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
                if (processedCount > 0 && processedCount % 3 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }

            } catch (error) {
                console.error('Error processing old withdrawal:', error);
                skippedCount++;
            }
        }

        message += `\nüìä **–ò—Ç–æ–≥–æ:**\n`;
        message += `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞ÔøΩÔøΩ—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${processedCount}\n`;
        message += `üî∂ –¢—Ä–µ–±—É—é—Ç —ÄÔøΩÔøΩ—á–Ω–æ–π –æÔøΩÔøΩ—Ä–∞–±–æ—Ç–∫–∏: ${skippedCount}\n`;
        message += `\nüí° –ö—Ä—É–ø–Ω—ã–µ —Å—É–º–ºÔøΩÔøΩ –∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–ΩÔøΩÔøΩ—è—Ö.`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error processing old withdrawals:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
bot.onText(/\/agent_limits(?:\s+(\d+)\s+(\d+)\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–øÔøΩÔøΩ.');
        return;
    }

    try {
        if (!match[1] || !match[2] || !match[3]) {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
            const message = `‚öôÔ∏è **–¢–µ–∫ÔøΩÔøΩ—â–∏–µ –ª–∏–º–∏—Ç—ã Stars Agent:**

üî¢ **–ó–≤—ë–∑–¥ –≤ ÔøΩÔøΩ–∞—Å:** 10 –º–∞–∫—Å–∏–º—ÉÔøΩÔøΩ
üìÖ **–ó–≤—ë–∑–¥ –≤ ÔøΩÔøΩ–µ–Ω—å:** 80 –º–∞–∫—Å–∏–º—É–º
üéØ **–ó–∞ —Ä–∞ÔøΩÔøΩ (—Ç–µ—Å—Ç-—Ä–µ–∂–∏–º):** 25 –º–∞–∫—Å–∏–º—É–º

üí° **–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
\`/agent_limits –î–ï–ù–¨ –ß–ê–° –ó–ê–†–ê–ó–†ÔøΩÔøΩ–ó\`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ \`/agent_limits 150 20 50\` - 150/–¥–µ–Ω—å, 20/—á–∞—Å, 50 ÔøΩÔøΩ–∞ —Ä–∞–∑
‚Ä¢ \`/agent_limits 200 25 100\` - —Å–Ω—è—Ç—å —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º

‚ö†Ô∏è **–û–°–¢–û–†–û–ñ–ù–û:** –í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!

üîí **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã:**
‚Ä¢ –ù–∞—á–∏–Ω–∞—é—â–∏–µ: 80/–¥–µ–Ω—å, 10/—á–∞—Å, 25 –∑–∞ —Ä–∞–∑
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ: 150/–¥ÔøΩÔøΩ–Ω—å, 15/—á–∞—Å, 50 –∑–∞ —Ä–∞–∑
‚Ä¢ –ê–≥—Ä–µÔøΩÔøΩ—Å–∏–≤–Ω—ã–µ: 300/–¥–µ–Ω—å, 30/—á–∞—Å, 100 –∑–∞ —Ä–∞–∑`;

            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
            return;
        }

        const dayLimit = parseInt(match[1]);
        const hourLimit = parseInt(match[2]);
        const maxAmount = parseInt(match[3]);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤
        if (dayLimit < 10 || dayLimit > 100000) {
            bot.sendMessage(chatId, '‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 –∑–≤—ë–∑–¥.');
            return;
        }

        if (hourLimit < 5 || hourLimit > 10000) {
            bot.sendMessage(chatId, '‚ùå –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 –∑–≤—ë–∑–¥.');
            return;
        }

        if (maxAmount < 5 || maxAmount > 500) {
            bot.sendMessage(chatId, '‚ùå –ú–∞–∫—ÅÔøΩÔøΩ–º—É–º –∑–∞ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω –±ÔøΩÔøΩ—Ç—å –æ—Ç 5 –¥–æ 500 –∑–≤—ë–∑–¥.');
            return;
        }

        if (hourLimit > dayLimit) {
            bot.sendMessage(chatId, '‚ùå –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–Ω–µ–≤–Ω–æ–≥–æ.');
            return;
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –≤ –∞–≥–µ–Ω—Ç–µ
        const { execSync } = require('child_process');
        const updateScript = `
import sqlite3
import json

# –°–æ–∑–¥–∞—Ç—å —ÇÔøΩÔøΩ–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn = sqlite3.connect('userbot_queue.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS agent_settings (
        id INTEGER PRIMARY KEY,
        daily_limit INTEGER DEFAULT 80,
        hourly_limit INTEGER DEFAULT 10,
        max_amount INTEGER DEFAULT 25,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')

# –û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
cursor.execute('''
    INSERT OR REPLACE INTO agent_settings (id, daily_limit, hourly_limit, max_amount, updated_at)
    VALUES (1, ${dayLimit}, ${hourLimit}, ${maxAmount}, CURRENT_TIMESTAMP)
''')

conn.commit()
conn.close()
print('‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
`;

        try {
            execSync(`python3 -c "${updateScript}"`, { encoding: 'utf8' });

            const riskLevel = dayLimit > 200 ? 'üî¥ –í–´–°–û–ö–ò–ô' : dayLimit > 100 ? 'üü° –°–†–ï–î–ù–ò–ô' : 'üü¢ ÔøΩÔøΩ–ò–ó–ö–ò–ô';

            const message = `‚úÖ **–õ–∏–º–∏—Ç—ã –∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**

üìä **–ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:**
üìÖ **–í –¥–µ–Ω—å:** ${dayLimit} –∑–≤—ë–∑–¥
üî¢ **–í —á–∞—Å:** ${hourLimit} –∑–≤—ë–∑–¥
üéØ **–ó–∞ —Ä–∞–∑:** ${maxAmount} –∑–≤—ë–∑–¥

‚ö†Ô∏è **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫ÔøΩÔøΩ:** ${riskLevel}

${dayLimit > 25 ? 'üîì **–¢–µ—Å—Ç-—Ä–µ–∂–∏–º –æ—ÇÔøΩÔøΩ–ª—é—á—ë–Ω**' : 'üîí **–¢–µ—Å—Ç-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω**'}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –∞–≥–µ–Ω—Ç–∞: \`/agent_logs\`
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö FloodWait —Å–Ω–∏–∑—å—Ç–µ –ª–∏–º–∏—Ç—ã

ü§ñ **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç** –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:
\`/admin\` ‚Üí \` Stars Agent\` ‚Üí \`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\` ‚Üí \`‚ñ∂Ô∏è –ó–∞–ø—É—ÅÔøΩÔøΩ–∏—Ç—å\``;

            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('Error updating agent limits:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–ºÔøΩÔøΩ—Ç–æ–≤. –ü–æ–ø—ÄÔøΩÔøΩ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

    } catch (error) {
        console.error('Error in agent limits command:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ª–∏–º–∏—Ç–æ–≤.');
    }
});

// Handle subscription statistics display
async function handleSubscriptionStats(chatId, messageId) {
    try {
        const stats = await db.getChannelSubscriptionStats();

        if (stats.length === 0) {
            await bot.editMessageText(`üìà **–°—Ç–∞—Ç–∏—ÅÔøΩÔøΩ–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–øÔøΩÔøΩ—Å–∫–∞—Ö.\n\n–î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–≤—ã—Ö –ø—ÄÔøΩÔøΩ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫.`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏', callback_data: 'admin_channels' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                    ]
                }
            });
            return;
        }

        const uniqueUsersCount = await db.getUniqueSubscriptionUsersCount();

        let message = `üìà **–°—ÇÔøΩÔøΩ—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º**\n\n`;
        message += `üë• **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É:** ${uniqueUsersCount}\n`;
        message += `üîÑ *(–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)*\n\n`;

        let totalChecks = 0;

        for (const stat of stats) {
            const channelName = stat.channel_name || stat.channel_id;
            const addedDate = stat.channel_added_at ? new Date(stat.channel_added_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const lastCheck = stat.last_check_at ? new Date(stat.last_check_at).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞';
            const activeStatus = stat.is_active ? '‚úÖ' : '‚ùå';

            message += `${activeStatus} **${channelName}**\n`;
            message += `   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: **${stat.successful_checks}**\n`;
            message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${addedDate}\n`;
            message += `   ‚è∞ –ü–æ—Å–ª–µ–¥–ΩÔøΩÔøΩ—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${lastCheck}\n\n`;

            totalChecks += parseInt(stat.successful_checks);
        }

        message += `üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ªÔøΩÔøΩ–Ω—ãÔøΩÔøΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${uniqueUsersCount}**\n`;
        message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: **${stats.filter(s => s.is_active).length}**\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æÔøΩÔøΩ: **${stats.length}**\n\n`;

        message += `üí° **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µÔøΩÔøΩ:**\n–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ - –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å—á—ë—Ç—á–∏–∫.`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_unique_users' }],
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_subscription_stats' }],
                    [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫', callback_data: 'admin_subscription_history' }],
                    [{ text: 'üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏', callback_data: 'admin_channels' }],
                    [{ text: 'üîô –ù–∞–∑ÔøΩÔøΩ–¥', callback_data: 'admin_menu' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error displaying subscription stats:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—ÅÔøΩÔøΩ–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

// Handle unique subscription users display
async function handleUniqueUsers(chatId, messageId) {
    try {
        const uniqueUsers = await db.getLatestUniqueSubscriptionUsers(15);
        const totalCount = await db.getUniqueSubscriptionUsersCount();

        let message = `üë• **–ü–æ—ÅÔøΩÔøΩ–µ–¥–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** (${totalCount} –≤—Å–µ–≥–æ)\n\n`;

        if (uniqueUsers.length === 0) {
            message += 'üìã –ù–µ—Ç –¥ÔøΩÔøΩ–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.';
        } else {
            for (let i = 0; i < uniqueUsers.length; i++) {
                const user = uniqueUsers[i];
                const cleanName = cleanDisplayText(user.first_name || '–ù–µ–∏–∑–≤–µÔøΩÔøΩ—Ç–Ω—ã–π');
                const date = new Date(user.first_success_at).toLocaleString('ru-RU');

                message += `${i + 1}. **${cleanName}**\n`;
                message += `   ÔøΩÔøΩ ID: ${user.user_id}\n`;
                if (user.username) {
                    message += `   üì± @${user.username}\n`;
                }
                message += `   üìÖ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${date}\n\n`;
            }
        }

        message += `üí° **–ü–æ—è—Å–Ω–µ–Ω–∏–µ:**\n–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏ÔøΩÔøΩ—Ç–∏–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ - –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ç–æ–≥–æ –∂–µ –ø–æ–ª—åÔøΩÔøΩ–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å—á—ë—Ç—á–∏–∫.`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'admin_subscription_stats' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error displaying unique users:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±ÔøΩÔøΩ–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });
    }
}

// Handle subscription check history display
async function handleSubscriptionHistory(chatId, messageId) {
    try {
        const history = await db.getSubscriptionCheckHistory(20);

        if (history.length === 0) {
            await bot.editMessageText(`üìã **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö.`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'admin_subscription_stats' }]
                    ]
                }
            });
            return;
        }

        let message = `üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫**\n\n`;

        for (const check of history) {
            const userName = check.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
            const checkTime = new Date(check.checked_at).toLocaleString('ru-RU');
            const status = check.success ? '‚úÖ' : '‚ùå';
            const channelsCount = check.active_channels_count;

            message += `${status} **${userName}** | ID: ${check.user_id}\n`;
            message += `   ‚è∞ ${checkTime}\n`;
            message += `   üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channelsCount}\n\n`;
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_subscription_history' }],
                    [{ text: 'üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'admin_subscription_stats' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error displaying subscription history:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ', callback_data: 'admin_subscription_stats' }]
                ]
            }
        });
    }
}

// Error handling with 409 conflict management
bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
        console.log('‚ö†Ô∏è 409 Conflict detected - another bot instance is running');
        console.log('ÔøΩÔøΩ This is normal when deploying updates');

        // Try to clear webhook just in case
        setTimeout(async () => {
            try {
                await bot.deleteWebHook();
                console.log('üßπ Webhook cleared due to 409 conflict');
            } catch (e) {
                console.log('‚ÑπÔ∏è Webhook clear attempt (may fail, that\'s ok)');
            }
        }, 5000);
    } else {
        console.error('Polling error:', error.message);
    }
});

process.on('SIGINT', async () => {
    console.log('üõë Shutting down bot...');
    await db.closeConnection();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë Shutting down bot...');
    await db.closeConnection();
    process.exit(0);
});

// Handle all messages for custom broadcast
bot.on('message', async (msg) => {
    // Skip commands and callback queries
    if (msg.text && msg.text.startsWith('/')) return;
    if (msg.from.is_bot) return;

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const user = await db.getUser(userId);

        // Check if user is waiting to send broadcast message
        if (user && user.temp_action === 'waiting_broadcast_message' && isAdmin(userId)) {
            console.log('[BROADCAST] Admin sent custom broadcast message');

            // Clear temp action
            await db.updateUserField(userId, 'temp_action', null);

            const broadcastMessage = msg.text || msg.caption || 'üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ÔøΩÔøΩ–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏';

            // Get all users
            const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');
            const totalUsers = users.rows.length;

            // Send confirmation
            const confirmMsg = await bot.sendMessage(chatId, `üì§ **–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n‚è≥ –üÔøΩÔøΩ–æ–≥—Ä–µ—Å—Å: 0%`, { parse_mode: 'Markdown' });

            // Use throttler for broadcast with progress tracking
            const result = await throttler.broadcastMessages(
                users.rows,
                (user) => bot.sendMessage(user.id, `üì¢ **–°–æ–æ–±—â–µ–ΩÔøΩÔøΩÔøΩ–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n${broadcastMessage}`, { parse_mode: 'Markdown' }),
                // Progress callback
                async (progress) => {
                    try {
                        await bot.editMessageText(`üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${progress.total}\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${progress.success}\n‚ùå –û—à–∏–±–æ–∫: ${progress.errors}\n –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.percentage}%`, {
                            chat_id: chatId,
                            message_id: confirmMsg.message_id,
                            parse_mode: 'Markdown'
                        });
                    } catch (e) {
                        // Ignore edit errors
                    }
                }
            );

            // Final report
            await bot.editMessageText(`‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µÔøΩÔøΩ—à–µ–Ω–∞!**\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.total}\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–øÔøΩÔøΩ–∞–≤–ª–µ–Ω–æ: ${result.success}\n‚ùå –û—à–∏–±–æ–∫: ${result.errors}\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(result.success/result.total*100)}%`, {
                chat_id: chatId,
                message_id: confirmMsg.message_id,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]]
                }
            });

            console.log(`[BROADCAST] Custom broadcast completed: ${result.success}/${result.total} successful`);
        }
    } catch (error) {
        console.error('Error handling message for broadcast:', error);
    }
});

// ==================== SubGram Handlers ====================

// Enhanced subscription check with SubGram integration
async function handleEnhancedSubscriptionCheck(chatId, messageId, userId) {
    try {
        console.log('[SUBGRAM] Enhanced subscription check for user:', userId);

        // Check regular required channels first
        const requiredChannels = await getRequiredChannels();
        let allSubscribed = true;

        if (requiredChannels.length > 0) {
            allSubscribed = await checkAllSubscriptions(userId, true);
        }

        // Check SubGram channels
        let subgramAllowed = true;
        try {
            const user = await db.getUser(userId);
            if (!user) {
                throw new Error('User not found');
            }

            // Get current SubGram session if exists
            const session = await db.getSubGramUserSession(userId);
            let subgramResponse;

            if (session && session.session_data) {
                // Use existing session data for checking
                console.log('[SUBGRAM] Using existing session data for check');
                subgramResponse = await subgramAPI.checkUserStatus({
                    userId: userId.toString(),
                    chatId: userId.toString(),
                    firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    languageCode: 'ru',
                    premium: false,
                    gender: session.gender || undefined,
                    maxOP: 3,
                    action: 'subscribe'
                });
            } else {
                // Make new request
                console.log('[SUBGRAM] Making new SubGram check request');
                subgramResponse = await subgramAPI.requestSponsors({
                    userId: userId.toString(),
                    chatId: userId.toString(),
                    firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    languageCode: 'ru',
                    premium: false,
                    maxOP: 3,
                    action: 'subscribe'
                });
            }

            if (subgramResponse.success && subgramResponse.data) {
                const processedData = subgramAPI.processAPIResponse(subgramResponse.data);

                // Log the check
                await db.logSubGramAPIRequest(
                    userId,
                    'check_status',
                    { action: 'subscribe' },
                    subgramResponse.data,
                    true
                );

                // Update session if needed
                await db.saveSubGramUserSession(userId, subgramResponse.data, processedData);

                if (processedData.needsGender) {
                    const genderMessage = subgramAPI.formatChannelsMessage(processedData);
                    await bot.editMessageText(genderMessage.message, {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: { inline_keyboard: genderMessage.buttons }
                    });
                    return;
                }

                if (processedData.needsSubscription) {
                    subgramAllowed = false;
                    console.log('[SUBGRAM] User needs to subscribe to SubGram channels');
                } else if (processedData.allSubscribed || processedData.canProceed) {
                    subgramAllowed = true;
                    console.log('[SUBGRAM] SubGram subscriptions OK');
                }
            }
        } catch (subgramError) {
            console.error('[SUBGRAM] Error checking SubGram status:', subgramError);
            // Don't block user if SubGram service is down
            subgramAllowed = true;
        }

        if (allSubscribed && subgramAllowed) {
            // User has passed all checks
            await db.updateUserField(userId, 'is_subscribed', true);

            // Process referral logic like in the original handler
            const user = await db.getUser(userId);
            if (user && user.pending_referrer) {
                await db.updateUserField(userId, 'pending_referrer', null);
                await db.updateUserField(userId, 'invited_by', user.pending_referrer);
            }

            // Check referral qualification
            try {
                const qualification = await db.checkReferralQualification(userId);
                if (qualification.qualified) {
                    const result = await db.checkAndProcessPendingReferrals(userId);
                    if (result.processed > 0) {
                        // Notify referrer about successful qualification
                        try {
                            const userInfo = await db.getUser(userId);
                            const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\nüë§ –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **${userInfo.first_name}** –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è:\n‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É\n‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã\n‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏–ª —Å–≤–æÔøΩÔøΩ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\nüí∞ **–í—ã –ø–æ–ª—É—á–∏–ª–∏:** +3 ‚≠ê\nüíé **–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**`;

                            await bot.sendMessage(result.referrerId, message, {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                                    ]
                                }
                            });
                        } catch (error) {
                            console.error('Error sending qualified referral notification:', error);
                        }
                    }
                }
            } catch (error) {
                console.error('Error checking referral qualification:', error);
            }

            // Check retroactive referral activation
            try {
                const retroResult = await db.activateRetroactiveReferral(userId);
                if (retroResult.success) {
                    try {
                        const userInfo = await db.getUser(userId);
                        const message = `üîÑ **–í–æ–∑–≤—Ä–∞—Ç –∑–≤—ëÔøΩÔøΩ–¥!**\n\nüë§ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª **${userInfo.first_name}** –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è:\n‚úÖ –ü—Ä–æ—à—ë–ª –∫–∞–ø—á—É\n‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã\n\nüí∞ **–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:** +3 ‚≠ê\nüíé **–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!**`;

                        await bot.sendMessage(retroResult.referrerId, message, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                                ]
                            }
                        });
                    } catch (error) {
                        console.error('Error sending retroactive activation notification:', error);
                    }
                }
            } catch (error) {
                console.error('Error checking retroactive activation:', error);
            }

            // Show main menu
            await handleMainMenu(chatId, messageId);
        } else {
            // Show subscription requirements again
            const subData = await getEnhancedSubscriptionMessage(userId);
            await bot.editMessageText(subData.message, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: subData.buttons }
            });
        }

    } catch (error) {
        console.error('Error in enhanced subscription check:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_subscriptions_enhanced' }],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });
    }
}

// Handle SubGram subscription check
async function handleSubGramCheck(chatId, messageId, userId) {
    try {
        console.log('[SUBGRAM] Checking SubGram subscriptions for user:', userId);

        const user = await db.getUser(userId);
        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]] }
            });
            return;
        }

        // Get current session
        const session = await db.getSubGramUserSession(userId);

        const checkResponse = await subgramAPI.checkUserStatus({
            userId: userId.toString(),
            chatId: userId.toString(),
            firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            languageCode: 'ru',
            premium: false,
            gender: session?.gender || undefined,
            maxOP: 3,
            action: 'subscribe'
        });

        if (!checkResponse.success) {
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SubGram –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'subgram_check' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
            return;
        }

        const processedData = subgramAPI.processAPIResponse(checkResponse.data);

        // Log the check
        await db.logSubGramAPIRequest(
            userId,
            'check_subgram',
            { action: 'subscribe' },
            checkResponse.data,
            true
        );

        // Update session
        await db.saveSubGramUserSession(userId, checkResponse.data, processedData);

        if (processedData.allSubscribed || processedData.canProceed) {
            await bot.editMessageText('‚úÖ **–û—Ç–ª–∏—á–Ω–æ!**\n\n–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!\n\nüéâ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏...', {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscriptions_enhanced' }]
                    ]
                }
            });
        } else {
            // Format message with current status
            const channelsMessage = subgramAPI.formatChannelsMessage(processedData);
            await bot.editMessageText(channelsMessage.message, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: channelsMessage.buttons }
            });
        }

    } catch (error) {
        console.error('Error in SubGram check:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ ÔøΩÔøΩ–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'subgram_check' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });
    }
}

// Handle SubGram gender selection
async function handleSubGramGender(chatId, messageId, userId, gender) {
    try {
        console.log('[SUBGRAM] Setting gender for user:', userId, 'gender:', gender);

        const user = await db.getUser(userId);
        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]] }
            });
            return;
        }

        // Make request with gender
        const genderResponse = await subgramAPI.requestSponsors({
            userId: userId.toString(),
            chatId: userId.toString(),
            firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            languageCode: 'ru',
            premium: false,
            gender: gender,
            maxOP: 3,
            action: 'subscribe'
        });

        if (!genderResponse.success) {
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫ÔøΩÔøΩ–Ω–∞–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª–æ–º.', {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_subscriptions_enhanced' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
            return;
        }

        const processedData = subgramAPI.processAPIResponse(genderResponse.data);

        // Log the request
        await db.logSubGramAPIRequest(
            userId,
            'gender_request',
            { gender, action: 'subscribe' },
            genderResponse.data,
            true
        );

        // Save session with gender
        await db.saveSubGramUserSession(userId, genderResponse.data, processedData, gender);

        // Save channels
        if (processedData.channelsToSubscribe && processedData.channelsToSubscribe.length > 0) {
            await db.saveSubGramChannels(userId, processedData.channelsToSubscribe);
        }

        // Format and show channels
        const channelsMessage = subgramAPI.formatChannelsMessage(processedData);
        await bot.editMessageText(channelsMessage.message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: channelsMessage.buttons }
        });

    } catch (error) {
        console.error('Error handling SubGram gender:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'check_subscriptions_enhanced' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });
    }
}

// ==================== Admin SubGram Handlers ====================

// Main SubGram admin menu
async function handleAdminSubGram(chatId, messageId) {
    try {
        const settings = await db.getSubGramSettings();
        const config = subgramAPI.getConfig();

        const message = `üéØ **SubGram –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**\n\nüìä **–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n‚Ä¢ ${settings?.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n‚Ä¢ API –∫–ª—é—á: ${config.hasApiKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${settings?.max_sponsors || 3}\n\nüîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_subgram_settings' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_subgram_stats' }
                    ],
                    [
                        { text: 'üìã –õ–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤', callback_data: 'admin_subgram_logs' },
                        { text: 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏', callback_data: 'admin_subgram_cleanup' }
                    ],
                    [
                        { text: settings?.enabled ? '‚è∏Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å' : '‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å', callback_data: `admin_subgram_toggle_${settings?.enabled ? 'off' : 'on'}` }
                    ],
                    [
                        { text: 'üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('Error in admin SubGram handler:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ ÔøΩÔøΩ–∞–≥—Ä—É–∑–∫–∏ SubGram —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
        });
    }
}

// SubGram settings management
async function handleAdminSubGramSettings(chatId, messageId) {
    try {
        const settings = await db.getSubGramSettings();

        const message = `‚öôÔ∏è **SubGram –ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\nüîß **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n‚Ä¢ **–°—Ç–∞—Ç—É—Å:** ${settings?.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n‚Ä¢ **API URL:** \`${settings?.api_url || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n‚Ä¢ **–ú–∞–∫—Å–∏–º—É–º —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:** ${settings?.max_sponsors || 3}\n‚Ä¢ **–î–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:** ${settings?.default_action || 'subscribe'}\n\nüìù **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${settings?.updated_at ? new Date(settings.updated_at).toLocaleString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_subgram_refresh_settings' }
                    ],
                    [
                        { text: 'üîô SubGram —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'admin_subgram' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('Error in admin SubGram settings:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SubGram.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_subgram' }]] }
        });
    }
}

// SubGram statistics
async function handleAdminSubGramStats(chatId, messageId) {
    try {
        // Get recent API requests
        const recentLogs = await db.getSubGramAPIRequestHistory(null, 10);

        // Count statistics
        const totalRequests = recentLogs.length;
        const successfulRequests = recentLogs.filter(log => log.success).length;
        const errorRequests = totalRequests - successfulRequests;

        // Get unique users who used SubGram
        const uniqueUsers = new Set(recentLogs.map(log => log.user_id)).size;

        // Get latest requests by status
        const statusCounts = {};
        recentLogs.forEach(log => {
            if (log.api_status) {
                statusCounts[log.api_status] = (statusCounts[log.api_status] || 0) + 1;
            }
        });

        let message = `üìä **SubGram –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\nüìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${totalRequests} –∑–∞–ø—Ä–æ—Å–æ–≤):**\n‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${totalRequests}\n‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulRequests}\n‚Ä¢ –û—à–∏–±–æ–∫: ${errorRequests}\n‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueUsers}\n`;

        if (Object.keys(statusCounts).length > 0) {
            message += '\nüéØ **–°—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤ API:**\n';
            for (const [status, count] of Object.entries(statusCounts)) {
                const emoji = status === 'ok' ? '‚úÖ' : status === 'warning' ? '‚ö†Ô∏è' : status === 'gender' ? 'üë§' : '‚ùì';
                message += `‚Ä¢ ${emoji} ${status}: ${count}\n`;
            }
        }

        if (recentLogs.length > 0) {
            const latestLog = recentLogs[0];
            message += `\n‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:**\n‚Ä¢ ${new Date(latestLog.created_at).toLocaleString('ru-RU')}\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${latestLog.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n‚Ä¢ –°—Ç–∞—Ç—É—Å: ${latestLog.success ? '‚úÖ' : '‚ùå'}\n‚Ä¢ API –æ—Ç–≤–µ—Ç: ${latestLog.api_status || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_subgram_stats' },
                        { text: 'üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏', callback_data: 'admin_subgram_logs' }
                    ],
                    [
                        { text: 'üîô SubGram —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'admin_subgram' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('Error in admin SubGram stats:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SubGram.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_subgram' }]] }
        });
    }
}

// SubGram API logs
async function handleAdminSubGramLogs(chatId, messageId) {
    try {
        const logs = await db.getSubGramAPIRequestHistory(null, 15);

        let message = `üìã **SubGram API –õ–æ–≥–∏**\n\n`;

        if (logs.length === 0) {
            message += 'üìù –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SubGram API.';
        } else {
            message += `üìä –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${logs.length} –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n`;

            for (let index = 0; index < logs.length; index++) {
                const log = logs[index];
                const date = new Date(log.created_at).toLocaleString('ru-RU');
                const user = log.first_name || `ID:${log.user_id}`;
                const status = log.success ? '‚úÖ' : '‚ùå';
                const apiStatus = log.api_status ? ` (${log.api_status})` : '';

                message += `${index + 1}. ${status} ${date}\n   üë§ ${user} | ${log.request_type}${apiStatus}\n`;

                if (log.error_message) {
                    message += `   ‚ùå ${log.error_message.substring(0, 50)}...\n`;
                }

                message += '\n';

                // Limit message length
                if (message.length > 3500) {
                    message += `... –∏ –µ—â–µ ${logs.length - index - 1} –∑–∞–ø–∏—Å–µ–π`;
                    break;
                }
            }
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_subgram_logs' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_subgram_stats' }
                    ],
                    [
                        { text: 'üîô SubGram —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'admin_subgram' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('Error in admin SubGram logs:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ SubGram.', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_subgram' }]] }
        });
    }
}

// Add global error handlers
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    // Don't exit the process - just log the error
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    // Only exit on critical errors
    if (error.message && error.message.includes('ECONNRESET')) {
        console.log('‚ö†Ô∏è Network error - continuing...');
        return;
    }
    process.exit(1);
});

// Add global error handlers
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    // Don't exit the process - just log the error
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    // Only exit on critical errors
    if (error.message && error.message.includes('ECONNRESET')) {
        console.log('‚ö†Ô∏è Network error - continuing...');
        return;
    }
    process.exit(1);
});

// Start the bot
startBot();
