const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const config = require('./config');
const Database = require('./database');
const SubGram = require('./subgram');
const WebhookHandler = require('./webhook-handler');

const bot = new TelegramBot(config.BOT_TOKEN, {
    polling: {
        interval: 1000,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const passedCaptcha = new Map();

// –ó–∞—âÔøΩÔøΩ—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - —Ö—Ä–∞–Ω–∏–º –ø–æ—ÅÔøΩÔøΩ–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æÔøΩÔøΩ—å–∑–æ–≤–∞—Ç–µ–ª—è
const lastSubscriptionCheck = new Map();

// –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä—ÅÔøΩÔøΩ–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
const lastSponsorMessage = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
const broadcastStates = new Map();

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ä–µ—à–∞–µ—Ç –ø—ÄÔøΩÔøΩ–±–ª–µ–º—É BUTTON_DATA_INVALID)
const pendingBroadcastMessages = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
const pendingRejectionReasons = new Map();

// –£–¥–∞–ª—èÔøΩÔøΩ–º –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π —Å—á–µ—Ç—á–∏–∫ —Ä—ÉÔøΩÔøΩ–µ—Ç–∫–∏
// let rouletteBetCounter = 0; // –£–Ø–ó–í–ò–ú–û–°–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ê

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Telegram Bot API
function normalizeChannelIdentifier(channelInput) {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ https://t.me/channel
    if (channelInput.startsWith('https://t.me/')) {
        const username = channelInput.replace('https://t.me/', '');
        return {
            identifier: `@${username}`, // –î–ª—è getChatMember –Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç @username
            title: username,
            url: channelInput // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ªÔøΩÔøΩ—É
        };
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ñ–æ—Ä–º–∞—Ç @username
    else if (channelInput.startsWith('@')) {
        return {
            identifier: channelInput,
            title: channelInput.replace('@', ''),
            url: `https://t.me/${channelInput.replace('@', '')}`
        };
    }
    // –ï—Å–ª–∏ ÔøΩÔøΩ—Ç–æ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
    else {
        return {
            identifier: `@${channelInput}`,
            title: channelInput,
            url: `https://t.me/${channelInput}`
        };
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—ÅÔøΩÔøΩ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (–û–ë–ù–û–í–õ–ï–ù–û: —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—ÇÔøΩÔøΩ—Å—Ç–∏–∫–æ–π)
// –¢–µ–ø–µ—Ä—å –øÔøΩÔøΩ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ @username, —Ç–∞–∫ –∏ https://t.me/username —Ñ–æ—Ä–º–∞—Ç—ã
async function checkPersonalChannelsSubscription(userId, skipOnError = false) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const personalChannels = await Database.getActiveSponsorChannels();

        if (!personalChannels || personalChannels.length === 0) {
            console.log(`‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            return { isSubscribed: true }; // –ï—Å–ª–∏ ÔøΩÔøΩ–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ΩÔøΩÔøΩ—Ç, —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
        }

        console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${personalChannels.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`);
        const unsubscribedChannels = [];

        for (const channelData of personalChannels) {
            try {
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${channelData.channel_identifier} (${channelData.channel_title})`);

                const member = await bot.getChatMember(channelData.channel_identifier, userId);
                const isSubscribed = member.status !== 'left' && member.status !== 'kicked';

                if (isSubscribed) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –øÔøΩÔøΩ–¥–ø–∏—Å–∞–Ω - –∑–∞–ø–∏ÔøΩÔøΩ—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    try {
                        await Database.recordSponsorChannelCheck(channelData.channel_identifier, userId);
                        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${channelData.channel_identifier} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
                    } catch (statsError) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelData.channel_identifier}:`, statsError.message);
                    }
                } else {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ÔøΩÔøΩ–µ –øÔøΩÔøΩ–¥–øÔøΩÔøΩ—Å–∞–Ω
                    unsubscribedChannels.push({
                        username: channelData.channel_identifier,
                        title: channelData.channel_title,
                        url: channelData.channel_url,
                        originalInput: channelData.channel_identifier
                    });
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${channelData.channel_identifier}:`, error.message);

                if (skipOnError) {
                    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏" - –ø—Ä–æ–ø—ÉÔøΩÔøΩ–∫–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª ${channelData.channel_identifier} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
                } else {
                    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—áÔøΩÔøΩ—è—Ö —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    unsubscribedChannels.push({
                        username: channelData.channel_identifier,
                        title: channelData.channel_title,
                        url: channelData.channel_url,
                        originalInput: channelData.channel_identifier
                    });
                }
            }
        }

        return {
            isSubscribed: unsubscribedChannels.length === 0,
            unsubscribedChannels: unsubscribedChannels
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);

        // FALLBACK: –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º config
        try {
            console.log(`üîÑ Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
            const configChannels = config.PERSONAL_SPONSOR_CHANNELS;
            if (!configChannels || configChannels.length === 0) {
                return { isSubscribed: true };
            }

            const unsubscribedChannels = [];
            for (const channelInput of configChannels) {
                try {
                    const channelData = normalizeChannelIdentifier(channelInput);
                    const member = await bot.getChatMember(channelData.identifier, userId);
                    if (member.status === 'left' || member.status === 'kicked') {
                        unsubscribedChannels.push({
                            username: channelData.identifier,
                            title: channelData.title,
                            url: channelData.url,
                            originalInput: channelInput
                        });
                    }
                } catch (err) {
                    if (!skipOnError) {
                        const channelData = normalizeChannelIdentifier(channelInput);
                        unsubscribedChannels.push({
                            username: channelData.identifier,
                            title: channelData.title,
                            url: channelData.url,
                            originalInput: channelInput
                        });
                    }
                }
            }

            return {
                isSubscribed: unsubscribedChannels.length === 0,
                unsubscribedChannels: unsubscribedChannels
            };
        } catch (fallbackError) {
            console.error('–û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', fallbackError);
            return { isSubscribed: false, unsubscribedChannels: [] };
        }
    }
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø)
async function sendSponsorMessage(chatId, userId, subscriptionData, messageId = null, method = 'send') {
    const now = Date.now();
    const lastMessage = lastSponsorMessage.get(userId);
    const uniqueKey = `${userId}_${chatId}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞—â–∏—Ç—ã

    // –£–°–ò–õ–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ –Ω–µ–¥–∞ÔøΩÔøΩ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏ÔøΩÔøΩ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (lastMessage && (now - lastMessage) < 30000) { // 30 —Å–µ–∫—É–Ω–¥ —É—Å–∏–ª–µÔøΩÔøΩ–Ω–∞—è –∑–∞—â–∏—Ç–∞
        console.log(`üõ°Ô∏è –ë–õ–û–ö–ò–†–û–í–ö–ê: –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} (${(now - lastMessage)/1000}—Å –Ω–∞–∑–∞–¥)`);
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (!subscriptionData.links || subscriptionData.links.length === 0) {
        console.log(`‚ö†Ô∏è –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        return false;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æÔøΩÔøΩ–∏—Ä–æ–≤–∫—É –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –∞ –Ω–µ –ø–æ—Å–ª–µ
    lastSponsorMessage.set(userId, now);

    try {
        const message = SubGram.formatSubscriptionMessage(
            subscriptionData.links,
            subscriptionData.additional?.sponsors
        );
        const keyboard = SubGram.createSubscriptionKeyboard(subscriptionData.links);

        if (method === 'edit' && messageId) {
            // –ü—ã—Ç–∞ÔøΩÔøΩ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±ÔøΩÔøΩ–µ–Ω–∏–µ
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard
                });
                console.log(`‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                return true;
            } catch (editError) {
                console.log(`‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${editError.message}`);
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                lastSponsorMessage.delete(userId);
                return false;
            }
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ edit
            await bot.sendMessage(chatId, message, { reply_markup: keyboard });
            console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ c–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            return true;
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
        // –ü—ÄÔøΩÔøΩ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
        lastSponsorMessage.delete(userId);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–∞—ÅÔøΩÔøΩ–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async function checkReferralConditions(userId) {
    try {
        const user = await Database.getUser(userId);
        if (!user || !user.referrer_id) {
            return; // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ SubGram —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        const subscriptionStatus = await checkUserSubscription(userId, userId);
        if (!subscriptionStatus.isSubscribed) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª ${userId} –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ SubGram —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã`);
            return;
        }

        // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        const personalChannelsStatus = await checkPersonalChannelsSubscription(userId);
        if (!personalChannelsStatus.isSubscribed) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª ${userId} –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã`);
            return;
        }

        // –ü—Ä–æ–≤–µÔøΩÔøΩ—è–µ–º –∫–æ–ªÔøΩÔøΩ—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µÔøΩÔøΩ–Ω—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–±–æ–ª—å—à–µ –Ω–µ SubGram)
        const completedTasks = await Database.getUserCompletedTasks(userId);
        if (completedTasks < 2) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª —Ç–æ–ª—å–∫–æ ${completedTasks}/2 –∑–∞–¥–∞–Ω–∏–π`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞
        if (user.referral_completed) {
            console.log(`üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –±—ã–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞`);
            return;
        }

        // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì
        const cisCodes = ['ru', 'uk', 'be', 'kk', 'ky', 'uz', 'tg', 'tk', 'hy', 'az', 'ka', 'mo'];
        const userLanguage = user.language_code ? user.language_code.toLowerCase() : 'unknown';

        if (!cisCodes.includes(userLanguage)) {
            console.log(`üö´ –†–µ—Ñ–µ—Ä–∞–ª ${userId} –∏–∑ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –°–ù–ì (language_code: ${userLanguage}), –Ω–∞–≥—Ä–∞–¥—É –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º`);

            // –ü–æ–º–µ—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ, –Ω–æ –ë–ï–ó –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
            try {
                await Database.pool.query(
                    'UPDATE users SET referral_completed = TRUE WHERE user_id = $1 AND referral_completed = FALSE',
                    [userId]
                );
                console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª ${userId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã (–Ω–µ –°–ù–ì)`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${userId} –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ:`, error);
            }
            return;
        }

        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª ${userId} –∏–∑ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì (language_code: ${userLanguage}), –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É`);

        // –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–ΩÔøΩÔøΩ - –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        console.log(`üéâ –†–µ—Ñ–µ—Ä–∞–ª ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è! –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–æ—Ä—É ${user.referrer_id}`);

        // –ò–°–ü–†–ê–í–õÔøΩÔøΩÔøΩÔøΩ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
        const client = await Database.pool.connect();
        try {
            await client.query('BEGIN');

            // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–º–µ—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—âÔøΩÔøΩ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            const updateResult = await client.query(
                'UPDATE users SET referral_completed = TRUE WHERE user_id = $1 AND referral_completed = FALSE RETURNING referrer_id',
                [userId]
            );

            // –ï—Å–ª–∏ –æ–±ÔøΩÔøΩ–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ (—É–∂–µ –±—ã–ª–æ referral_completed = TRUE), –≤—ãÔøΩÔøΩ–æ–¥–∏–º
            if (updateResult.rowCount === 0) {
                console.log(`‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É–∂–µ –±—ã–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ (race condition –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞)`);
                await client.query('COMMIT');
                return;
            }

            const referrerId = updateResult.rows[0].referrer_id;
            console.log(`‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–º–µ—á–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª ${userId}, –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId}`);

            // –ù–∞—á–∏ÔøΩÔøΩ–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ—á–∫ÔøΩÔøΩÔøΩÔøΩ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await client.query(
                'UPDATE users SET balance = balance + 3, total_earned = total_earned + 3, points = points + 1, weekly_points = weekly_points + 1 WHERE user_id = $1',
                [referrerId]
            );

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µÔøΩÔøΩ—á–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await client.query(
                'UPDATE users SET total_referrals = total_referrals + 1, daily_referrals = daily_referrals + 1, referral_earned = referral_earned + 3 WHERE user_id = $1',
                [referrerId]
            );

            await client.query('COMMIT');
            console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ: +3 –∑–≤–µ–∑–¥—ã, +1 –æ—á–∫–æ –¥–ª—è ${referrerId}`);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ COMMIT
            try {
                await bot.sendMessage(referrerId,
                    'üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è!\n' +
                    '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã\n' +
                    '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –∫–∞–Ω–∞–ª—ã\n' +
                    '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª 2 –∑–∞–¥–∞–Ω–∏—è\n\n' +
                    'üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 3 ‚≠êÔ∏è\n' +
                    'üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –æ—á–∫–æ'
                );
            } catch (e) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${referrerId}`);
            }

        } catch (error) {
            await client.query('ROLLBACK');
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:`, error);
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook handler
const webhookHandler = new WebhookHandler(bot);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initBot() {
    try {
        await Database.init();
        console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

        // –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
        const webhookPort = process.env.PORT || process.env.WEBHOOK_PORT || 3000;
        console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏–∏:');
        console.log('- PORT:', process.env.PORT);
        console.log('- WEBHOOK_PORT:', process.env.WEBHOOK_PORT);
        console.log('- –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä—Ç:', webhookPort);
        await webhookHandler.start(webhookPort);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await bot.setMyCommands([
            { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
            { command: 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
            { command: 'admin', description: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' }
        ]);

        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
function createMainMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
            [{ text: '‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã', callback_data: 'invite' }],
            [{ text: 'üñ± –ö–ª–∏–∫–µ—Ä', callback_data: 'clicker' }, { text: 'üé≤ –õ–æ—Ç–µ—Ä–µ—è', callback_data: 'lottery' }],
            [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }, { text: 'üé∞ –†—É–ª–µ—Ç–∫–∞', callback_data: 'roulette' }],
            [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'ratings' }, { text: 'üéÅ –ö–µ–π—Å—ã', callback_data: 'cases' }],
            [{ text: 'üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data: 'withdraw' }]
        ]
    };
}

function createBlockedMainMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'disabled' }],
            [{ text: '‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã', callback_data: 'disabled' }],
            [{ text: 'üñ± –ö–ª–∏–∫–µ—Ä', callback_data: 'disabled' }, { text: 'üé∞ –õ–æ—Ç–µ—Ä–µ—è', callback_data: 'disabled' }],
            [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'disabled' }, { text: 'üé∞ –†—É–ª–µ—Ç–∫–∞', callback_data: 'disabled' }],
            [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'disabled' }, { text: 'üéÅ –ö–µ–π—Å—ã', callback_data: 'disabled' }],
            [{ text: 'üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data: 'disabled' }]
        ]
    };
}

function createBackToMenuKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
}

function createProfileKeyboard() {
    return {
        inline_keyboard: [
            [{ text: 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promocode' }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
}

// –ö–∞–ø—á–∞ —Å 8 –∫–Ω–æ–ø–∫–∞–º–∏ (–∂–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ñ—Ä—É–∫ÔøΩÔøΩ—ã)
function showCaptcha(chatId, userId) {
    const message = 'ü§ñ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n' +
                   'üçì –ù–∞–π–¥–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ó–ï–ú–õ–Ø–ù–ò4–ö–£ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:';

    const keyboard = {
        inline_keyboard: [
            [
                { text: 'üê± –ö–æ—Ç', callback_data: 'captcha_1' },
                { text: 'üêï –°–æ–±–∞–∫–∞', callback_data: 'captcha_2' }
            ],
            [
                { text: 'üêò –°–ª–æ–Ω', callback_data: 'captcha_3' },
                { text: 'üê∞ –ö—Ä–æ–ª–∏–∫', callback_data: 'captcha_4' }
            ],
            [
                { text: 'üçé –Ø–±–ª–æ–∫–æ', callback_data: 'captcha_5' },
                { text: 'üçì –ó–µ–º–ª—è–Ω–∏–∫–∞', callback_data: 'captcha_6' }
            ],
            [
                { text: 'üçä –ê–ø–µ–ª—å—Å–∏–Ω', callback_data: 'captcha_7' },
                { text: 'üçå –ë–∞–Ω–∞–Ω', callback_data: 'captcha_8' }
            ]
        ]
    };

    return bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ø—á–∏
async function handleCaptcha(chatId, userId, data, messageId, callbackQueryId) {
    const choice = parseInt(data.split('_')[1]);

    if (choice === 6) { // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µÔøΩÔøΩ - ÔøΩÔøΩ–µ–º–ª—è–Ω–∏–∫–∞ (6-—è –∫–Ω–æ–ø–∫–∞)
        // –ö–∞–ø—á–∞ –øÔøΩÔøΩ–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        passedCaptcha.set(userId, true);

        await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

        // ÔøΩÔøΩ–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await bot.editMessageText('‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\nüîç –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏...', {
            chat_id: chatId,
            message_id: messageId
        });

        // –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        const now = Date.now();
        const lastCheck = lastSubscriptionCheck.get(userId);
        if (lastCheck && (now - lastCheck) < 3000) { // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞—â–∏—Ç–∞
            console.log(`‚ö†Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return;
        }
        lastSubscriptionCheck.set(userId, now);

        let user = await Database.getUser(userId);

        // –ü–æ–ª—É—á–∞–µ–º —ÅÔøΩÔøΩ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userStateData = userStates.get(userId);
        let userData = null;

        if (userStateData && userStateData.startsWith('{')) {
            try {
                userData = JSON.parse(userStateData);
            } catch (e) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, e.message);
            }
        }

        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const referrerId = userData?.referralCode ? parseInt(userData.referralCode) : null;
            user = await Database.createUser({
                userId: userId,
                username: userData?.username || '',
                firstName: userData?.firstName || '',
                languageCode: userData?.languageCode || 'ru',
                isPremium: userData?.isPremium || false,
                referrerId: referrerId
            });

            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞ÔøΩÔøΩ–∏—Å–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
            if (referrerId) {
                console.log(`üë• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referrerId} (–ø–æ—Å–ª–µ –∫–∞–ø—á–∏)`);
            }
        }

        // –û—áÔøΩÔøΩ—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates.delete(userId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏ –≤ –±ÔøΩÔøΩ–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
            await Database.setCaptchaPassed(userId, true);
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µÔøΩÔøΩ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ SubGram –∫–∞–Ω–∞–ª—ã
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ—Å–ª–µ –∫–∞–ø—á–∏`);
        const subscriptionStatus = await checkUserSubscription(
            userId,
            chatId,
            userData?.firstName || '',
            userData?.languageCode || 'ru',
            userData?.isPremium || false
        );

        console.log(`üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–ï –∫–∞–ø—á–∏:`, subscriptionStatus);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–ΩÔøΩÔøΩ–ª—ã
        if (!subscriptionStatus.isSubscribed) {
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ SubGram –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∫–∞–ø—á–∏`);

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if (subscriptionStatus.subscriptionData?.links?.length > 0) {
                console.log(` –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${subscriptionStatus.subscriptionData.links.length} —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –∫–∞–ø—á–∏`);
                const messageSent = await sendSponsorMessage(chatId, userId, subscriptionStatus.subscriptionData, messageId, 'edit');
                if (!messageSent) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –ø–æ—Å–ª–µ –∫–∞–ø—á–∏`);
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.editMessageText(
                    'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n\n' +
                    '‚è≥ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n' +
                    'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }
                            ]]
                        }
                    }
                );
            }
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        console.log(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ—Å–ª–µ –∫–∞–ø—á–∏`);
        const personalChannelsStatus = await checkPersonalChannelsSubscription(userId, false);

        if (!personalChannelsStatus.isSubscribed && personalChannelsStatus.unsubscribedChannels.length > 0) {
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∫–∞–ø—á–∏`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
            let personalMessage = 'üîê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n';

            personalChannelsStatus.unsubscribedChannels.forEach((channel, index) => {
                personalMessage += `${index + 1}. ${channel.title}\n`;
            });

            personalMessage += '\n‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';

            // –°–æ–∑–¥–∞–µ–º –∫–ªÔøΩÔøΩ–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
            const personalKeyboard = {
                inline_keyboard: []
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
            personalChannelsStatus.unsubscribedChannels.forEach(channel => {
                personalKeyboard.inline_keyboard.push([{
                    text: `üì¢ ${channel.title}`,
                    url: channel.url
                }]);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
            personalKeyboard.inline_keyboard.push([{
                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                callback_data: 'check_subscription_personal'
            }]);

            await bot.editMessageText(personalMessage, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: personalKeyboard
            });
            return;
        }

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∫–∞–ø—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`);

        const blocked = (config.BLOCKED_LANGUAGE_CODES || []).map(c => c.toLowerCase());
        const userLang = (user?.language_code || userData?.languageCode || 'ru').toLowerCase();
        const isBlocked = blocked.includes(userLang);

        const successMessageDefault = '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É –∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n\n' +
                              'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!\n\n' +
                              'üåü –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n' +
                              '‚Ä¢ ‚≠êÔ∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã\n' +
                              '‚Ä¢ üé∞ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É\n' +
                              '‚Ä¢ üñ± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–∫–µ—Ä\n' +
                              '‚Ä¢ üéÅ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n' +
                              '‚Ä¢ üí∞ –í—ã–≤–æ–¥–∏—Ç—å –∑–≤—ë–∑–¥—ã\n\n' +
                              '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        const successMessage = isBlocked
            ? 'üö´ –î–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            : successMessageDefault;

        const keyboard = isBlocked ? createBlockedMainMenuKeyboard() : createMainMenuKeyboard();

        await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await checkReferralConditions(userId);

    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.answerCallbackQuery(callbackQueryId, {
            text: '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∞–π–¥–∏—Ç–µ –∑–µ–º–ª—è–Ω–∏–∫—É —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            show_alert: true
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É –∑–∞–Ω–æ–≤–æ
        await bot.editMessageText('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n' +
                                'üçì –ù–∞–π–¥–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ó–ï–ú–õ–Ø–ù–ò4–ö–£ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üê± –ö–æ—Ç', callback_data: 'captcha_1' },
                        { text: 'üêï –°–æ–±–∞–∫–∞', callback_data: 'captcha_2' }
                    ],
                    [
                        { text: 'üêò –°–ª–æ–Ω', callback_data: 'captcha_3' },
                        { text: 'üê∞ –ö—Ä–æ–ª–∏–∫', callback_data: 'captcha_4' }
                    ],
                    [
                        { text: 'üçé –Ø–±–ª–æ–∫–æ', callback_data: 'captcha_5' },
                        { text: 'üçì –ó–µ–º–ª—è–Ω–∏–∫–∞', callback_data: 'captcha_6' }
                    ],
                    [
                        { text: 'üçä –ê–ø–µ–ª—å—Å–∏–Ω', callback_data: 'captcha_7' },
                        { text: 'üçå –ë–∞–Ω–∞–Ω', callback_data: 'captcha_8' }
                    ]
                ]
            }
        });
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –°–ü–û–ù–°–û–†–°–ö–ò–ï –∫–∞–Ω–∞–ª—ã (–¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞)
async function checkUserSubscription(userId, chatId, firstName = '', languageCode = 'ru', isPremium = false) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –≤–µ–±—Ö—É–∫–æ–≤ (—Å–≤–µ–∂–∏ÔøΩÔøΩ –¥–∞–Ω–Ω—ã–µ - –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        const cachedStatus = webhookHandler.getUserSubscriptionStatus(userId);

        if (cachedStatus.lastUpdate && (Date.now() - cachedStatus.lastUpdate) < 5 * 60 * 1000) {
            console.log(` –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            console.log(`üìä –ö–µ—à:`, cachedStatus);

            if (cachedStatus.isSubscribed === false && cachedStatus.unsubscribedLinks.length > 0) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –µ—Å—Ç—å –Ω–µ–ø–æ–¥ÔøΩÔøΩ–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                return {
                    isSubscribed: false,
                    subscriptionData: {
                        links: cachedStatus.unsubscribedLinks,
                        status: 'webhook_cache'
                    }
                };
            }

            if (cachedStatus.isSubscribed === true) {
                // –ü–æ–ªÔøΩÔøΩ–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                return {
                    isSubscribed: true,
                    subscriptionData: { status: 'webhook_cache' }
                };
            }
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ SubGram –¥–ª—è –°–ü–û–ù–°–û–†–°–ö–ò–• –∫–∞–Ω–∞–ª–æ–≤
        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ SubGram API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –°–ü–û–ù–°–û–†–°–ö–ò–• –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const taskChannels = await SubGram.checkSubscription(
            userId,
            chatId,
            firstName,
            languageCode,
            isPremium
        );

        console.log(`üì• SubGram –æ—Ç–≤–µ—Ç:`, JSON.stringify(taskChannels, null, 2));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç SubGram
        if (taskChannels.status === 'error') {
            console.log(`‚ùå –û—à–∏–±–∫–∞ SubGram, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º`);

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ getChannelLinks
            console.log(` –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ getChannelLinks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            try {
                const channelLinks = await SubGram.getChannelLinks(
                    userId,
                    chatId,
                    firstName,
                    languageCode,
                    isPremium
                );

                if (channelLinks.status === 'ok' && channelLinks.links && channelLinks.links.length > 0) {
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: ${channelLinks.links.length} –∫–∞–Ω–∞–ª–æ–≤`);
                    return {
                        isSubscribed: false,
                        subscriptionData: channelLinks
                    };
                }
            } catch (fallbackError) {
                console.error(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, fallbackError.message);
            }

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if (cachedStatus.lastUpdate) {
                return {
                    isSubscribed: cachedStatus.isSubscribed === true, // –°–¢–†–û–ì–û: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                    subscriptionData: {
                        status: 'fallback_cache',
                        links: cachedStatus.unsubscribedLinks || []
                    }
                };
            }

            // –°–¢–†–û–ìÔøΩÔøΩ–ô FALLBACK: –µ—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞ - –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
            return {
                isSubscribed: false,
                subscriptionData: {
                    status: 'error_fallback',
                    links: [],
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                }
            };
        }

        // –í–ê–ñ–ù–û: —Å—Ç–∞—Ç—É—Å "warning" –æ–∑–Ω–∞—á–∞–µ—Ç ÔøΩÔøΩ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µÔøΩÔøΩ—å –ù–ï –ø–æ–¥–ø–∏—Å–∞ÔøΩÔøΩ!
        if (taskChannels.status === 'warning') {
            console.log(` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω (—Å—Ç–∞—Ç—É—Å warning): ${taskChannels.message}`);

            // –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ warning SubGram –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µÔøΩÔøΩ–∏—è
            if (!taskChannels.links || taskChannels.links.length === 0) {
                console.log(` –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (warning –±–µ–∑ —Å—Å—ã–ª–æ–∫)`);

                // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ getChannelLinks
                const attempts = [
                    // 1. –ü–æ–ø—ã—Ç–∫–∞ —Å getChannelLinks
                    () => SubGram.getChannelLinks(userId, chatId, firstName, languageCode, isPremium)
                ];

                for (let i = 0; i < attempts.length; i++) {
                    try {
                        console.log(` –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${attempts.length} –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫`);
                        const linksCheck = await attempts[i]();

                        if (linksCheck.links && linksCheck.links.length > 0) {
                            taskChannels.links = linksCheck.links;
                            taskChannels.additional = linksCheck.additional;
                            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å—Å—ã–ª–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${linksCheck.links.length} –∫–∞–Ω–∞–ª–æ–≤`);
                            break;
                        } else if (linksCheck.status === 'ok') {
                            console.log(`‚ö† –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: status='ok' –Ω–æ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω?)`);
                        } else {
                            console.log(`‚ö† –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ –∫–∞–ª–∞ —Å—Å—ã–ª–æ–∫: status=${linksCheck.status}`);
                        }
                    } catch (e) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ ${i + 1}:`, e.message);
                    }
                }

                if (!taskChannels.links || taskChannels.links.length === 0) {
                    console.log(`‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

                    // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏, ÔøΩÔøΩ—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
                    if (cachedStatus.lastUpdate && cachedStatus.unsubscribedLinks.length > 0) {
                        console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ${cachedStatus.unsubscribedLinks.length}`);
                        taskChannels.links = cachedStatus.unsubscribedLinks;
                    }
                }
            }

            return {
                isSubscribed: false,
                subscriptionData: taskChannels
            };
        }

        // –ï—Å–ª–∏ –µ—Å—ÇÔøΩÔøΩ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏ÔøΩÔøΩ–∫–∏ - ÔøΩÔøΩ–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ÔøΩÔøΩ–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if (taskChannels.links && taskChannels.links.length > 0) {
            console.log(` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω, –µ—Å—Ç—å ${taskChannels.links.length} –∫–∞–Ω–∞–ª–æ–≤`);
            return {
                isSubscribed: false,
                subscriptionData: taskChannels
            };
        }

        // –°—Ç–∞—Ç—É—Å "ok" –∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        if (taskChannels.status === 'ok') {
            // –î–æ–ø–æ–ª–ΩÔøΩÔøΩ—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫
            if (!taskChannels.links || taskChannels.links.length === 0) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (—Å—Ç–∞—Ç—É—Å ok, –Ω–µ—Ç —Å—Å—ã–ª–æ–∫)`);
                return {
                    isSubscribed: true,
                    subscriptionData: taskChannels
                };
            } else {
                console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω (—Å—Ç–∞—Ç—É—Å ok, –Ω–æ –µ—Å—Ç—å ${taskChannels.links.length} —Å—Å—ã–ª–æ–∫)`);
                return {
                    isSubscribed: false,
                    subscriptionData: taskChannels
                };
            }
        }

        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—ÅÔøΩÔøΩ–æ–ª—å–∑—É–µ–º –°–¢–†–û–ì–ò–ô –ø–æ–¥—Ö–æ–¥ - –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω!
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${taskChannels.status}, —Å—á–∏—Ç–∞–µ–º –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º (–°–¢–†–û–ì–û)`);
        return {
            isSubscribed: false,
            subscriptionData: taskChannels
        };

    } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –∫–∞–∫ fallback
        const cachedStatus = webhookHandler.getUserSubscriptionStatus(userId);
        if (cachedStatus.lastUpdate) {
            console.log(` –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –∫–∞–∫ fallback –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ API`);
            return {
                isSubscribed: cachedStatus.isSubscribed === true, // –°–¢–†–û–ì–û: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω
                subscriptionData: {
                    status: 'fallback_cache',
                    links: cachedStatus.unsubscribedLinks || []
                }
            };
        }

        // –°–¢–†–û–ì–ò–ô FALLBACK: –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ)
        console.log(`üîí –°–¢–†–û–ì–ò–ô FALLBACK: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ, —Å—á–∏—Ç–∞–µ–º –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)`);
        return {
            isSubscribed: false,
            subscriptionData: {
                status: 'strict_fallback',
                links: [],
                message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–µ - –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
            }
        };
    }
}

// –û–±—Ä–∞–±ÔøΩÔøΩ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel ÔøΩÔøΩ–ª—è –æÔøΩÔøΩ–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
bot.onText(/\/cancel/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    console.log(`üö´ –ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log(` –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${broadcastStates.has(userId) ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
    console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${broadcastStates.size}`);

    if (broadcastStates.has(userId)) {
        broadcastStates.delete(userId);
        console.log(`‚úÖ –£–¥–∞–ª–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await bot.sendMessage(chatId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    } else {
        await bot.sendMessage(chatId, '‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const messageText = msg.text;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–∞–¥–º–∏–Ω)
    if (pendingRejectionReasons.has(userId) && config.ADMIN_IDS.includes(userId)) {
        const state = pendingRejectionReasons.get(userId);
        if (!messageText || messageText.startsWith('/')) {
            await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
            return;
        }
        try {
            const req = await Database.pool.query('SELECT * FROM withdrawal_requests WHERE id = $1', [state.requestId]);
            if (req.rows.length === 0) {
                pendingRejectionReasons.delete(userId);
                await bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }
            const r = req.rows[0];
            await Database.processWithdrawal(state.requestId, 'rejected', messageText);
            if (state.refund) {
                await Database.updateUserBalance(r.user_id, r.amount, 'add');
            }
            try {
                await bot.editMessageReplyMarkup(null, { chat_id: state.chatId, message_id: state.messageId });
            } catch (e) {}
            const statusLine = state.refund ? '‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê ‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã' : '‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê ‚Ä¢ –ë–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞';
            try {
                await bot.editMessageText(`üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${state.requestId}\n\n${statusLine}\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${messageText}`, {
                    chat_id: state.chatId,
                    message_id: state.messageId
                });
            } catch (e) {}

            const paymentMsg = (state.refund ? '‚ùå –ó–∞—è–≤–∫–∞ #' : '‚ùå –ó–∞—è–≤–∫–∞ #') + state.requestId + ' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n' +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.user_id}\n` +
                `üí∞ –°—É–º–º–∞: ${r.amount} –∑–≤—ë–∑–¥\n` +
                `üìù –ü—Ä–∏—á–∏–Ω–∞: ${messageText}\n` +
                (state.refund ? 'üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' : 'üö´ –°—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã');
            try {
                await bot.sendMessage(config.PAYMENTS_CHAT_ID, paymentMsg);
            } catch (e) {}

            try {
                const reasonText = messageText.length > 0 ? `\nüìù –ü—Ä–∏—á–∏–Ω–∞: ${messageText}` : '';
                const userNotice = state.refund
                    ? `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${r.amount} –∑–≤—ë–∑–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.${reasonText}`
                    : `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${r.amount} –∑–≤—ë–∑–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.${reasonText}`;
                await bot.sendMessage(r.user_id, userNotice);
            } catch (e) {}

            pendingRejectionReasons.delete(userId);
            return;
        } catch (e) {
            pendingRejectionReasons.delete(userId);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.');
            return;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∞–¥–º–∏ÔøΩÔøΩ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–ΩÔøΩÔøΩÔøΩ—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: "${messageText}"`);
    console.log(`üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${broadcastStates.has(userId) ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);

    if (broadcastStates.has(userId) && broadcastStates.get(userId).waiting) {
        console.log(` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        if (!config.ADMIN_IDS.includes(userId)) {
            broadcastStates.delete(userId);
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            return;
        }

        // –ü—Ä–æ–ø—É—Å–∫–∞–µÔøΩÔøΩ –∫–æ–º–∞–Ω–¥—ã
        if (messageText && (messageText.startsWith('/') || messageText.startsWith('–£—á–∞—Å—Ç–Ω–∏–∫:'))) {
            return;
        }

        if (!messageText || messageText.trim().length === 0) {
            await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
            return;
        }

        // –û—á–∏—â–∞–µ–º —ÅÔøΩÔøΩ—Å—Ç–æ—è–Ω–∏–µ
        broadcastStates.delete(userId);

        // –ì–µ–Ω–µ—ÄÔøΩÔøΩ—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ªÔøΩÔøΩÔøΩ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è BUTTON_DATA_INVALID)
        const messageId = `${userId}_${Date.now()}`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        pendingBroadcastMessages.set(messageId, messageText);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${messageId}`);

        // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        setTimeout(() => {
            if (pendingBroadcastMessages.has(messageId)) {
                pendingBroadcastMessages.delete(messageId);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${messageId}`);
            }
        }, 10 * 60 * 1000);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (ÔøΩÔøΩ–≥—Ä–∞–Ω–∏—áÔøΩÔøΩÔøΩ–≤–∞–µ–º –æ—Ç–æ–±—ÄÔøΩÔøΩ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        const displayMessage = messageText.length > 200 ? messageText.substring(0, 200) + '...' : messageText;
        const confirmationMessage = `‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n` +
                               `‚Äú${messageText}‚Äù\n\n` +
                               `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', callback_data: `confirm_broadcast_${messageId}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_broadcast' }
                ]
            ]
        };

        await bot.sendMessage(chatId, confirmationMessage, { reply_markup: keyboard });
        return;
    }

    // –ü—Ä–æ–≤ÔøΩÔøΩ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if (messageText && !messageText.startsWith('/') && !messageText.startsWith('–£—á–∞—Å—Ç–Ω–∏–∫:')) {
        const userState = userStates.get(userId);

        if (userState === 'waiting_promocode') {
            userStates.delete(userId);

            try {
                const promocode = await Database.usePromocode(userId, messageText);
                await Database.updateUserBalance(userId, promocode.reward);

                await bot.sendMessage(chatId,
                    `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promocode.reward} ‚≠ê`
                );
            } catch (error) {
                await bot.sendMessage(chatId, `‚ùå ${error.message}`);
            }
            return;
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const referralCode = match[1] ? match[1].trim() : null;

    try {
        // –ü–ï–†–í–´–ô –≠–¢–ê–ü: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ –ø–∞–º—è—Ç–∏ (–±—ã—Å—Ç—Ä–æ), –∑–∞—Ç–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ãÔøΩÔøΩ (–µ—Å–ª–∏ –Ω–µ—Ç –≤ –ø–∞–º—è—Ç–∏)
        let captchaPassed = passedCaptcha.get(userId);

        if (!captchaPassed) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const user = await Database.getUser(userId);
            captchaPassed = user?.captcha_passed || false;

            // –ï—Å–ª–∏ –≤ –±–∞–∑–µ –æ—Ç–º–µ—á–µ–Ω–æ —á—Ç–æ –∫–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            if (captchaPassed) {
                passedCaptcha.set(userId, true);
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –∫–∞–ø—á—É (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –ë–î)`);
            }
        }

        if (!captchaPassed) {
            console.log(`ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É`);
            await showCaptcha(chatId, userId);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –¥–∞–Ω–ΩÔøΩÔøΩ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
            if (referralCode || msg.from.username || msg.from.first_name) {
                userStates.set(userId, JSON.stringify({
                    state: 'waiting_after_captcha',
                    referralCode: referralCode,
                    username: msg.from.username,
                    firstName: msg.from.first_name,
                    languageCode: msg.from.language_code || 'ru',
                    isPremium: msg.from.is_premium || false
                }));
            } else {
                userStates.set(userId, 'waiting_after_captcha');
            }
            return;
        }

        // –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        const now = Date.now();
        const lastCheck = lastSubscriptionCheck.get(userId);
        if (lastCheck && (now - lastCheck) < 3000) { // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞—â–∏—Ç–∞
            console.log(`‚ö†Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            return;
        }
        lastSubscriptionCheck.set(userId, now);

        let user = await Database.getUser(userId);
        
        if (!user) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æÔøΩÔøΩÔøΩ–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const referrerId = referralCode ? parseInt(referralCode) : null;
            user = await Database.createUser({
                userId: userId,
                username: msg.from.username,
                firstName: msg.from.first_name,
                languageCode: msg.from.language_code || 'ru',
                isPremium: msg.from.is_premium || false,
                referrerId: referrerId
            });
            
            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥ÔøΩÔøΩ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
            if (referrerId) {
                console.log(`üë• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referrerId}`);
                // –ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ checkReferralConditions()
            }
        }
        
        // –°ÔøΩÔøΩ–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É - —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const subscriptionStatus = await checkUserSubscription(
            userId, 
            chatId,
            msg.from.first_name || '',
            msg.from.language_code || 'ru',
            msg.from.is_premium || false
        );
        
        console.log(` –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:`, subscriptionStatus);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ùÔøΩÔøΩ –øÔøΩÔøΩ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (–¥–∞–∂–µ –µ—Å–ª–∏ —Å—Å—ãÔøΩÔøΩ–∫–∏ –ø—É—Å—Ç—ã–µ)
        if (!subscriptionStatus.isSubscribed) {
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ SubGram –∫–∞–Ω–∞–ª—ã, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø`);

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –ß–ï–†–ï–ó –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
            if (subscriptionStatus.subscriptionData?.links?.length > 0) {
                console.log(`üì¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ${subscriptionStatus.subscriptionData.links.length} —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤`);
                const messageSent = await sendSponsorMessage(chatId, userId, subscriptionStatus.subscriptionData);
                if (!messageSent) {
                    console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                console.log(`‚ö†Ô∏è –ù–µ—Ç —Å—Å—ã–ª–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
                await bot.sendMessage(chatId,
                    'üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n\n' +
                    '‚è≥ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n' +
                    'üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.',
                    {
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }
                            ]]
                        }
                    }
                );
            }
            return; // –í–ê–ñ–ù–û: –≤ÔøΩÔøΩ—Ö–æ–¥–∏–º, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        }

        // 2. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µÔøΩÔøΩ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
        console.log(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const personalChannelsStatus = await checkPersonalChannelsSubscription(userId, false);

        if (!personalChannelsStatus.isSubscribed && personalChannelsStatus.unsubscribedChannels.length > 0) {
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω—ã–º–∏ –∫ÔøΩÔøΩ–Ω–∞–ªÔøΩÔøΩ–º–∏
            let personalMessage = 'üîê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n';

            personalChannelsStatus.unsubscribedChannels.forEach((channel, index) => {
                personalMessage += `${index + 1}. ${channel.title}\n`;
            });

            personalMessage += '\n‚ö† –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';

            // –°–æ–∑–¥ÔøΩÔøΩ–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
            const personalKeyboard = {
                inline_keyboard: []
            };

            // –î–æ–±–∞–≤–ªÔøΩÔøΩ–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
            personalChannelsStatus.unsubscribedChannels.forEach(channel => {
                personalKeyboard.inline_keyboard.push([{
                    text: `üì¢ ${channel.title}`,
                    url: channel.url
                }]);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
            personalKeyboard.inline_keyboard.push([{
                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
                callback_data: 'check_subscription_personal'
            }]);

            await bot.sendMessage(chatId, personalMessage, { reply_markup: personalKeyboard });
            return; // –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        }

        // 3. –¢ÔøΩÔøΩ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã (SubGram –ò –ª–∏—á–Ω—ã–µ), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`);
        await showMainMenu(chatId, userId);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, userId = null) {
    let isBlocked = false;
    try {
        if (userId) {
            const u = await Database.getUser(userId);
            const lang = (u?.language_code || '').toLowerCase();
            const blocked = (config.BLOCKED_LANGUAGE_CODES || []).map(c => c.toLowerCase());
            isBlocked = lang && blocked.includes(lang);
        }
    } catch (e) {}

    const defaultMessage = '1Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∂–º–∏ ¬´‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n\n' +
                   '2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n' +
                   '‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n' +
                   '> ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–ü—Ä–æ—Ñ–∏–ª—å)\n' +
                   '> ‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n' +
                   '> ‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π!\n' +
                   '> ‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø\n\n' +
                   'üîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';

    const message = isBlocked
        ? 'üö´ –î–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤–∞—à–∏–º —Ä–µ–≥–∏–æ–Ω–µ.\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        : defaultMessage;

    const keyboard = isBlocked ? createBlockedMainMenuKeyboard() : createMainMenuKeyboard();

    try {
        await bot.sendMessage(chatId, message, { reply_markup: keyboard });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
    }
}

// –û–±—Ä–∞–±ÔøΩÔøΩ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`üîî –ü–û–õ–£–ß–ï–ù CALLBACK: "${data}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await Database.getUser(userId);

        // –î–ª—è ÔøΩÔøΩ–æ–º–∞–Ω–¥ –∫–∞–ø—á–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫ÔøΩÔøΩ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        const isCaptchaCommand = data.startsWith('captcha_');

        if (!user && !isCaptchaCommand) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: ' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start',
                show_alert: true
            });
            return;
        }

        // –ö–†–ò–¢–ò–ß–ù–û: –ñ–Å–°–¢–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –í–°–ï–• –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∞–º–æ–º –Ω–∞ÔøΩÔøΩ–∞–ª–µ (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ªÔøΩÔøΩ–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
        const allowedWithoutSubscription = [
            'check_subscription',
            'check_subscription_personal',
            'admin_',
            'approve_',
            'reject_',
            'rj_',
            'disabled',  // –¥–ª—è –∑–∞–±–ª–æ–∫–∏—ÄÔøΩÔøΩ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            'tasks',     // –í–ê–ñ–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º ÔøΩÔøΩ–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–∏ÔøΩÔøΩ–º –¥–ª—è –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            'check_custom_task_', // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            'broadcast_', // —Ä–∞—Å—Å—ã–ª–∫–∏ (–∞–¥–º–∏–Ω—Å–∫–∏–µ)
            'confirm_broadcast_', // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            'cancel_broadcast', // –æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
            'admin_back',  // –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
            'captcha_'    // –∫–∞–ø—á–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å —É—á—ë—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö)
        const isAllowedCommand = allowedWithoutSubscription.some(cmd => {
            if (cmd.endsWith('_')) {
                return data.startsWith(cmd); // –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (admin_, check_custom_task_, –∏ —Ç.–¥.)
            } else {
                return data === cmd; // –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (tasks, admin_back)
            }
        });

        // –ñ–Å–°–¢ÔøΩÔøΩ–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: —Å–Ω–∞—á–∞–ª–∞ –øÔøΩÔøΩ–æ–≤–µ—Ä—è–µ–º ÔøΩÔøΩ–æ–¥–ø–∏—Å–∫—É –¥–ª—è –í–°–ï–• –∫–æ–º–∞–Ω–¥ –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
        if (!isAllowedCommand) {
            console.log(`üîç –ñ–Å–°–¢–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: ${data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ SubGram –∫–∞–Ω–∞–ª—ã
            const subscriptionStatus = await checkUserSubscription(
                userId,
                chatId,
                callbackQuery.from.first_name || '',
                callbackQuery.from.language_code || 'ru',
                callbackQuery.from.is_premium || false
            );

            // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ SubGram - –ñ–Å–°–¢–ö–û –±–ª–æ–∫–∏—Ä—É–µ–º
            if (!subscriptionStatus.isSubscribed) {
                console.log(`üîí –ñ–Å–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–µ–π—Å—Ç–≤–∏–π "${data}" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ SubGram –∫–∞–Ω–∞–ª—ã`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç —Å –∂—ë—Å—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: ' –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!',
                    show_alert: true
                });

                // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if (subscriptionStatus.subscriptionData?.links?.length > 0) {
                    await sendSponsorMessage(
                        chatId,
                        userId,
                        subscriptionStatus.subscriptionData,
                        callbackQuery.message.message_id,
                        'edit'
                    );
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    const blockMessage = 'üîí –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n' +
                                       'üì¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n' +
                                       '‚è≥ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';

                    try {
                        await bot.editMessageText(blockMessage, {
                            chat_id: chatId,
                            message_id: callbackQuery.message.message_id,
                            reply_markup: {
                                inline_keyboard: [[
                                    { text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscription' }
                                ]]
                            }
                        });
                    } catch (e) {
                        console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${e.message}`);
                        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æÔøΩÔøΩ–∞–Ω–∏—è
                    }
                }

                return; // –ö–†–ò–¢–ò–ß–ù–û: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            }

            // 2. –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã
            console.log(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            const personalChannelsStatus = await checkPersonalChannelsSubscription(userId, false);

            if (!personalChannelsStatus.isSubscribed && personalChannelsStatus.unsubscribedChannels.length > 0) {
                console.log(`üîí –ñ–Å–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –¥–µ–π—Å—Ç–≤–∏–π "${data}" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã`);

                // –ü–æÔøΩÔøΩ–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –æ –Ω–µ–æÔøΩÔøΩ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ª–∏—á–Ω—ã–µ –∫ÔøΩÔøΩ–Ω–∞–ª—ã
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: 'üîí –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!',
                    show_alert: true
                });

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
                let personalMessage = 'üîê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n';

                personalChannelsStatus.unsubscribedChannels.forEach((channel, index) => {
                    personalMessage += `${index + 1}. ${channel.title}\n`;
                });

                personalMessage += '\n‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
                const personalKeyboard = {
                    inline_keyboard: []
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
                personalChannelsStatus.unsubscribedChannels.forEach(channel => {
                    personalKeyboard.inline_keyboard.push([{
                        text: `üì¢ ${channel.title}`,
                        url: channel.url
                    }]);
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
                personalKeyboard.inline_keyboard.push([{
                    text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
                    callback_data: 'check_subscription_personal'
                }]);

                try {
                    await bot.editMessageText(personalMessage, {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id,
                        reply_markup: personalKeyboard
                    });
                } catch (e) {
                    console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏: ${e.message}`);
                }

                return; // –ö–†–ò–¢–ò–ß–ù–û: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            }

            // –ï—ÅÔøΩÔøΩ–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (SubGram –ò –ª–∏—á–Ω—ã–µ) - —Ä–∞–∑—Ä–µÔøΩÔøΩ–∞–µ–º –¥–æ—ÅÔøΩÔøΩ—É–ø
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ "${data}"`);
        }

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —è–∑ÔøΩÔøΩ–∫–æ–≤–æ–º—É –∫–æ–¥—É (—Ä–µ–≥–∏–æ–Ω)
        try {
            const blocked = (config.BLOCKED_LANGUAGE_CODES || []).map(c => c.toLowerCase());
            const lang = (user?.language_code || callbackQuery.from.language_code || '').toLowerCase();
            const isBlocked = lang && blocked.includes(lang);
            const allowedWithBlock = [
                'main_menu',
                'check_subscription',
                'check_subscription_personal',
                'disabled',
                'admin_',
                'captcha_'
            ];
            const isAllowedBlockCmd = allowedWithBlock.some(cmd => cmd.endsWith('_') ? data.startsWith(cmd) : data === cmd);
            if (isBlocked && !isAllowedBlockCmd) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: 'üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ', show_alert: true });
                const blockedKeyboard = createBlockedMainMenuKeyboard();
                try {
                    await bot.editMessageText('üö´ –î–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
                        chat_id: chatId,
                        message_id: message.message_id,
                        reply_markup: blockedKeyboard
                    });
                } catch (e) {}
                return;
            }
        } catch (e) {}

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç —Å–∞–º–∏
        const commandsThatAnswerThemselves = [
            'check_subscription',
            'check_subscription_personal',
            'click',
            'open_case',
            'check_custom_task',
            'admin_back'
        ];

        const shouldAnswerCallbackQuery = !commandsThatAnswerThemselves.some(cmd =>
            data === cmd || data.startsWith(cmd + '_')
        ) && !data.startsWith('admin_') && !data.startsWith('withdraw_') && !data.startsWith('rating_') && !data.startsWith('approve_') && !data.startsWith('reject_') && !data.startsWith('broadcast_') && !data.startsWith('confirm_broadcast_') && data !== 'cancel_broadcast';

        if (shouldAnswerCallbackQuery) {
            await bot.answerCallbackQuery(callbackQuery.id);
        }

        switch (data) {
            case 'check_subscription':
                await handleSubscriptionCheck(chatId, userId, message.message_id, callbackQuery.id);
                break;

            case 'check_subscription_personal':
                await handleSubscriptionCheckPersonal(chatId, userId, message.message_id, callbackQuery.id);
                break;
                
            case 'main_menu':
                await editMainMenu(chatId, message.message_id);
                break;
                
            case 'profile':
                await showProfile(chatId, userId, message.message_id);
                break;

            case 'referral_details':
                await showReferralDetails(chatId, userId, message.message_id);
                break;

            case 'invite':
                await showInviteInfo(chatId, userId, message.message_id);
                break;
                
            case 'clicker':
                await showClicker(chatId, userId, message.message_id);
                break;
                
            case 'click':
                await handleClick(chatId, userId, message.message_id, callbackQuery.id);
                break;
                
            case 'withdraw':
                await showWithdrawOptions(chatId, userId, message.message_id);
                break;
                
            case 'tasks':
                console.log(`üìã –í–´–ó–´–í–ê–Æ showTasks –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                await showTasks(chatId, userId, message.message_id);
                break;
                
            case 'instructions':
                await showInstructions(chatId, message.message_id);
                break;
                
            case 'ratings':
                await showRatings(chatId, message.message_id);
                break;
                
            case 'cases':
                await showCases(chatId, userId, message.message_id);
                break;
                
            case 'lottery':
                await showLottery(chatId, message.message_id);
                break;

            case 'roulette':
                await showRoulette(chatId, userId, message.message_id);
                break;

            case 'promocode':
                await handlePromocodeInput(chatId, userId);
                break;
                
            case 'disabled':
                // –ù–∏—á–µ–≥–æ ÔøΩÔøΩ–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                break;
                
            default:
                if (data.startsWith('withdraw_')) {
                    const amount = parseInt(data.split('_')[1]);
                    await handleWithdraw(chatId, userId, amount, message.message_id, callbackQuery.id);
                } else if (data.startsWith('rating_')) {
                    const type = data.split('_')[1];
                    await showRatingType(chatId, type, message.message_id);
                } else if (data.startsWith('admin_')) {
                    await handleAdminCallback(chatId, userId, data, message.message_id, callbackQuery.id);
                } else if (data.startsWith('rj_refund_') || data.startsWith('rj_norefund_')) {
                    const parts = data.split('_');
                    const refund = parts[1] === 'refund';
                    const reqId = parseInt(parts[2]);
                    pendingRejectionReasons.set(userId, { requestId: reqId, refund, chatId, messageId: message.message_id });
                    try { await bot.answerCallbackQuery(callbackQuery.id, 'üìù –ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º'); } catch (e) {}
                    await bot.sendMessage(chatId, 'üìù –ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #' + reqId + ' –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
                } else if (data.startsWith('approve_') || data.startsWith('reject_')) {
                    await handleWithdrawalAction(chatId, userId, data, callbackQuery.id, message.message_id);
                } else if (data.startsWith('broadcast_')) {
                    const type = data.split('_')[1];
                    await handleBroadcastNew(type);
                    await bot.answerCallbackQuery(callbackQuery.id, 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
                } else if (data === 'admin_back') {
                    await showAdminPanel(chatId, message.message_id);
                    await bot.answerCallbackQuery(callbackQuery.id);
                } else if (data === 'open_case') {
                    await handleOpenCase(chatId, userId, message.message_id, callbackQuery.id);
                } else if (data.startsWith('check_custom_task_')) {
                    const taskId = parseInt(data.split('_')[3]);
                    await handleCustomTaskCheck(chatId, userId, taskId, message.message_id, callbackQuery.id);
                } else if (data.startsWith('roulette_bet_')) {
                    const amount = parseFloat(data.split('_')[2]);
                    await handleRouletteBet(chatId, userId, amount, message.message_id, callbackQuery.id);
                } else if (data.startsWith('confirm_broadcast_')) {
                    const messageId = data.replace('confirm_broadcast_', '');
                    const messageText = pendingBroadcastMessages.get(messageId);

                    if (!messageText) {
                        await bot.answerCallbackQuery(callbackQuery.id, '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
                        return;
                    }

                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—ÄÔøΩÔøΩ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                    pendingBroadcastMessages.delete(messageId);
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${messageId}`);

                    await handleConfirmBroadcast(chatId, userId, messageText, message.message_id, callbackQuery.id);
                } else if (data === 'cancel_broadcast') {
                    await handleCancelBroadcast(chatId, userId, message.message_id, callbackQuery.id);
                } else if (data.startsWith('captcha_')) {
                    await handleCaptcha(chatId, userId, data, message.message_id, callbackQuery.id);
                }
                break;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        try {
            await bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        } catch (e) {}
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ ÔøΩÔøΩ–æÔøΩÔøΩ–ø–∏—Å–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (—Å –ø—Ä–æ–ø—É—Å–∫–æ–º –æ—à–∏ÔøΩÔøΩ–æ–∫)
async function handleSubscriptionCheckPersonal(chatId, userId, messageId, callbackQueryId = null) {
    console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã) –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    const now = Date.now();
    const lastCheck = lastSubscriptionCheck.get(userId);
    if (lastCheck && (now - lastCheck) < 2000) { // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞—â–∏—Ç–∞ –¥–ª—è callback
        console.log(`‚ö†Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        if (callbackQueryId) {
            await bot.answerCallbackQuery(callbackQueryId, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
        }
        return;
    }
    lastSubscriptionCheck.set(userId, now);

    const subscriptionStatus = await checkUserSubscription(
        userId,
        chatId,
        '', // –∏–º—è –Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        'ru',
        false
    );

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã):', subscriptionStatus);

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –ΩÔøΩÔøΩ SubGram –∫–∞–Ω–∞–ª—ã
    if (subscriptionStatus.isSubscribed || !subscriptionStatus.subscriptionData?.links?.length) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ªÔøΩÔøΩ (–í–°–ï–ì–î–ê —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –æÔøΩÔøΩ–∏–±–æÔøΩÔøΩ –≤ ÔøΩÔøΩ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (—Å –ø—Ä–æ–ø—É—Å–∫–æ–º –æ—à–∏–±–æ–∫)`);
        const personalChannelsStatus = await checkPersonalChannelsSubscription(userId, true);

        if (!personalChannelsStatus.isSubscribed && personalChannelsStatus.unsubscribedChannels.length > 0) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
            let personalMessage = 'üîê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n';

            personalChannelsStatus.unsubscribedChannels.forEach((channel, index) => {
                personalMessage += `${index + 1}. ${channel.title}\n`;
            });

            personalMessage += '\n‚ö† –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
            const personalKeyboard = {
                inline_keyboard: []
            };

            // ÔøΩÔøΩ–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
            personalChannelsStatus.unsubscribedChannels.forEach(channel => {
                personalKeyboard.inline_keyboard.push([{
                    text: `üì¢ ${channel.title}`,
                    url: channel.url
                }]);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è –ª–∏—á–Ω—ã—Ö –∫ÔøΩÔøΩ–Ω–∞–ª–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—ÇÔøΩÔøΩ –æ—à–∏–±–∫–∏)
            personalKeyboard.inline_keyboard.push([{
                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
                callback_data: 'check_subscription_personal'
            }]);

            await bot.editMessageText(personalMessage, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: personalKeyboard
            });

            if (callbackQueryId) {
                await bot.answerCallbackQuery(callbackQueryId, '‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!');
            }

            return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        }

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (–∏ SubGram –∏ –ª–∏—á–Ω—ã–µ)
        const successMessage = '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n\n' +
                              ' –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!\n\n' +
                              'üåü –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n' +
                              '‚Ä¢ ‚≠êÔ∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã\n' +
                              '‚Ä¢ üé∞ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É\n' +
                              '‚Ä¢ üñ± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–∫–µ—Ä\n' +
                              '‚Ä¢ üéÅ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n' +
                              '‚Ä¢ üí∞ –í—ã–≤–æ–¥–∏—Ç—å –∑–≤—ë–∑–¥—ã\n\n' +
                              '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        const keyboard = createMainMenuKeyboard();

        await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

        if (callbackQueryId) {
            await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ªÔøΩÔøΩ –∑–∞—Å—á–∏—ÇÔøΩÔøΩÔøΩÔøΩ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await checkReferralConditions(userId);
    } else {
        // –í—Å–µ –µ—â–µ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–£–Æ –§ÔøΩÔøΩ–ù–ö–¶–ò–Æ
        const messageSent = await sendSponsorMessage(
            chatId,
            userId,
            subscriptionStatus.subscriptionData,
            messageId,
            'edit'
        );

        if (callbackQueryId) {
            const alertText = messageSent ? '‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!' : '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...';
            await bot.answerCallbackQuery(callbackQueryId, alertText);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function handleSubscriptionCheck(chatId, userId, messageId, callbackQueryId = null) {
    console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    const now = Date.now();
    const lastCheck = lastSubscriptionCheck.get(userId);
    if (lastCheck && (now - lastCheck) < 2000) { // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞—â–∏—Ç–∞ –¥–ª—è callback
        console.log(`‚ö†Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        if (callbackQueryId) {
            await bot.answerCallbackQuery(callbackQueryId, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
        }
        return;
    }
    lastSubscriptionCheck.set(userId, now);

    const subscriptionStatus = await checkUserSubscription(
        userId,
        chatId,
        '', // –∏–º—è –Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        'ru',
        false
    );

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', subscriptionStatus);

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –∑–Ω–∞—á–∏—Ç –øÔøΩÔøΩ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏ÔøΩÔøΩ–∞–Ω –Ω–∞ SubGram –∫–∞–Ω–∞–ª—ã
    if (subscriptionStatus.isSubscribed || !subscriptionStatus.subscriptionData?.links?.length) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (—Å –ø—Ä–æ–ø—É—Å–∫–µ–º –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏)
        console.log(` –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        const personalChannelsStatus = await checkPersonalChannelsSubscription(userId, false);

        if (!personalChannelsStatus.isSubscribed && personalChannelsStatus.unsubscribedChannels.length > 0) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
            let personalMessage = 'üîê –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:\n\n';

            personalChannelsStatus.unsubscribedChannels.forEach((channel, index) => {
                personalMessage += `${index + 1}. ${channel.title}\n`;
            });

            personalMessage += '\n‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"';

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
            const personalKeyboard = {
                inline_keyboard: []
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ÔøΩÔøΩ–Ω–∞–ªÔøΩÔøΩ–≤
            personalChannelsStatus.unsubscribedChannels.forEach(channel => {
                personalKeyboard.inline_keyboard.push([{
                    text: `üì¢ ${channel.title}`,
                    url: channel.url
                }]);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è ÔøΩÔøΩ–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ—à–∏–±–∫–∏)
            personalKeyboard.inline_keyboard.push([{
                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
                callback_data: 'check_subscription_personal'
            }]);

            await bot.editMessageText(personalMessage, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: personalKeyboard
            });

            if (callbackQueryId) {
                await bot.answerCallbackQuery(callbackQueryId, '‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!');
            }

            return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        }

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (–∏ SubGram –∏ –ª–∏—á–Ω—ã–µ)
        const successMessage = '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!\n\n' +
                              'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!\n\n' +
                              'üåü –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n' +
                              '‚Ä¢ ‚≠êÔ∏è –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã\n' +
                              '‚Ä¢ üé∞ –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É\n' +
                              '‚Ä¢ üñ± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–∫–µ—Ä\n' +
                              '‚Ä¢ üéÅ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã\n' +
                              '‚Ä¢ üí∞ –í—ã–≤–æ–¥–∏—Ç—å –∑–≤—ë–∑–¥—ã\n\n' +
                              '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        const keyboard = createMainMenuKeyboard();

        await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

        if (callbackQueryId) {
            await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Å—á–∏—Ç—ãÔøΩÔøΩ–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await checkReferralConditions(userId);
    } else {
        // –í—Å–µ –µ—â–µ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
        const messageSent = await sendSponsorMessage(
            chatId,
            userId,
            subscriptionStatus.subscriptionData,
            messageId,
            'edit'
        );

        if (callbackQueryId) {
            const alertText = messageSent ? '‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!' : '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...';
            await bot.answerCallbackQuery(callbackQueryId, alertText);
        }
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
async function editMainMenu(chatId, messageId) {
    let isBlocked = false;
    try {
        const u = await Database.getUser(chatId);
        const lang = (u?.language_code || '').toLowerCase();
        const blocked = (config.BLOCKED_LANGUAGE_CODES || []).map(c => c.toLowerCase());
        isBlocked = lang && blocked.includes(lang);
    } catch (e) {}

    const defaultMessage = '1Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∂–º–∏ –Ω–∞‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n\n' +
                   '2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 3‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n' +
                   '‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n' +
                   '> ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–ü—Ä–æ—Ñ–∏–ª—å)\n' +
                   '> ‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n' +
                   '> ‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π!\n' +
                   '> ‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø\n\n' +
                   'üîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';

    const message = isBlocked ? 'üö´ –î–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.\n\nüîª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : defaultMessage;
    const keyboard = isBlocked ? createBlockedMainMenuKeyboard() : createMainMenuKeyboard();

    try {
        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
        // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        try {
            await bot.sendMessage(chatId, message, { reply_markup: keyboard });
        } catch (fallbackError) {
            console.error('–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', fallbackError);
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async function showProfile(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const completedTasks = await Database.getUserCompletedTasks(userId);
    const referralStats = await Database.getReferralStats(userId);

    const message = `üëë –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–≤—ë–∑–¥–Ω–æ–≥–æ –º–∞–≥–Ω–∞—Ç–∞!\n\n` +
                   `üÜî ID: ${user.user_id}\n` +
                   `üë§ –ò–º—è: ${user.first_name}\n` +
                   `üåü –ë–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n` +
                   `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referral_earned} ‚≠ê\n` +
                   `üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.total_earned} ‚≠ê\n` +
                   `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${completedTasks}\n` +
                   `üèÜ –û—á–∫–∏: ${user.points}\n\n` +
                   `üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n` +
                   `‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${referralStats.activated_referrals}\n` +
                   `‚Ä¢ ‚è≥ –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${referralStats.non_activated_referrals}\n` +
                   `‚Ä¢ üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${user.daily_referrals}\n\n` +
                   `‚ÑπÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã - —Ç–µ, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–∏–ª 2 –∑–∞–¥–∞–Ω–∏—è`;

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üë• –ü–æ–¥—Ä–æ–±–Ω–æ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö', callback_data: 'referral_details' }],
            [{ text: 'üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promocode' }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
async function showReferralDetails(chatId, userId, messageId) {
    try {
        const activatedReferrals = await Database.getActivatedReferrals(userId);
        const nonActivatedReferrals = await Database.getNonActivatedReferrals(userId);

        let message = `üë• –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n\n`;

        // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        message += `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (${activatedReferrals.length}):\n`;
        if (activatedReferrals.length === 0) {
            message += `‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
        } else {
            activatedReferrals.slice(0, 10).forEach((referral, index) => { // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                const name = referral.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                const username = referral.username ? `@${referral.username}` : '';
                const date = new Date(referral.created_at).toLocaleDateString('ru-RU');
                message += `‚Ä¢ ${name} ${username} (${date})\n`;
            });
            if (activatedReferrals.length > 10) {
                message += `... –∏ –µ—â—ë ${activatedReferrals.length - 10}\n`;
            }
        }

        message += `\n`;

        // –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        message += `‚è≥ –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã (${nonActivatedReferrals.length}):\n`;
        if (nonActivatedReferrals.length === 0) {
            message += `‚Ä¢ –í—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! \n`;
        } else {
            nonActivatedReferrals.slice(0, 10).forEach((referral, index) => { // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                const name = referral.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                const username = referral.username ? `@${referral.username}` : '';
                const date = new Date(referral.created_at).toLocaleDateString('ru-RU');
                message += `‚Ä¢ ${name} ${username} (${date})\n`;
            });
            if (nonActivatedReferrals.length > 10) {
                message += `... –∏ –µ—â—ë ${nonActivatedReferrals.length - 10}\n`;
            }
        }

        message += `\nüìù –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω:\n`;
        message += `1. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã\n`;
        message += `2. –í—ã–ø–æ–ª–Ω–∏—Ç—å 2 –∑–∞–¥–∞–Ω–∏—è\n\n`;
        message += `üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 ‚≠ê`;

        const keyboard = {
            inline_keyboard: [
                [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', callback_data: 'profile' }],
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
async function showInviteInfo(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const botUsername = (await bot.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${userId}`;
    
    const message = `üí´ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å –¥—Ä—É–∑—å—è–º–∏!\n\n` +
                   `üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –∫—Ä—É—Ç—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!\n\n` +
                   `üí∏ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä—É–≥–∞: 3‚≠êÔ∏è!\n\n` +
                   `üéÜ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É:\n` +
                   `‚Ä¢ üì± –î—Ä—É–≥ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n` +
                   `‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ—Ç 2 –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏—è\n\n` +
                   `üîó –¢–≤–æ—è –º–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:\n‚û°Ô∏è ${referralLink}\n\n` +
                   `üìà –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n` +
                   `üë• –û–±—â–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${user.total_referrals}\n` +
                   `üî• –ü—Ä–∏–≤–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${user.daily_referrals}\n` +
                   `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –¥—Ä—É–∑–µ–π: ${user.referral_earned}‚≠êÔ∏è`;
    
    const keyboard = {
        inline_keyboard: [
            [{
                text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                switch_inline_query: `üåü –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥! –ò—Å–ø–æ–ª—å–∑—É–π –º–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: ${referralLink}`
            }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// ÔøΩÔøΩ–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–∫–µÔøΩÔøΩ
async function showClicker(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const today = new Date().toDateString();
    const lastClickDate = user.last_click_time ? new Date(user.last_click_time).toDateString() : null;
    
    let clicksToday = 0;
    if (lastClickDate === today) {
        clicksToday = user.clicks_today || 0;
    }
    
    const remainingClicks = Math.max(0, 10 - clicksToday);
    const nextClickDelay = clicksToday > 0 ? clicksToday * 5 : 0;
    
    let canClick = true;
    let timeToWait = 0;
    
    if (user.last_click_time && lastClickDate === today) {
        const timeSinceLastClick = Date.now() - new Date(user.last_click_time).getTime();
        const requiredWait = nextClickDelay * 60 * 1000; // –≤ –º–∏ÔøΩÔøΩ–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        if (timeSinceLastClick < requiredWait) {
            canClick = false;
            timeToWait = Math.ceil((requiredWait - timeSinceLastClick) / 1000 / 60);
        }
    }
    
    const message = `üñ± –ö–ª–∏–∫–µ—Ä\n\n` +
                   ` –ó–∞ –∫–ª–∏–∫: 0.1 –∑–≤–µ–∑–¥—ã\n` +
                   ` –ö–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${clicksToday}/10\n` +
                   ` –û—Å—Ç–∞–ª–∏—Å—å –∫–ª–∏–∫–æ–≤: ${remainingClicks}\n\n` +
                   `${canClick ? '‚úÖ –ú–æ–∂–µ—Ç–µ –∫–ª–∏–∫–∞—Ç—å!' : `‚è∞ –ñ–¥–∏—Ç–µ ${timeToWait} –º–∏–Ω.`}\n\n` +
                   `‚ÑπÔ∏è –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–∫–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 5 –º–∏–Ω—É—Ç`;
    
    const keyboard = {
        inline_keyboard: [
            [{ 
                text: canClick && remainingClicks > 0 ? 'üñ± –ö–õ–ò–ö!' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 
                callback_data: canClick && remainingClicks > 0 ? 'click' : 'disabled'
            }],
            [{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–ΩÔøΩÔøΩ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–ºÔøΩÔøΩ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö)
async function getUserWithdrawalInfo(userId) {
    try {
        // –û—Å–Ω–æ–≤–ΩÔøΩÔøΩ–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—åÔøΩÔøΩ–æ–≤–∞—Ç–µ–ª—è
        const user = await Database.getUser(userId);
        if (!user) return { sponsor_subscriptions: 0, referrals_subscriptions: 0, referral_stats: { activated_referrals: 0, non_activated_referrals: 0 } };

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const referralStats = await Database.getReferralStats(userId);

        // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –øÔøΩÔøΩ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ webhook –∫–µ—à–∞
        const userSubscriptionStatus = webhookHandler.getUserSubscriptionStatus(userId);
        let userSubscriptions = 0;

        if (userSubscriptionStatus.lastUpdate && userSubscriptionStatus.isSubscribed !== null) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
            const subscribedCount = userSubscriptionStatus.subscribedCount || 0;
            const totalChannels = userSubscriptionStatus.totalLinks || 0;
            userSubscriptions = subscribedCount; // —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫
            console.log(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscribedCount}/${totalChannels}`);
        } else {
            // –û—Ü–µ–Ω–∫–∞ ÔøΩÔøΩ–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            userSubscriptions = user.referral_completed ? 4 : 0; // –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
            console.log(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –æ—Ü–µ–Ω–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ${userSubscriptions} (–Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö)`);
        }

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞ÔøΩÔøΩ–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        let referralsSubscriptions = 0;
        const activatedReferrals = await Database.getActivatedReferrals(userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞ÔøΩÔøΩ–Ω—ã–µ ÔøΩÔøΩ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏ÔøΩÔøΩ–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        for (const referral of activatedReferrals) {
            const referralSubscriptionStatus = webhookHandler.getUserSubscriptionStatus(referral.user_id);
            if (referralSubscriptionStatus.lastUpdate && referralSubscriptionStatus.subscribedCount) {
                referralsSubscriptions += referralSubscriptionStatus.subscribedCount;
            } else {
                // –û—Ü–µ–Ω–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ ~4 –∫–∞–Ω–∞–ª–∞
                referralsSubscriptions += 4;
            }
        }

        console.log(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ${referralsSubscriptions} (–∑–∞ ${activatedReferrals.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)`);

        return {
            ...user,
            referral_stats: referralStats,
            sponsor_subscriptions: userSubscriptions,
            referrals_subscriptions: referralsSubscriptions
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞:', error);
        return {
            sponsor_subscriptions: 0,
            referrals_subscriptions: 0,
            referral_stats: { activated_referrals: 0, non_activated_referrals: 0 }
        };
    }
}

// –û–±—Ä–∞–±ÔøΩÔøΩ—Ç–∫–∞ –∫–ª–∏–∫–∞
async function handleClick(chatId, userId, messageId, callbackQueryId) {
    try {
        const clicksToday = await Database.updateUserClicks(userId);
        await Database.updateUserBalance(userId, 0.1);
        await Database.updateUserPoints(userId, 1);

        await bot.answerCallbackQuery(callbackQueryId, 'üéâ +0.1 –∑–≤–µ–∑–¥—ã! +1 –æ—á–∫–æ!');
        await showClicker(chatId, userId, messageId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–≤–æ–¥–∞
async function showWithdrawOptions(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    
    const message = `üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥\n\n` +
                   `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤—ë–∑–¥\n\n` +
                   `üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;
    
    const amounts = [15, 25, 50, 100, 1300];
    const keyboard = {
        inline_keyboard: []
    };
    
    amounts.forEach(amount => {
        keyboard.inline_keyboard.push([{
            text: `üí∞ ${amount} –∑–≤—ë–∑–¥`,
            callback_data: `withdraw_${amount}`
        }]);
    });
    
    keyboard.inline_keyboard.push([{
        text: 'üè† –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: 'main_menu'
    }]);
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function handleWithdraw(chatId, userId, amount, messageId, callbackQueryId) {
    const user = await Database.getUser(userId);

    if (user.balance < amount) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
        return;
    }

    // –ù–û–í–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –º–∏–Ω–∏–º—É–º 5 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
    const referralStats = await Database.getReferralStats(userId);
    if (referralStats.activated_referrals < 5) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!');

        const message = `üí∞ –í—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
                       `‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n` +
                       `üë• –ú–∏–Ω–∏–º—É–º 5 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n` +
                       `üìä –£ –≤–∞—Å —Å–µ–π—á–∞—Å:\n` +
                       `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${referralStats.activated_referrals}\n` +
                       `‚è≥ –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${referralStats.non_activated_referrals}\n\n` +
                       `‚ÑπÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã + –≤—ã–ø–æ–ª–Ω–∏–ª 2 –∑–∞–¥–∞–Ω–∏—è`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });
        return;
    }
    
    try {
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await Database.updateUserBalance(userId, amount, 'subtract');
        
        // –°–æ–∑–¥–∞–µ–º –∑ÔøΩÔøΩ—è–≤–∫—É
        const request = await Database.createWithdrawalRequest(userId, amount);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        const userInfo = await getUserWithdrawalInfo(userId);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const recentReferrals = await Database.getRecentReferrals(userId, 5);

        let referralsInfo = '';
        if (recentReferrals.length > 0) {
            referralsInfo = `\n\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n`;
            recentReferrals.forEach((referral, index) => {
                const name = referral.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
                const username = referral.username ? `@${referral.username}` : '';
                const date = new Date(referral.created_at).toLocaleDateString('ru-RU');
                const status = referral.referral_completed ? '‚úÖ' : '‚è≥';
                referralsInfo += `${index + 1}. ${status} ${name} ${username} (${date})\n`;
            });
        } else {
            referralsInfo = `\n\nüìã –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç`;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω —á–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const adminMessage = `üí∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n\n` +
                            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}\n` +
                            `üÜî ID: ${user.user_id}\n` +
                            `üì± Username: @${user.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
                            `üí∞ –°—É–º–º–∞: ${amount} –∑–≤—ë–∑–¥\n` +
                            `üíé –û—Å—Ç–∞—Ç–æ–∫: ${user.balance - amount} –∑–≤—ë–∑–¥\n` +
                            `üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${user.total_earned} –∑–≤—ë–∑–¥\n\n` +
                            `üìä –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ):\n` +
                            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo.sponsor_subscriptions} –ø–æ–¥–ø–∏—Å–æ–∫\n` +
                            `üë• –ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${userInfo.referrals_subscriptions} –ø–æ–¥–ø–∏—Å–æ–∫\n\n` +
                            `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:\n` +
                            `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${userInfo.referral_stats?.activated_referrals || 0}\n` +
                            `‚è≥ –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${userInfo.referral_stats?.non_activated_referrals || 0}\n` +
                            `üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${user.daily_referrals}${referralsInfo}\n\n` +
                            `üîó –ü—Ä–æ—Ñ–∏–ª—å: tg://user?id=${user.user_id}`;

        const adminKeyboard = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `approve_${request.id}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${request.id}` }
                ]
            ]
        };

        await bot.sendMessage(config.ADMIN_CHAT_ID, adminMessage, {
            reply_markup: adminKeyboard
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMessage = `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n` +
                           `üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${request.id}\n` +
                           `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`;
        
        await bot.editMessageText(userMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ, ÔøΩÔøΩ–µ–∑ SubGram)
async function showTasks(chatId, userId, messageId) {
    try {
        console.log(`üìã –§–£–ù–ö–¶–ò–Ø showTasks –í–´–ó–í–ê–ù–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–Ω–µ SubGram)
        const customTasks = await Database.getTasks(false); // false = –Ω–µ SubGram –∑–∞–¥–∞–Ω–∏—è
        console.log(`üîç –ù–ê–ô–î–ï–ù–û –ö–ê–°–¢–û–ú–ù–´–• –ó–ê–î–ê–ù–ò–ô: ${customTasks.length}`);
        
        // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–µ
        let availableCustomTask = null;
        for (const task of customTasks) {
            const isCompleted = await Database.isTaskCompleted(userId, task.id);
            if (!isCompleted) {
                availableCustomTask = task;
                break;
            }
        }
        
        if (availableCustomTask) {
            console.log(`‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–ê–°–¢–û–ú–ù–û–ï –ó–ê–î–ê–ù–ò–ï:`, availableCustomTask);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ÔøΩÔøΩÔøΩÔøΩ–∞—Å—Ç–æ–º–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            const message = `üìã –î–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n` +
                           ` ${availableCustomTask.title}\n` +
                           `üìÑ ${availableCustomTask.description || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è'}\n` +
                           `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${availableCustomTask.reward} –∑–≤—ë–∑–¥\n` +
                           `üèÜ –ë–æ–Ω—É—Å: +1 –æ—á–∫–æ\n\n` +
                           `‚ÑπÔ∏è –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"`;
            
            const keyboard = {
                inline_keyboard: [
                    availableCustomTask.link ? [{ text: 'üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é', url: availableCustomTask.link }] : [],
                    [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: `check_custom_task_${availableCustomTask.id}` }],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ].filter(row => row.length > 0) // –£–±–∏–≤–∞–µ–º –ø—ÉÔøΩÔøΩÔøΩÔøΩ—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            };
            
            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard
            });
        } else {
            console.log(`–ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ó–ê–î–ê–ù–ò–ô`);
            // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            const message = `üìã –ó–∞–¥–∞–Ω–∏—è\n\n` +
                           `‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n` +
                           `‚è≥ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è.`;
            
            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: createBackToMenuKeyboard()
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
        const message = `üìã –ó–∞–¥–∞–Ω–∏—è\n\n` +
                       `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π.\n` +
                       `üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        
        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: createBackToMenuKeyboard()
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async function showInstructions(chatId, messageId) {
    const message = `üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É\n\n` +
                   `üåü –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚≠ê:\n\n` +
                   `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:\n` +
                   `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n` +
                   `‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: 3 –∑–≤–µ–∑–¥—ã\n` +
                   `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 2 –∑–∞–¥–∞–Ω–∏–π\n\n` +
                   `üñ± –ö–ª–∏–∫–µ—Ä:\n` +
                   `‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –¥–æ 10 —Ä–∞–∑ –≤ –¥–µ–Ω—å\n` +
                   `‚Ä¢ –ó–∞ –∫–ª–∏–∫: 0.1 –∑–≤–µ–∑–¥—ã\n` +
                   `‚Ä¢ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è\n\n` +
                   `üìã –ó–∞–¥–∞–Ω–∏—è:\n` +
                   `‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n` +
                   `‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–∞–∂–¥–æ–º –∑–∞–¥–∞–Ω–∏–∏\n\n` +
                   `üèÜ –†–µ–π—Ç–∏–Ω–≥–∏:\n` +
                   `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏\n` +
                   `‚Ä¢ –¢–æ–ø 5 –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å—ã\n\n` +
                   `üéÅ –ö–µ–π—Å—ã:\n` +
                   `‚Ä¢ 1 –∫–µ–π—Å –≤ –¥–µ–Ω—å –∑–∞ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
                   `‚Ä¢ –í—ã–∏–≥—Ä—ã—à: 1-10 –∑–≤—ë–∑–¥\n\n` +
                   `üí∞ –í—ã–≤–æ–¥:\n` +
                   `‚Ä¢ –ú–∏–Ω–∏–º—É–º: 15 –∑–≤—ë–∑–¥\n` +
                   `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∞–º–∏`;
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: createBackToMenuKeyboard()
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏
async function showRatings(chatId, messageId) {
    const message = `üèÜ –†–µ–π—Ç–∏–Ω–≥–∏\n\n` +
                   `üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:`;
    
    const keyboard = {
        inline_keyboard: [
            [{ text: 'üåü –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'rating_overall' }],
            [{ text: 'üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'rating_weekly' }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ç–∏–ø—É
async function showRatingType(chatId, type, messageId) {
    let leaderboard, title;
    
    if (type === 'overall') {
        leaderboard = await Database.getOverallLeaderboard();
        title = 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥';
    } else {
        leaderboard = await Database.getWeeklyLeaderboard();
        title = 'üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥';
    }
    
    let message = `${title}\n\n`;
    
    if (leaderboard.length === 0) {
        message += '‚ÑπÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç';
    } else {
        leaderboard.forEach((user, index) => {
            const position = index + 1;
            const emoji = position <= 3 ? ['ü•á', 'ü•à', 'ü•â'][position - 1] : `${position}.`;
            const points = type === 'overall' ? user.points : user.weekly_points;
            const name = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            
            message += `${emoji} ${name} - ${points} –æ—á–∫–æ–≤\n`;
        });
        
        if (type === 'weekly') {
            message += `\nüéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø 5:\n`;
            message += `ü•á 1 –º–µ—Å—Ç–æ: 100 ‚≠ê\n`;
            message += `ü•à 2 –º–µ—Å—Ç–æ: 75 ‚≠ê\n`;
            message += `ü•â 3 –º–µ—Å—Ç–æ: 50 ‚≠ê\n`;
            message += `4 –º–µ—Å—Ç–æ: 25 ‚≠ê\n`;
            message += `5 –º–µ—Å—Ç–æ: 15 ‚≠ê`;
        }
    }
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: createBackToMenuKeyboard()
    });
}

// –ü–æ–∫–∞–∑ÔøΩÔøΩ—Ç—å –∫–µ–π—Å—ã
async function showCases(chatId, userId, messageId) {
    const user = await Database.getUser(userId);
    const today = new Date().toDateString();
    const lastCaseDate = user.last_case_open ? new Date(user.last_case_open).toDateString() : null;
    
    const canOpenCase = user.daily_referrals >= 5 && lastCaseDate !== today;
    
    const message = `üéÅ –ö–µ–π—Å—ã\n\n` +
                   `üìã –£—Å–ª–æ–≤–∏—è:\n` +
                   `üë• 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å\n` +
                   `‚Ä¢ 1 –∫–µ–π—Å –≤ –¥–µ–Ω—å\n\n` +
                   `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                   `üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${user.daily_referrals}\n` +
                   `üéÅ –ö–µ–π—Å ${lastCaseDate === today ? '—É–∂–µ –æ—Ç–∫—Ä—ã—Ç' : '–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n` +
                   `üí∞ –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: 1-10 ‚≠ê`;
    
    const keyboard = {
        inline_keyboard: [
            [{ 
                text: canOpenCase ? 'üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 
                callback_data: canOpenCase ? 'open_case' : 'disabled'
            }],
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
    };
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç–µ—Ä–µ–∏
async function showLottery(chatId, messageId) {
    const lotteries = await Database.getActiveLotteries();
    
    let message = `üé≤ –õ–æ—Ç–µ—Ä–µ–∏\n\n`;
    
    if (lotteries.length === 0) {
        message += '‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –Ω–µ—Ç';
    } else {
        lotteries.forEach(lottery => {
            const progress = (lottery.sold_tickets / lottery.total_tickets * 100).toFixed(1);
            message += `üéü ${lottery.name}\n`;
            message += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} –∑–≤—ë–∑–¥\n`;
            message += `üé´ –ë–∏–ª–µ—Ç–æ–≤: ${lottery.sold_tickets}/${lottery.total_tickets} (${progress}%)\n`;
            message += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${lottery.winners_count}\n\n`;
        });
    }
    
    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: createBackToMenuKeyboard()
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–ª–µ—Ç–∫—É
async function showRoulette(chatId, userId, messageId) {
    const user = await Database.getUser(userId);

    const message = `üé∞ –†—É–ª–µ—Ç–∫–∞\n\n` +
                   `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∑–≤—ë–∑–¥\n\n` +
                   `üéØ –ü—Ä–∞–≤–∏–ª–∞:\n` +
                   `‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n` +
                   `‚Ä¢ –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ —Å—Ç–∞–≤–∫–∞ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è\n` +
                   `‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É\n` +
                   `üí´ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:`;

    const betAmounts = [0.5, 1, 2, 3, 5, 10, 25, 50, 100];
    const keyboard = {
        inline_keyboard: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ (–ø–æ 3 –≤ —Ä—è–¥)
    for (let i = 0; i < betAmounts.length; i += 3) {
        const row = [];
        for (let j = 0; j < 3 && i + j < betAmounts.length; j++) {
            const amount = betAmounts[i + j];
            const canAfford = user.balance >= amount;
            row.push({
                text: canAfford ? `üí∞ ${amount} –∑–≤—ë–∑–¥` : `‚ùå ${amount} –∑–≤—ë–∑–¥`,
                callback_data: canAfford ? `roulette_bet_${amount}` : 'disabled'
            });
        }
        keyboard.inline_keyboard.push(row);
    }

    keyboard.inline_keyboard.push([{
        text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        callback_data: 'main_menu'
    }]);

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞ÔøΩÔøΩ–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ
async function handleRouletteBet(chatId, userId, amount, messageId, callbackQueryId) {
    try {
        const user = await Database.getUser(userId);

        if (user.balance < amount) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
            return;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–´: –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Å—Ç–Ω—É—é —Å–ª—É—á–∞–π–ΩÔøΩÔøΩ—Å—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        // –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ 15% (—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ä—É–ªÔøΩÔøΩ—Ç–∫–∞)
        const isWin = Math.random() < 0.15;

        if (isWin) {
            // –í—ã–∏–≥—Ä—ã—à - —É–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            const winAmount = amount * 2;
            await Database.updateUserBalance(userId, winAmount - amount); // +amount (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏) + amount (–≤—ã–∏–≥—Ä—ã—à)
            await Database.updateUserPoints(userId, 2);

            const message = `üéâ –í–´–ò–ì–†–´–®!\n\n` +
                           `üí∞ –°—Ç–∞–≤–∫–∞: ${amount} –∑–≤—ë–∑–¥\n` +
                           `üèÜ –í—ã–∏–≥—Ä—ã—à: ${winAmount} –∑–≤—ë–∑–¥\n` +
                           `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance + winAmount - amount} –∑–≤—ë–∑–¥\n` +
                           `üéä +2 –æ—á–∫–∏!\n\n` +
                           `üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!`;

            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'roulette' }],
                        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });

            await bot.answerCallbackQuery(callbackQueryId, `üéâ –í—ã–∏–≥—Ä—ã—à ${winAmount} –∑–≤—ë–∑–¥!`);
        } else {
            // –ü—Ä–æ–∏–≥—Ä—ã—à - —Ç–µ—Ä—è–µ–º —Å—Ç–∞–≤–∫—É
            await Database.updateUserBalance(userId, -amount);

            const message = `üòî –ü—Ä–æ–∏–≥—Ä—ã—à\n\n` +
                           `üí∏ –°—Ç–∞–≤–∫–∞: ${amount} –∑–≤—ë–∑–¥\n` +
                           `üíî –ü–æ—Ç–µ—Ä—è–Ω–æ: ${amount} –∑–≤—ë–∑–¥\n` +
                           `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance - amount} –∑–≤—ë–∑–¥\n\n` +
                           `üçÄ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!`;

            await bot.editMessageText(message, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'roulette' }],
                        [{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });

            await bot.answerCallbackQuery(callbackQueryId, ` –ü—Ä–æ–∏–≥—Ä—ã—à ${amount} –∑–≤—ë–∑–¥`);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä—ã');
    }
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function handlePromocodeInput(chatId, userId) {
    userStates.set(userId, 'waiting_promocode');
    await bot.sendMessage(chatId, 'üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function handleCustomTaskCheck(chatId, userId, taskId, messageId, callbackQueryId) {
    try {
        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ${taskId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
        const tasks = await Database.getTasks(false);
        const task = tasks.find(t => t.id === taskId);
        
        if (!task) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ÔøΩÔøΩ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ªÔøΩÔøΩ —É–∂–µ
        const isCompleted = await Database.isTaskCompleted(userId, taskId);
        if (isCompleted) {
            await bot.answerCallbackQuery(callbackQueryId, '‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
            await showTasks(chatId, userId, messageId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–∞
        if (task.link && (task.link.includes('t.me/') || task.link.startsWith('@'))) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: ${task.link}`);

            try {
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞
                const channelData = normalizeChannelIdentifier(task.link);

                // –ü—Ä–æ–≤–µ—Ä—èÔøΩÔøΩÔøΩÔøΩ–º –ø–æ–¥–ø–∏—Å–∫—É
                const member = await bot.getChatMember(channelData.identifier, userId);

                if (member.status === 'left' || member.status === 'kicked') {
                    await bot.answerCallbackQuery(callbackQueryId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!');

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    const subscriptionMessage = `‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n` +
                                               `üìù –ó–∞–¥–∞–Ω–∏–µ: ${task.title}\n\n` +
                                               `‚ö†Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n\n` +
                                               `üîó –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" —Å–Ω–æ–≤–∞.`;

                    const subscriptionKeyboard = {
                        inline_keyboard: [
                            [{ text: 'üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É', url: channelData.url }],
                            [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã—ã–æ–ª–Ω–µ–Ω–∏–µ', callback_data: `check_custom_task_${taskId}` }],
                            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    };

                    await bot.editMessageText(subscriptionMessage, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: subscriptionKeyboard
                    });

                    return;
                }

                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª ${channelData.identifier}`);

            } catch (subscriptionError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:`, subscriptionError.message);

                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è');
            }
        }

        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        await Database.completeTask(userId, taskId);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await Database.updateUserBalance(userId, task.reward);
        await Database.updateUserPoints(userId, 1);

        await bot.answerCallbackQuery(callbackQueryId, `üéâ +${task.reward} –∑–≤—ë–∑–¥! +1 –æ—á–∫–æ!`);

        // –ü—ÄÔøΩÔøΩ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        await checkReferralConditions(userId);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–±—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await showTasks(chatId, userId, messageId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è');
    }
}


// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ config.ADMIN_IDS)
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
    }

    await showAdminPanel(chatId);
});

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async function showAdminPanel(chatId, messageId = null) {
    const message = '‚Äç–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', callback_data: 'admin_stats' }],
            [{ text: '   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏', callback_data: 'admin_tasks' }],
            [{ text: 'üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏', callback_data: 'admin_lottery' }],
            [{ text: 'üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', callback_data: 'admin_promocodes' }],
            [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', callback_data: 'admin_broadcast' }],
            [{ text: 'üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'admin_rewards' }],
            [{ text: 'üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data: 'admin_withdrawals' }],
            [{ text: 'üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫', callback_data: 'admin_withdrawal_numbering' }],
            [{ text: 'üì∫ –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã', callback_data: 'admin_sponsor_channels' }]
        ]
    };

    if (messageId) {
        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } else {
        await bot.sendMessage(chatId, message, { reply_markup: keyboard });
    }
}

// –û–±—ÄÔøΩÔøΩ–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—ÅÔøΩÔøΩ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async function handleAdminCallback(chatId, userId, data, messageId, callbackQueryId) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }

    switch (data) {
        case 'admin_stats':
            await showBotStats(chatId, messageId);
            break;
        case 'admin_tasks':
            await showAdminTasks(chatId, messageId);
            break;
        case 'admin_lottery':
            await showAdminLottery(chatId, messageId);
            break;
        case 'admin_promocodes':
            await showAdminPromocodes(chatId, messageId);
            break;
        case 'admin_broadcast':
            await showAdminBroadcast(chatId, messageId);
            break;
        case 'admin_rewards':
            await showAdminRewards(chatId, messageId);
            break;
        case 'admin_withdrawals':
            await showAdminWithdrawals(chatId, messageId);
            break;
        case 'admin_withdrawal_numbering':
            await showWithdrawalNumbering(chatId, messageId);
            break;
        case 'admin_broadcast_all':
            await startBroadcastMessage(chatId, userId);
            break;
        case 'set_closure_435':
            await handleSetClosureNumber(chatId, userId, 435, messageId, callbackQueryId);
            break;
        case 'set_closure_500':
            await handleSetClosureNumber(chatId, userId, 500, messageId, callbackQueryId);
            break;
        case 'set_closure_1000':
            await handleSetClosureNumber(chatId, userId, 1000, messageId, callbackQueryId);
            break;
        // –°—Ç–∞—Ä—ã–µ callback_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        case 'set_withdrawal_435':
            await handleSetClosureNumber(chatId, userId, 435, messageId, callbackQueryId);
            break;
        case 'set_withdrawal_500':
            await handleSetClosureNumber(chatId, userId, 500, messageId, callbackQueryId);
            break;
        case 'set_withdrawal_1000':
            await handleSetClosureNumber(chatId, userId, 1000, messageId, callbackQueryId);
            break;
        case 'admin_sponsor_channels':
            await showSponsorChannelsAdmin(chatId, messageId);
            break;
        case 'admin_sponsor_top':
            await showSponsorChannelsTop(chatId, messageId);
            break;
        case 'admin_sponsor_sync':
            await syncSponsorChannelsFromConfig(chatId, messageId, callbackQueryId);
            return; // –ù–µ –æ—Ç–≤–µÔøΩÔøΩ–∞–µ–º –Ω–∞ callback –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç
    }

    await bot.answerCallbackQuery(callbackQueryId);
}

// –ü–æ–∫ÔøΩÔøΩ–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
async function showBotStats(chatId, messageId) {
    try {
        const totalUsers = await Database.pool.query('SELECT COUNT(*) as count FROM users');
        const totalStarsEarned = await Database.pool.query('SELECT SUM(total_earned) as sum FROM users');
        const totalWithdrawals = await Database.pool.query('SELECT SUM(amount) as sum FROM withdrawal_requests WHERE status = \'approved\'');
        const pendingWithdrawals = await Database.pool.query('SELECT COUNT(*) as count, SUM(amount) as sum FROM withdrawal_requests WHERE status = \'pending\'');
        const activatedReferrals = await Database.pool.query('SELECT COUNT(*) as count FROM users WHERE referral_completed = TRUE');
        const todayUsers = await Database.pool.query('SELECT COUNT(*) as count FROM users WHERE DATE(created_at) = CURRENT_DATE');

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞ÔøΩÔøΩ
        const subscriptionStats = await Database.pool.query(`
            SELECT
                COUNT(CASE WHEN referral_completed = TRUE THEN 1 END) as activated_users,
                COUNT(CASE WHEN referral_completed = FALSE THEN 1 END) as non_activated_users
            FROM users WHERE referrer_id IS NOT NULL
        `);

        const message = `üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
                       `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers.rows[0].count}\n` +
                       `üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${todayUsers.rows[0].count}\n` +
                       `‚≠ê –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤—ë–∑–¥: ${Math.round(totalStarsEarned.rows[0].sum || 0)}\n` +
                       `üí∞ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${Math.round(totalWithdrawals.rows[0].sum || 0)}\n` +
                       `‚è≥ –ó–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${pendingWithdrawals.rows[0].count}\n` +
                       `üíé –°—É–º–º–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${Math.round(pendingWithdrawals.rows[0].sum || 0)}\n\n` +
                       `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
                       `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${activatedReferrals.rows[0].count}\n` +
                       `‚è≥ –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${subscriptionStats.rows[0].non_activated_users}\n\n` +
                       `üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${activatedReferrals.rows[0].count > 0 ? Math.round((activatedReferrals.rows[0].count / (activatedReferrals.rows[0].count + parseInt(subscriptionStats.rows[0].non_activated_users))) * 100) : 0}% –∞–∫—Ç–∏–≤–∞—Ü–∏–∏`;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stats' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–ΩÔøΩÔøΩ—è–º–∏
async function showAdminTasks(chatId, messageId) {
    const message = ` –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n\n` +
                   `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n` +
                   `–ø–æ–º–∏–º–æ –∑–∞–¥–∞–Ω–∏–π –æ—Ç SubGram`;

    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'create_task' }],
            [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π', callback_data: 'list_tasks' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–ºÔøΩÔøΩ–Ω—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É
async function showAdminBroadcast(chatId, messageId) {
    const message = ` –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n` +
                   `–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:`;

    const keyboard = {
        inline_keyboard: [
            [{ text: 'üèÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ', callback_data: 'broadcast_rating' }],
            [{ text: 'üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏—è—Ö', callback_data: 'broadcast_tasks' }],
            [{ text: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º', callback_data: 'admin_broadcast_all' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æÔøΩÔøΩ–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
async function showAdminRewards(chatId, messageId) {
    try {
        const weeklyLeaderboard = await Database.getWeeklyLeaderboard(5);

        let leaderboardText = '';
        if (weeklyLeaderboard.length > 0) {
            leaderboardText = '\n\nüèÜ –¢–µ–∫—É—â–∏–π —Ç–æ–ø 5 –Ω–µ–¥–µ–ª–∏:\n';
            weeklyLeaderboard.forEach((user, index) => {
                const position = index + 1;
                const emoji = position <= 3 ? ['ü•á', 'ü•à', 'ü•â'][position - 1] : `${position}.`;
                const name = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                const reward = config.WEEKLY_REWARDS[position];
                leaderboardText += `${emoji} ${name} - ${user.weekly_points} –æ—á–∫–æ–≤ (${reward} ‚≠ê)\n`;
            });
        }

        const message = `üèÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n` +
                       `–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø 5 –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞:\n` +
                       `ü•á 1 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[1]} –∑–≤—ë–∑–¥\n` +
                       `ü•à 2 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[2]} –∑–≤—ë–∑–¥\n` +
                       `ü•â 3 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[3]} –∑–≤—ë–∑–¥\n` +
                       `4 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[4]} –∑–≤—ë–∑–¥\n` +
                       `5 –º–µ—Å—Ç–æ: ${config.WEEKLY_REWARDS[5]} –∑–≤—ë–∑–¥\n\n` +
                       `‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: –í–û–°–ö–†–ï–°–ï–ù–¨–ï 20:00` +
                       leaderboardText;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üèÜ –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã —Å–µ–π—á–∞—Å', callback_data: 'give_rewards_now' }],
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ø', callback_data: 'admin_rewards' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞–≥—Ä–∞–¥:', error);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function showAdminWithdrawals(chatId, messageId) {
    try {
        const pending = await Database.getPendingWithdrawals();

        let message = `üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n\n`;

        if (pending.length === 0) {
            message += '‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫';
        } else {
            message += `üìã –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: ${pending.length}\n\n`;

            for (const request of pending.slice(0, 5)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const userInfo = await getUserWithdrawalInfo(request.user_id);

                message += `üìÑ –ó–∞—è–≤–∫–∞ #${request.id}\n`;
                message += `üë§ ${request.first_name} (@${request.username || '–Ω–µ—Ç'})\n`;
                message += `üÜî ID: ${request.user_id}\n`;
                message += `üí∞ –°—É–º–º–∞: ${request.amount} –∑–≤—ë–∑–¥\n`;
                message += `üíé –û—Å—Ç–∞—Ç–æ–∫: ${request.balance} –∑–≤—ë–∑–¥\n`;
                message += `üìä –ü–æ–¥–ø–∏—Å–∫–∏: ${userInfo.sponsor_subscriptions} –ª–∏—á–Ω—ã—Ö + ${userInfo.referrals_subscriptions} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
                message += `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${userInfo.referral_stats?.activated_referrals || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n`;
                message += `üìÖ ${new Date(request.created_at).toLocaleDateString('ru-RU')}\n\n`;
            }

            if (pending.length > 5) {
                message += `... –∏ –µ—â—ë ${pending.length - 5} –∑–∞—è–≤–æ–∫`;
            }
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_withdrawals' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–æ–∫:', error);
    }
}

// –ü–æ–∫–∞–∑–≤—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏
async function showAdminLottery(chatId, messageId) {
    const message = `üé≤ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏\n\n` +
                   `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ—Ç–µ—Ä–µ—è–º–∏`;

    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç–µ—Ä–µ—é', callback_data: 'create_lottery' }],
            [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏', callback_data: 'list_lotteries' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤ÔøΩÔøΩ–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫ÔøΩÔøΩ–¥–∞–º–∏
async function showAdminPromocodes(chatId, messageId) {
    const message = `üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n` +
                   `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏`;

    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data: 'create_promocode' }],
            [{ text: 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', callback_data: 'list_promocodes' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
        ]
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑–∞—ÇÔøΩÔøΩ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—ÜÔøΩÔøΩ–µ–π –∑–∞—è–≤–æ–∫
async function showWithdrawalNumbering(chatId, messageId) {
    try {
        // –ü–æ–ª—ÉÔøΩÔøΩ–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞ÔøΩÔøΩ–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
        const requestSeq = await Database.pool.query(`
            SELECT last_value FROM withdrawal_requests_id_seq;
        `);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–æ–∫
        const closureSeqQuery = await Database.pool.query(`
            SELECT EXISTS (SELECT 1 FROM information_schema.sequences WHERE sequence_name = 'withdrawal_closure_seq');
        `);

        let closureInfo = "–ù–µ —Å–æ–∑–¥–∞–Ω–∞";
        if (closureSeqQuery.rows[0].exists) {
            const closureSeq = await Database.pool.query(`
                SELECT last_value FROM withdrawal_closure_seq;
            `);
            const closureValue = parseInt(closureSeq.rows[0]?.last_value) || 0;
            closureInfo = `${closureValue} (—Å–ª–µ–¥—É—é—â–∞—è –∑–∞–∫—Ä—ã—Ç–∞—è: ${closureValue + 1})`;
        }

        const requestValue = parseInt(requestSeq.rows[0]?.last_value) || 0;
        const nextRequestId = requestValue + 1;

        const message = `üî¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∑–∞—è–≤–æ–∫\n\n` +
                       `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n` +
                       `üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ (–∞–¥–º–∏–Ω-—á–∞—Ç):\n` +
                       `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: ${requestValue}\n` +
                       `‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞: #${nextRequestId}\n\n` +
                       `üí∞ –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–æ–∫ (–ø–ª–∞—Ç–µ–∂–Ω—ã–π —á–∞—Ç):\n` +
                       `‚Ä¢ ${closureInfo}\n\n` +
                       `‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä 435', callback_data: 'set_closure_435' }],
                [{ text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä 500', callback_data: 'set_closure_500' }],
                [{ text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä 1000', callback_data: 'set_closure_1000' }],
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', callback_data: 'admin_withdrawal_numbering' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫:', error);

        const errorMessage = `üî¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∑–∞—è–≤–æ–∫\n\n` +
                            `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n` +
                            `Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–∞—Ç–∞):`;

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä 435', callback_data: 'set_closure_435' }],
                [{ text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä 500', callback_data: 'set_closure_500' }],
                [{ text: 'üî¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä 1000', callback_data: 'set_closure_1000' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(errorMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —á–∞ÔøΩÔøΩ–∞)
async function handleSetClosureNumber(chatId, userId, startNumber, messageId, callbackQueryId) {
    try {
        console.log(`üî¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫: ${startNumber} (–∞–¥–º–∏–Ω: ${userId})`);

        const result = await Database.setWithdrawalClosureStartNumber(startNumber);

        if (result.success) {
            const successMessage = `‚úÖ –ù–æ–º–µ—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n` +
                                 `üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n` +
                                 `‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${result.newValue}\n` +
                                 `‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–∫—Ä—ã—Ç–∞—è –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∏—Ç –Ω–æ–º–µ—Ä: ${result.nextClosureNumber}\n\n` +
                                 `‚ÑπÔ∏è –≠—Ç–æ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–º —á–∞—Ç–µ`;

            await bot.answerCallbackQuery(callbackQueryId, `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä ${startNumber}!`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await showWithdrawalNumbering(chatId, messageId);

            // –£–≤–µ–¥–æ–º–ª—è–µÔøΩÔøΩ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç
            try {
                await bot.sendMessage(chatId, successMessage);
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:', e.message);
            }

        } else {
            await bot.answerCallbackQuery(callbackQueryId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);

            const errorMessage = `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫\n\n` +
                                `–î–µ—Ç–∞–ª–∏: ${result.error}`;

            try {
                await bot.sendMessage(chatId, errorMessage);
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e.message);
            }
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
async function handleSetWithdrawalNumber(chatId, userId, startNumber, messageId, callbackQueryId) {
    try {
        console.log(`üî¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫: ${startNumber} (–∞–¥–º–∏–Ω: ${userId})`);

        const result = await Database.setWithdrawalStartNumber(startNumber);

        if (result.success) {
            const successMessage = ` –ù–æ–º–µ—Ä –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n` +
                                 `üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n` +
                                 `‚Ä¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä: ${result.previousValue}\n` +
                                 `‚Ä¢ –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${result.newValue}\n` +
                                 `‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–∏—Ç –Ω–æ–º–µ—Ä: ${result.nextWithdrawalId}`;

            await bot.answerCallbackQuery(callbackQueryId, `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä ${startNumber}!`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await showWithdrawalNumbering(chatId, messageId);

            // –£–≤–µ–¥–æ–º–ª—è–µÔøΩÔøΩ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç
            try {
                await bot.sendMessage(chatId, successMessage);
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:', e.message);
            }

        } else {
            await bot.answerCallbackQuery(callbackQueryId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);

            const errorMessage = `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫\n\n` +
                                `–î–µ—Ç–∞–ª–∏: ${result.error}`;

            try {
                await bot.sendMessage(chatId, errorMessage);
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e.message);
            }
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–πÔøΩÔøΩ–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function handleOpenCase(chatId, userId, messageId, callbackQueryId) {
    try {
        const user = await Database.getUser(userId);
        const today = new Date().toDateString();
        const lastCaseDate = user.last_case_open ? new Date(user.last_case_open).toDateString() : null;
        
        if (user.daily_referrals < 5 || lastCaseDate === today) {
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
            return;
        }

        // –°–ª—É—á–∞–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –æ—Ç 1 –¥–æ 10 –∑–≤—ë–∑–¥
        const reward = Math.floor(Math.random() * 10) + 1;
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await Database.updateUserBalance(userId, reward);
        
        // –û–±ÔøΩÔøΩ–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µÔøΩÔøΩ—Å–∞
        await Database.pool.query(
            'UPDATE users SET last_case_open = CURRENT_DATE WHERE user_id = $1',
            [userId]
        );

        await bot.answerCallbackQuery(callbackQueryId, `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${reward} ‚≠ê!`);
        await showCases(chatId, userId, messageId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
    }
}

// –û–±—ÄÔøΩÔøΩ–±ÔøΩÔøΩ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å —É–ø–∏—Ä–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —á–∞—Ç
async function handleWithdrawalAction(chatId, userId, data, callbackQueryId, messageId) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }

    try {
        console.log(`üîç –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–ö–ò: data=${data}, userId=${userId}, chatId=${chatId}`);

        const [action, requestId] = data.split('_');
        const id = parseInt(requestId);
        console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: action=${action}, requestId=${requestId}, id=${id}`);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î: id=${id}`);
        const request = await Database.pool.query('SELECT * FROM withdrawal_requests WHERE id = $1', [id]);
        if (request.rows.length === 0) {
            console.log(`‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: id=${id}`);
            await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const requestData = request.rows[0];
        console.log(` –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:`, requestData);

        console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: userId=${requestData.user_id}`);
        const user = await Database.getUser(requestData.user_id);
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, user ? '–Ω–∞–π–¥–µ–Ω—ã' : '–ù–ï –Ω–∞–π–¥–µ–Ω—ã');

        if (action === 'approve') {
            console.log(`‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–î–û–ë–†–ï–ù–ò–Ø –∑–∞—è–≤–∫–∏: id=${id}`);
            // –û–¥–æÔøΩÔøΩ—Ä—è–µ–º –∑–∞—è–≤–∫—É
            console.log(`üîÑ –í—ã–∑—ã–≤–∞–µ–º Database.processWithdrawal –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è...`);
            await Database.processWithdrawal(id, 'approved');
            console.log(`‚úÖ Database.processWithdrawal –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);

            // –£–ë–ò–†–ê–ï–ú –ö–ù–û–ü–ö–ò –∏–∑ –∞–¥ÔøΩÔøΩ–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try {
                await bot.editMessageReplyMarkup(null, {
                    chat_id: chatId,
                    message_id: messageId
                });

                // –î–æ–±–∞–≤–ª—èÔøΩÔøΩ–º —Å—Ç–∞—Ç—É—Å –∫ —Ç–µ–∫—Å—Ç—É ÔøΩÔøΩ–æ–æ–±—â–µ–Ω–∏—è
                const originalText = await bot.getChat(chatId).then(() => "–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
                await bot.editMessageText(`${originalText}\n\n‚úÖ –ó–ê–Ø–í–ö–ê –û–î–û–ë–†–ï–ù–ê`, {
                    chat_id: chatId,
                    message_id: messageId
                });
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–ª–∞ÔøΩÔøΩ–µ–∂–µ–π –° –ù–û–ú–ï–†–û–ú –ó–ê–Ø–í–ö–ò –ò –ö–ù–û–ü–ö–ê–ú–ò
            console.log(`üí∞ –û–¢–ü–†–ê–í–ö–ê –í –ü–õ–ê–¢–ï–ñ–ù–´–ô –ß–ê–¢ (APPROVE): ${config.PAYMENTS_CHAT_ID}`);
            const paymentMessage = `‚úÖ –í—ã–ø–ª–∞—Ç–∞ #${id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n` +
                                 `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n` +
                                 `üÜî ID: ${requestData.user_id}\n` +
                                 `üí∞ –°—É–º–º–∞: ${requestData.amount} –∑–≤—ë–∑–¥\n` +
                                 `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`;

            const paymentKeyboard = {
                inline_keyboard: [
                    [
                        { text: 'üì¢ –ù–∞—à –ö–∞–Ω–∞–ª', url: 'https://t.me/kirbystarschanel' },
                        { text: 'üí¨ –ù–∞—à —á–∞—Ç', url: 'https://t.me/kirbistarschat' }
                    ],
                    [
                        { text: 'ü§ñ –ù–∞—à –±–æ—Ç', url: 'https://t.me/kirbystarsfarmbot' }
                    ]
                ]
            };

            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —á–∞—Ç...`);
            try {
                await bot.sendMessage(config.PAYMENTS_CHAT_ID, paymentMessage, {
                    reply_markup: paymentKeyboard
                });
                console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            } catch (paymentError) {
                console.error(`‚ùå –û—à–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —á–∞—Ç (APPROVE):`, paymentError.message);
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
                try {
                    await bot.sendMessage(chatId, `‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –ø–ª–∞—Ç–µ–∂–µ–π:\n${paymentError.message}`);
                } catch (e) {}
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await bot.sendMessage(requestData.user_id,
                    `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${requestData.amount} –∑–≤—ë–∑–¥ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`
                );
            } catch (e) {
                console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${requestData.user_id}`);
            }

            await bot.answerCallbackQuery(callbackQueryId, 'üéâ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');

        } else if (action === 'reject') {
            console.log(`‚ùå –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø –∑–∞—è–≤–∫–∏: id=${id}`);

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–≤—ë–∑–¥', callback_data: `rj_refund_${id}` }
                    ],
                    [
                        { text: 'üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞', callback_data: `rj_norefund_${id}` }
                    ],
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_withdrawals' }
                    ]
                ]
            };

            try {
                await bot.answerCallbackQuery(callbackQueryId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
            } catch (e) {}

            try {
                await bot.editMessageReplyMarkup(keyboard, {
                    chat_id: chatId,
                    message_id: messageId
                });
            } catch (e) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', e.message);
            }

            return;
        }

    } catch (error) {
        console.error('‚ùå –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–ö–ò:', {
            error: error.message,
            stack: error.stack,
            data: data,
            chatId: chatId,
            userId: userId,
            messageId: messageId
        });

        // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏';
        if (error.message.includes('chat not found')) {
            errorMessage = '‚ùå –ß–∞—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (error.message.includes('bot is not')) {
            errorMessage = '‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç';
        } else if (error.message.includes('insufficient rights')) {
            errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ';
        }

        await bot.answerCallbackQuery(callbackQueryId, errorMessage);
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è ÔøΩÔøΩ–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async function startBroadcastMessage(chatId, userId) {
    const message = 'üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n' +
                   '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n' +
                   '‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n' +
                   '–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.';

    broadcastStates.set(userId, { waiting: true, chatId: chatId });
    console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞—Å—Å—ã–ª–∫–∏: ${broadcastStates.size}`);

    await bot.sendMessage(chatId, message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function sendCustomBroadcast(messageText, adminUserId) {
    try {
        const users = await Database.pool.query('SELECT user_id FROM users WHERE user_id != $1', [adminUserId]);
        let successCount = 0;
        let failCount = 0;

        console.log(`üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);

        for (const user of users.rows) {
            try {
                await bot.sendMessage(user.user_id, messageText);
                successCount++;

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ÔøΩÔøΩ–µÔøΩÔøΩ–¥—É –æ—Ç–ø—ÄÔøΩÔøΩ–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                if (successCount % 20 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            } catch (error) {
                failCount++;
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${error.message}`);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—èÔøΩÔøΩ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        const reportMessage = ` –û—Ç—á–µ—Ç –æ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ:\n\n` +
                             `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
                             `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failCount}\n` +
                             `üìà –û–±—â–∏–π –æ—Ö–≤–∞—Ç: ${successCount}/${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;

        await bot.sendMessage(adminUserId, reportMessage);
        console.log(`‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failCount} –æ—à–∏–±–æ–∫`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ:', error);
        await bot.sendMessage(adminUserId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.');
    }
}

// –ûÔøΩÔøΩ—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function handleConfirmBroadcast(chatId, userId, messageText, messageId, callbackQueryId) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }

    await bot.answerCallbackQuery(callbackQueryId, 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.editMessageText('‚öôÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞... –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç.', {
        chat_id: chatId,
        message_id: messageId
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await sendCustomBroadcast(messageText, userId);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
async function handleCancelBroadcast(chatId, userId, messageId, callbackQueryId) {
    await bot.answerCallbackQuery(callbackQueryId, '‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');

    await bot.editMessageText('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
        chat_id: chatId,
        message_id: messageId
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function handleBroadcast(type) {
    console.log(` –†–∞—Å—Å—ã–ª–∫–∞ —Ç–∏–ø–∞ ${type} (—Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)`);
}

// –£–ª—ÉÔøΩÔøΩ—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –≥–æ—Ç–æ–≤—ãÔøΩÔøΩ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async function handleBroadcastNew(type) {
    try {
        const users = await Database.pool.query('SELECT user_id FROM users');
        let message, keyboard;

        if (type === 'rating') {
            message = `üèÜ –ë—ã—Å—Ç—Ä–µ–µ –ø–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø 5 –ø–æ –æ—á–∫–∞–º –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –ø–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏!\n\n` +
                     `üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–æ–ø –º–µ—Å—Ç–∞:\n` +
                     `ü•á 1 –º–µ—Å—Ç–æ: 100 ‚≠ê\n` +
                     `ü•à 2 –º–µ—Å—Ç–æ: 75 ‚≠ê\n` +
                     `ü•â 3 –º–µ—Å—Ç–æ: 50 ‚≠ê\n` +
                     `4 –º–µ—Å—Ç–æ: 25 ‚≠ê\n` +
                     `5 –º–µ—Å—Ç–æ: 15 ‚≠ê\n\n` +
                     `‚è∞ –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!\n` +
                     `üöÄ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–π—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!`;

            keyboard = {
                inline_keyboard: [
                    [{ text: '‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'invite' }],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            };
        } else if (type === 'tasks') {
            message = `üìã –ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è!\n\n` +
                     `üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n` +
                     `‚úÖ –ö–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
                     `üéØ –í—ã–ø–æ–ª–Ω–∏ –º–∏–Ω–∏–º—É–º 2 –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤\n\n` +
                     `üöÄ –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!`;

            keyboard = {
                inline_keyboard: [
                    [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                    [{ text: '‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'invite' }],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            };
        } else {
            console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: ${type}`);
            return;
        }

        let sentCount = 0;
        let errorCount = 0;

        console.log(`üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É "${type}" –¥–ª—è ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

        for (const user of users.rows) {
            try {
                await bot.sendMessage(user.user_id, message, { reply_markup: keyboard });
                sentCount++;
                await new Promise(resolve => setTimeout(resolve, 50));
            } catch (error) {
                errorCount++;
                if (error.response?.description?.includes('blocked')) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
                } else {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${error.message}`);
                }
            }
        }

        console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ "${type}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);

        try {
            await bot.sendMessage(config.ADMIN_CHAT_ID,
                `üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ "${type}":\n` +
                `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}\n` +
                `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n` +
                `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((sentCount / (sentCount + errorCount)) * 100)}%`
            );
        } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    }
}

// Cron –∑–∞–¥–∞ÔøΩÔøΩ–∏

// ÔøΩÔøΩ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ 00:00 –ú–°–ö
cron.schedule('0 0 * * *', async () => {
    console.log('üïõ –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤...');
    try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º daily_referrals –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await Database.pool.query(`
            UPDATE users
            SET daily_referrals = 0,
                last_daily_reset = CURRENT_DATE,
                clicks_today = 0,
                last_click_time = NULL
            WHERE last_daily_reset < CURRENT_DATE OR last_daily_reset IS NULL
        `);

        console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
    }
}, {
    timezone: "Europe/Moscow"
});

// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –øÔøΩÔøΩ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 03:03 –ú–°–ö
cron.schedule('3 3 * * 1', async () => {
    console.log('üïõ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–æ–∫...');
    try {
        // –û—á–∏–∏–∞–µ–º –∫–µ—à –ø–æ–¥–ø–∏—Å–æ–∫ webhook handler
        webhookHandler.userSubscriptionCache.clear();
        console.log('‚úÖ –ö–µ—à –ø–æ–¥–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω');

        // –°–±—ÄÔøΩÔøΩ—Å—ã–≤–∞–µ–º weekly_points –¥–ª—è –Ω–µ–¥–µÔøΩÔøΩ—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        await Database.pool.query('UPDATE users SET weekly_points = 0');
        console.log('‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞:', error);
    }
}, {
    timezone: "Europe/Moscow"
});

// –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–ΩÔøΩÔøΩ–µ –Ω–∞–≥—Ä–∞–¥ (–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –ú–°–ö)
cron.schedule('0 20 * * 0', async () => {
    console.log('üèÜ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...');
    try {
        const leaderboard = await Database.getWeeklyLeaderboard(5);

        for (let i = 0; i < leaderboard.length; i++) {
            const user = leaderboard[i];
            const position = i + 1;
            const reward = config.WEEKLY_REWARDS[position];

            if (reward) {
                await Database.updateUserBalance(user.user_id, reward);

                try {
                    await bot.sendMessage(user.user_id,
                        `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n` +
                        `–í—ã –∑–∞–Ω—è–ª–∏ ${position} –º–µ—Å—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!\n` +
                        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${reward} –∑–≤—ë–∑–¥`
                    );
                } catch (e) {
                    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}`);
                }
            }
        }

        console.log('‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥:', error);
    }
}, {
    timezone: "Europe/Moscow"
});

// ==================== SPONSOR CHANNELS ADMIN INTERFACE ====================

// –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–ø–æÔøΩÔøΩÔøΩ—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞ÔøΩÔøΩ–æ–≤
async function showSponsorChannelsAdmin(chatId, messageId) {
    try {
        const channels = await Database.getAllSponsorChannels();
        const totalChannels = channels.length;
        const activeChannels = channels.filter(c => c.is_enabled).length;
        const totalChecks = channels.reduce((sum, c) => sum + c.total_checks, 0);
        const totalUniqueUsers = channels.reduce((sum, c) => sum + c.unique_users_count, 0);

        let message = `üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏\n\n`;
        message += `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${totalChannels}\n`;
        message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeChannels}\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${totalChecks}\n`;
        message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUniqueUsers}\n\n`;

        if (channels.length === 0) {
            message += `‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`;
        } else {
            message += `üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n`;
            channels.slice(0, 10).forEach((channel, index) => {
                const status = channel.is_enabled ? '‚úÖ' : '‚ùå';
                const uniqueRate = channel.total_checks > 0 ?
                    Math.round((channel.unique_users_count / channel.total_checks) * 100) : 0;

                message += `${index + 1}. ${status} ${channel.channel_title}\n`;
                message += `   üìä ${channel.total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ (${channel.unique_users_count} —É–Ω–∏–∫., ${uniqueRate}%)\n`;
            });

            if (channels.length > 10) {
                message += `\n... –∏ –µ—â—ë ${channels.length - 10} –∫–∞–Ω–∞–ª–æ–≤`;
            }
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìä –¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤', callback_data: 'admin_sponsor_top' }],
                [{ text: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å config', callback_data: 'admin_sponsor_sync' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_back' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]]
            }
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
async function showSponsorChannelsTop(chatId, messageId) {
    try {
        const topChannels = await Database.getTopSponsorChannels(15);

        let message = `üèÜ –¢–æ–ø —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n`;

        if (topChannels.length === 0) {
            message += `‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö`;
        } else {
            topChannels.forEach((channel, index) => {
                const position = index + 1;
                const emoji = position <= 3 ? ['ü•á', 'ü•à', 'ü•â'][position - 1] : `${position}.`;
                const status = channel.is_enabled ? '‚úÖ' : '‚ùå';
                const uniqueRate = channel.uniqueness_rate || 0;

                message += `${emoji} ${status} ${channel.channel_title}\n`;
                message += `   üìä ${channel.total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ | ${channel.unique_users_count} —É–Ω–∏–∫. | ${uniqueRate}%\n\n`;
            });
        }

        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º', callback_data: 'admin_sponsor_channels' }]
            ]
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–æ–≤:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –∫–∞–Ω–∞–ª–æ–≤', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_sponsor_channels' }]]
            }
        });
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –±–∞–∑ÔøΩÔøΩ–π –¥–∞–Ω–Ω—ã—Ö
async function syncSponsorChannelsFromConfig(chatId, messageId, callbackQueryId) {
    try {
        await bot.answerCallbackQuery(callbackQueryId, 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º...');

        const configChannels = config.PERSONAL_SPONSOR_CHANNELS || [];
        let addedCount = 0;
        let updatedCount = 0;
        let errorCount = 0;

        for (const channelInput of configChannels) {
            try {
                const channelData = normalizeChannelIdentifier(channelInput);
                const existingChannel = await Database.getSponsorChannelStats(channelData.identifier);

                if (existingChannel) {
                    // ÔøΩÔøΩÔøΩÔøΩ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                    await Database.addOrUpdateSponsorChannel(
                        channelData.identifier,
                        channelData.title,
                        channelData.url,
                        true
                    );
                    updatedCount++;
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    await Database.addOrUpdateSponsorChannel(
                        channelData.identifier,
                        channelData.title,
                        channelData.url,
                        true
                    );
                    addedCount++;
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ ${channelInput}:`, error.message);
                errorCount++;
            }
        }

        const resultMessage = `‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
                             `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
                             `‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${addedCount}\n` +
                             `‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}\n` +
                             `‚Ä¢ –û—à–∏–±–æ–∫: ${errorCount}\n\n` +
                             ` –í—Å–µ–≥–æ –≤ config: ${configChannels.length} –∫–∞–Ω–∞–ª–æ–≤`;

        await bot.editMessageText(resultMessage, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–∞–ª–∞–º', callback_data: 'admin_sponsor_channels' }]
                ]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        await bot.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_sponsor_channels' }]]
            }
        });
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å–øÔøΩÔøΩ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
async function handleSponsorChannelsAdminCallback(chatId, userId, data, messageId, callbackQueryId) {
    if (!config.ADMIN_IDS.includes(userId)) {
        await bot.answerCallbackQuery(callbackQueryId, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }

    switch (data) {
        case 'admin_sponsor_top':
            await showSponsorChannelsTop(chatId, messageId);
            await bot.answerCallbackQuery(callbackQueryId);
            break;
        case 'admin_sponsor_sync':
            await syncSponsorChannelsFromConfig(chatId, messageId, callbackQueryId);
            break;
        default:
            await bot.answerCallbackQuery(callbackQueryId);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initBot();

module.exports = { bot };
