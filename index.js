console.log('[MAIN] Starting imports...');

const TelegramBot = require('node-telegram-bot-api');
console.log('[MAIN] TelegramBot imported');

const cron = require('node-cron');
console.log('[MAIN] cron imported');

const db = require('./database');
console.log('[MAIN] database imported');

const adminHandlers = require('./admin-handlers-final');
console.log('[MAIN] admin-test imported, type:', typeof adminHandlers);
console.log('[MAIN] adminHandlers.handleAdminTasks type:', typeof adminHandlers.handleAdminTasks);

const { throttler } = require('./message-throttler');
console.log('[MAIN] message throttler imported');

// –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥ —É–¥–∞–ª–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

// Helper function to send throttled messages
async function sendThrottledMessage(userId, message, options = {}) {
    return await throttler.sendMessage(() => bot.sendMessage(userId, message, options));
}

// Helper function to safely edit messages (prevents "message is not modified" errors)
async function safeEditMessage(chatId, messageId, text, options = {}) {
    try {
        return await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            ...options
        });
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified" - —çÔøΩÔøΩ–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (error.message?.includes('message is not modified')) {
            console.log(`[SAFE-EDIT] Message not modified for chat ${chatId} - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        } else {
            console.error('[SAFE-EDIT] Unexpected error editing message:', error);
            throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        }
    }
}

// Universal message sending function - automatically chooses throttled vs direct
async function sendMessage(chatId, message, options = {}, useThrottling = false) {
    if (useThrottling) {
        return await sendThrottledMessage(chatId, message, options);
    } else {
        return await bot.sendMessage(chatId, message, options);
    }
}

// Bot token - should be set via environment variable for security
let token = process.env.BOT_TOKEN;

if (!token) {
    console.warn('‚ö†Ô∏è  WARNING: BOT_TOKEN environment variable not set!');
    console.warn('   Using fallback token for development - NOT SECURE FOR PRODUCTION!');
    console.warn('üìù Please set BOT_TOKEN in your environment variables for production.');

    // Fallback token for development (replace with env variable in production)
    token = '8379368723:AAEnG133OZ4qMrb5vQfM7VdEFSuLiWydsyM';

    console.log(' Bot starting with fallback token (will fail without real env token)...');
} else {
    console.log('‚úÖ Bot starting with environment token (secure)');
}

// First, try to delete webhook and then use polling
const bot = new TelegramBot(token, { polling: false });

// Clear any existing webhook and enable polling
async function initializeBotMode() {
    try {
        console.log('üîÑ Clearing any existing webhook...');
        await bot.deleteWebHook();
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second

        console.log(' Starting polling mode...');
        await bot.startPolling({ restart: true });
        console.log(' Bot polling started successfully!');
    } catch (error) {
        console.error('‚ùå Error initializing bot mode:', error);
        throw error;
    }
}

// Admin configuration
const ADMIN_ID = 7972065986;
const ADMIN_CHANNEL = process.env.ADMIN_CHANNEL || '@kirbyvivodstars';
const PAYMENTS_CHANNEL = process.env.PAYMENTS_CHANNEL || '@kirbystarspayments';

// Initialize database and bot
async function startBot() {
    try {
        console.log('üöÄ Starting Telegram bot with PostgreSQL...');
        await db.initializeDatabase();
        await initializeBotMode();
        console.log('‚úÖ Bot started successfully!');
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
}

// Helper function to check if user is admin
function isAdmin(userId) {
    return userId === ADMIN_ID;
}

// Helper function to clean text for safe display (no Markdown)
function cleanDisplayText(text) {
    if (!text) return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // Remove all potentially problematic characters for clean display
    let cleanText = text
        // Remove markdown special characters
        .replace(/[*_`\[\]()~>#+=|{}.!-]/g, '')
        // Remove control characters
        .replace(/[\u0000-\u001f\u007f-\u009f]/g, '')
        // Remove specific problematic symbols that cause Telegram parsing errors
        .replace(/[‚ò≠‚ßÅ‚Å£‡ºíìÜ©‚Ç¶≈Ç‚Ç¶‚Ñ≥‚Ç≥ìÜ™‚≠ê]/g, '')
        // Remove various unicode spaces, symbols, and special characters
        .replace(/[\u2000-\u206F\u2E00-\u2E7F\u3000-\u303F]/g, '')
        // Remove other potentially problematic unicode ranges
        .replace(/[\u2600-\u26FF\u2700-\u27BF]/g, '') // Miscellaneous symbols
        .replace(/[\uFE00-\uFE0F]/g, '') // Variation selectors
        .replace(/[\u200D\u200C\u200B]/g, '') // Zero-width characters
        .trim();

    // Limit length to prevent issues
    if (cleanText.length > 20) {
        cleanText = cleanText.substring(0, 17) + '...';
    }

    // If name becomes empty after cleaning, use default
    return cleanText || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
}

// Helper function to escape Markdown special characters (keep for backward compatibility)
function escapeMarkdown(text) {
    return cleanDisplayText(text);
}

// Helper function to get required channels from database
async function getRequiredChannels() {
    try {
        const result = await db.executeQuery('SELECT channel_id FROM required_channels WHERE is_active = TRUE');
        return result.rows.map(row => row.channel_id);
    } catch (error) {
        console.error('Error getting required channels:', error);
        return [];
    }
}

// Helper function to check if user is subscribed to all required channels (enhanced with retry)
async function checkAllSubscriptions(userId, skipRetry = false) {
    const requiredChannels = await getRequiredChannels();
    if (requiredChannels.length === 0) return true;

    try {
        for (const channel of requiredChannels) {
            let success = false;
            let attempts = 0;
            const maxAttempts = skipRetry ? 1 : 2;

            while (!success && attempts < maxAttempts) {
                attempts++;
                try {
                    const member = await bot.getChatMember(channel, userId);
                    if (member.status === 'left' || member.status === 'kicked') {
                        console.log(`[SUBSCRIPTION] User ${userId} not subscribed to ${channel}`);
                        return false;
                    }
                    success = true;
                } catch (error) {
                    console.log(`[SUBSCRIPTION] Check attempt ${attempts}/${maxAttempts} for channel ${channel}: ${error.message}`);

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    const errorCode = error.response?.body?.error_code;
                    const errorDesc = error.response?.body?.description || error.message;

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–∞–Ω–∞–ª—É
                    if (errorCode === 400 ||
                        errorDesc.includes('chat not found') ||
                        errorDesc.includes('bot was kicked') ||
                        errorDesc.includes('bot is not a member')) {
                        console.log(`[SUBSCRIPTION] Auto-approving ${channel} - access issues: ${errorDesc}`);
                        success = true;
                        break;
                    }

                    // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if (attempts < maxAttempts && (
                        errorDesc.includes('network') ||
                        errorDesc.includes('timeout') ||
                        errorDesc.includes('connection') ||
                        errorCode === 502 || errorCode === 503 || errorCode === 504
                    )) {
                        console.log(`[SUBSCRIPTION] Retrying channel ${channel} due to network error`);
                        await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ 1 —Å–µ–∫
                        continue;
                    }

                    // –î–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ - –æ–¥–æ–±—Ä—è–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    if (attempts >= maxAttempts) {
                        console.log(`[SUBSCRIPTION] Auto-approving ${channel} after ${maxAttempts} attempts - preventing false blocks`);
                        success = true;
                    }
                }
            }
        }
        return true;
    } catch (error) {
        console.error('[SUBSCRIPTION] Critical error checking subscriptions:', error);
        // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ–¥–æ–±—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return true;
    }
}

// Legacy function for backward compatibility
async function checkSubscriptions(userId) {
    return await checkAllSubscriptions(userId);
}

// Helper function to get subscription message with channel links
async function getSubscriptionMessage() {
    let message = 'üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n';
    let buttons = [];
    
    try {
        const result = await db.executeQuery('SELECT channel_id, channel_name FROM required_channels WHERE is_active = TRUE');
        result.rows.forEach((channel, index) => {
            message += `${index + 1}. ${channel.channel_name || channel.channel_id}\n`;
            
            // Create button for each channel
            const channelLink = channel.channel_id.startsWith('@') ? 
                `https://t.me/${channel.channel_id.substring(1)}` : 
                channel.channel_id;
            
            buttons.push([{ text: `üì∫ ${channel.channel_name || channel.channel_id}`, url: channelLink }]);
        });
    } catch (error) {
        console.error('Error getting channel data:', error);
    }
    
    message += '\nüìå –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏';
    buttons.push([{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subscriptions' }]);
    
    return { message, buttons };
}

// Create inline keyboards (RESTORED)
function getMainMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }
                ],
                [
                    { text: 'üéØ –ö–ª–∏–∫–µ—Ä', callback_data: 'clicker' },
                    { text: '‚≠ê –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥', callback_data: 'withdraw' }
                ],
                [
                    { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' },
                    { text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É', callback_data: 'instruction' }
                ],
                [
                    { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'ratings' },
                    { text: 'üéÅ –ö–µ–π—Å—ã', callback_data: 'cases' }
                ],
                [
                    { text: 'üé∞ –õ–æ—Ç–µ—Ä–µ—è', callback_data: 'lottery' }
                ]
            ]
        }
    };
}

function getProfileKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promocode' },
                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }
                ],
                [
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getBackToMainKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        }
    };
}

function getTaskKeyboard(taskId, channelLink) {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: channelLink }
                ],
                [
                    { text: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `task_check_${taskId}` }
                ],
                [
                    { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_skip' },
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getWithdrawKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '15 ‚≠ê', callback_data: 'withdraw_15' },
                    { text: '25 ‚≠ê', callback_data: 'withdraw_25' }
                ],
                [
                    { text: '50 ‚≠ê', callback_data: 'withdraw_50' },
                    { text: '100 ‚≠ê', callback_data: 'withdraw_100' }
                ],
                [
                    { text: 'üî• Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (1300‚≠ê)', callback_data: 'withdraw_premium' }
                ],
                [
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getRatingsKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'ratings_all' },
                    { text: 'üìÖ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'ratings_week' }
                ],
                [
                    { text: '‚≠ê –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—á–∫–∏', callback_data: 'ratings_week_points' }
                ],
                [
                    { text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        }
    };
}

function getAdminMenuKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                    { text: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏', callback_data: 'admin_tasks' }
                ],
                [
                    { text: 'üì∫ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã', callback_data: 'admin_channels' },
                    { text: 'üé∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ—è–º–∏', callback_data: 'admin_lottery' }
                ],
                [
                    { text: 'üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏', callback_data: 'admin_promocodes' },
                    { text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', callback_data: 'admin_broadcast' }
                ],
                [
                    { text: 'üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'admin_weekly_rewards' }
                ]
            ]
        }
    };
}

// Remove keyboard buttons
bot.onText(/\/start/, () => {}); // This will be handled by the main start handler

// Start command handler
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = msg.from;
    const referralCode = match ? match[1].trim() : null;
    
    try {
        // Check if user exists
        let dbUser = await db.getUser(userId);

        if (!dbUser) {
            // New user - create user first
            dbUser = await db.createOrUpdateUser(user);

            // Check for referral or tracking link
            if (referralCode) {
                // Check if it's a tracking link
                if (referralCode.startsWith('track_')) {
                    // This is a tracking link, not a referral
                    console.log(`[TRACKING] User ${userId} came from tracking link: ${referralCode}`);

                    // Record tracking click
                    try {
                        await db.executeQuery(
                            'INSERT INTO tracking_clicks (tracking_id, user_id, clicked_at) VALUES ($1, $2, NOW())',
                            [referralCode, userId]
                        );

                        // Update tracking link counter
                        await db.executeQuery(
                            'UPDATE tracking_links SET clicks_count = clicks_count + 1 WHERE tracking_id = $1',
                            [referralCode]
                        );

                        console.log(`[TRACKING] Recorded click for tracking link: ${referralCode}`);
                    } catch (error) {
                        console.error('[TRACKING] Error recording click:', error);
                    }
                } else if (!isNaN(referralCode)) {
                    // This is a regular referral
                    const referrerId = parseInt(referralCode);
                    const referrer = await db.getUser(referrerId);
                    if (referrer && referrerId !== userId) { // Prevent self-referral
                        // Store referral info temporarily, will be processed after subscription
                        await db.updateUserField(userId, 'pending_referrer', referrerId);
                    }
                }
            }
        }
        
        // Check subscriptions
        const isSubscribed = await checkAllSubscriptions(userId);
        const requiredChannels = await getRequiredChannels();

        if (!isSubscribed && requiredChannels.length > 0) {
            const subData = await getSubscriptionMessage();
            
            await bot.sendMessage(chatId, subData.message, {
                reply_markup: { inline_keyboard: subData.buttons }
            });
            return;
        }
        
        // User is subscribed - update subscription status
        await db.updateUserField(userId, 'is_subscribed', true);

        // Add weekly points for bot activation
        try {
            await db.addWeeklyPoints(userId, 1, 'bot_activation');
        } catch (pointsError) {
            console.error('Error adding weekly points for bot activation:', pointsError);
        }
        
        // Process pending referral if exists
        if (dbUser.pending_referrer) {
            const invitedBy = dbUser.pending_referrer;

            // Update referrer stats
            await db.executeQuery(
                'UPDATE users SET referrals_count = referrals_count + 1, referrals_today = referrals_today + 1, balance = balance + 3 WHERE id = $1',
                [invitedBy]
            );

            // Add tickets to active auto-referral lotteries
            try {
                const autoLotteries = await db.executeQuery(`
                    SELECT l.id
                    FROM lotteries l
                    JOIN referral_lotteries rl ON l.id = rl.lottery_id
                    WHERE l.is_active = TRUE
                    AND l.lottery_type = 'referral_auto'
                    AND rl.ends_at > NOW()
                `);

                for (const lottery of autoLotteries.rows) {
                    await db.addReferralTicket(lottery.id, invitedBy, 'referral', userId);
                }

                console.log(`[AUTO-REFERRAL] Added tickets to ${autoLotteries.rows.length} auto-referral lotteries for user ${invitedBy}`);
            } catch (error) {
                console.error('Error adding auto-referral tickets:', error);
            }

            // Clear pending referrer
            await db.updateUserField(userId, 'pending_referrer', null);
            await db.updateUserField(userId, 'invited_by', invitedBy);

            // Send notification to referrer
            try {
                const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

üë§ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **${user.first_name}**

üí∞ **–í—ã –øÔøΩÔøΩ–ª—É—á–∏–ª–∏:** +3 ‚≠ê
üíé **–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**

üë• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!`;

                await bot.sendMessage(invitedBy, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ', callback_data: 'invite' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
            } catch (error) {
                console.error('Error sending referral notification:', error);
            }
        }
        
        // Send main menu
        const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarBot!**

üí∞ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

 **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∫–ª–∏–∫–µ—Ä–µ
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (3‚≠ê –∑–∞ –¥—Ä—É–≥–∞)
‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–æ–≤ÔøΩÔøΩ—Ö –∫–µ–π—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: { remove_keyboard: true }, // Remove custom keyboard
            ...getMainMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in start command:', error);
        bot.sendMessage(chatId, '‚ùå –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// Throttler status command (admin only)
bot.onText(/\/throttler_status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    const status = throttler.getStatus();
    const statusMessage = `üìä **–°—Ç–∞—Ç—É—Å Throttler**

üì® **–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π:** ${status.queueLength}
‚öôÔ∏è **–û–±—Ä–∞–±–æ—Ç–∫–∞:** ${status.processing ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
‚è±Ô∏è **–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É:** ${status.messagesPerSecond}
‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:** ${status.intervalMs}ms

${status.queueLength > 0 ? 'üì§ –í –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞ÔøΩÔøΩ–∫–∏...' : '‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞'}`;

    bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
});

// Test command to verify version
bot.onText(/\/test_version/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    const testMessage = `üîß **–¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ –±–µ—Ç–∞**

üìÖ –í–µ—Ä—Å–∏—è: –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø v5.0 - –° –ö–ù–û–ü–ö–ê–ú–ò –ò –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò!
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üë§ –í–∞—à ID: ${userId}
üîß Admin ID: ${isAdmin(userId) ? '–í–´ –ê–î–ú–ò–ù' : '–ù–ï –ê–î–ú–ò–ù'}

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç –ù–û–í–ê–Ø –≤–µ—Ä—Å–∏—è!
üéØ Inline-–∫–Ω–æ–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`;

    bot.sendMessage(chatId, testMessage, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º –∑–≤—ë–∑–¥
bot.onText(/\/check_withdrawals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, 'üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å ÔøΩÔøΩ–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const { checkWithdrawalSystem } = require('./check-withdrawal-system');

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        const originalLog = console.log;
        let output = [];

        console.log = (...args) => {
            const message = args.join(' ');
            output.push(message);
            originalLog(...args); // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        };

        await checkWithdrawalSystem();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console.log
        console.log = originalLog;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ)
        const fullOutput = output.join('\n');
        const chunks = [];
        const maxLength = 4000;

        for (let i = 0; i < fullOutput.length; i += maxLength) {
            chunks.push(fullOutput.slice(i, i + maxLength));
        }

        for (let i = 0; i < chunks.length; i++) {
            await bot.sendMessage(chatId, `\`\`\`\n${chunks[i]}\n\`\`\``, { parse_mode: 'Markdown' });
            if (i < chunks.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            }
        }

    } catch (error) {
        console.error('Error in withdrawal check:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
bot.onText(/\/test_subscriptions (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const testUserId = parseInt(match[1]);
        bot.sendMessage(chatId, `üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUserId}...`);

        const requiredChannels = await getRequiredChannels();

        if (requiredChannels.length === 0) {
            bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É');
            return;
        }

        let message = `üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫**\n\nüë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${testUserId}\nüì∫ **–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:** ${requiredChannels.length}\n\n`;

        let allPassed = true;
        let channelDetails = '';

        for (let i = 0; i < requiredChannels.length; i++) {
            const channel = requiredChannels[i];
            try {
                const member = await bot.getChatMember(channel, testUserId);
                const status = member.status;

                if (status === 'left' || status === 'kicked') {
                    channelDetails += `‚ùå ${channel}: –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω (${status})\n`;
                    allPassed = false;
                } else {
                    channelDetails += `‚úÖ ${channel}: –ü–æ–¥–ø–∏—Å–∞–Ω (${status})\n`;
                }
            } catch (error) {
                const errorCode = error.response?.body?.error_code;
                const errorDesc = error.response?.body?.description || error.message;

                if (errorCode === 400 ||
                    errorDesc.includes('chat not found') ||
                    errorDesc.includes('bot was kicked') ||
                    errorDesc.includes('bot is not a member')) {
                    channelDetails += `‚ö†Ô∏è ${channel}: –ê–≤—Ç–æ-–æ–¥–æ–±—Ä–µ–Ω–æ (${errorDesc.substring(0, 50)}...)\n`;
                } else {
                    channelDetails += `‚ùå ${channel}: –ë–õ–û–ö–ò–†–£–ï–¢ (${errorDesc.substring(0, 50)}...)\n`;
                    allPassed = false;
                }
            }
        }

        message += channelDetails;
        message += `\nüéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${allPassed ? '‚úÖ –ü–†–û–ô–î–ï–¢ –ø—Ä–æ–≤–µ—Ä–∫—É' : '‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù'}`;

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const improvedResult = await checkAllSubscriptions(testUserId, false);
        message += `\nüîÑ **–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** ${improvedResult ? '‚úÖ –û–î–û–ë–†–ï–ù' : '‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù'}`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error in test_subscriptions:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥
bot.onText(/\/find_user (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const user = await db.getUser(targetUserId);

        if (!user) {
            bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
            return;
        }

        const registrationDate = new Date(user.registered_at).toLocaleDateString('ru-RU');

        const message = `üë§ **–ò–ΩÔøΩÔøΩ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

üÜî **ID:** \`${user.id}\`
üìù **–ò–º—è:** ${cleanDisplayText(user.first_name)}
üì± **Username:** ${user.username ? `@${user.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê
üë• **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${user.referrals_count}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** ${registrationDate}

üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥:**
tg://user?id=${user.id}

üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ
2. –û—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∑–≤—ë–∑–¥–∞–º–∏ —á–µ—Ä–µ–∑ Telegram`;

        bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', url: `tg://user?id=${user.id}` }],
                    [{ text: 'üè† –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_stats' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error in find_user command:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ pending –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—ÄÔøΩÔøΩ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.onText(/\/pending_withdrawals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const pendingWithdrawals = await db.executeQuery(`
            SELECT wr.*, u.first_name, u.username
            FROM withdrawal_requests wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.status = 'pending'
            ORDER BY wr.created_at ASC
            LIMIT 10
        `);

        if (pendingWithdrawals.rows.length === 0) {
            bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç pending –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥!');
            return;
        }

        let message = `üìã **Pending –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (${pendingWithdrawals.rows.length})**\n\n`;

        pendingWithdrawals.rows.forEach((withdrawal, index) => {
            const timeAgo = Math.floor((Date.now() - new Date(withdrawal.created_at)) / (1000 * 60 * 60));
            const typeDisplay = withdrawal.type === 'premium' ? 'Premium 3–º–µ—Å' : `${withdrawal.amount}‚≠ê`;

            message += `${index + 1}. **${cleanDisplayText(withdrawal.first_name)}**\n`;
            message += `   üí∞ ${typeDisplay} | ‚è∞ ${timeAgo}—á –Ω–∞–∑–∞–¥\n`;
            message += `   ID: \`${withdrawal.user_id}\` | Username: ${withdrawal.username ? `@${withdrawal.username}` : '–Ω–µ—Ç'}\n\n`;
        });

        message += 'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/find_user ID` –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';

        bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã', callback_data: 'fix_withdrawals' }],
                    [{ text: 'üè† –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_stats' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error in pending_withdrawals command:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –∑–∞—è–≤–æ–∫: ${error.message}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º
bot.onText(/\/fix_withdrawals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, 'üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º –∑–≤—ë–∑–¥...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const { fixWithdrawalIssues } = require('./fix-withdrawal-issues');

        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        const originalLog = console.log;
        let output = [];

        console.log = (...args) => {
            const message = args.join(' ');
            output.push(message);
            originalLog(...args);
        };

        await fixWithdrawalIssues();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console.log
        console.log = originalLog;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const fullOutput = output.join('\n');
        const chunks = [];
        const maxLength = 4000;

        for (let i = 0; i < fullOutput.length; i += maxLength) {
            chunks.push(fullOutput.slice(i, i + maxLength));
        }

        for (let i = 0; i < chunks.length; i++) {
            await bot.sendMessage(chatId, `\`\`\`\n${chunks[i]}\n\`\`\``, { parse_mode: 'Markdown' });
            if (i < chunks.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

    } catch (error) {
        console.error('Error in withdrawal fix:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏ÔøΩÔøΩ–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${error.message}`);
    }
});

// Admin commands for manual user management
bot.onText(/\/endlottery (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, ' –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const lotteryId = parseInt(match[1]);
        
        const lotteryResult = await db.executeQuery('SELECT * FROM lotteries WHERE id = $1 AND is_active = TRUE', [lotteryId]);
        
        if (lotteryResult.rows.length === 0) {
            bot.sendMessage(chatId, `‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å ID ${lotteryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
            return;
        }

        const lottery = lotteryResult.rows[0];
        
        const participantsResult = await db.executeQuery('SELECT COUNT(*) as count FROM lottery_tickets WHERE lottery_id = $1', [lotteryId]);
        const participantCount = participantsResult.rows[0].count;
        
        if (participantCount === 0) {
            bot.sendMessage(chatId, `‚ùå –í –ª–æ—Ç–µ—Ä–µ–µ ${lottery.name} –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!`);
            return;
        }

        await distributeLotteryRewards(lotteryId, lottery);
        
        bot.sendMessage(chatId, `‚úÖ –õ–æ—Ç–µ—Ä–µ—è "${lottery.name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}\nüèÜ –ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É ${Math.min(lottery.winners_count, participantCount)} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏.`);

    } catch (error) {
        console.error('Error ending lottery:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏.');
    }
});

bot.onText(/\/refupplayer (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const refCount = parseInt(match[2]);
        
        const result = await db.executeQuery(
            'UPDATE users SET referrals_count = referrals_count + $1, referrals_today = referrals_today + $2 WHERE id = $3',
            [refCount, refCount, targetUserId]
        );

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${refCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!`);
            
            try {
                await bot.sendMessage(targetUserId, `‚≠ê **–ë–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ **${refCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤** –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\nüí´ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`, { parse_mode: 'Markdown' });
            } catch (error) {
                console.log('Could not notify user about referral bonus');
            }
        } else {
            bot.sendMessage(chatId, ` –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error in refupplayer:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.');
    }
});

bot.onText(/\/starsupplayer (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const starsCount = parseInt(match[2]);
        
        const result = await db.updateUserBalance(targetUserId, starsCount);

        if (result) {
            bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –¥–æ–±–∞–≤–ª–µ–Ω–æ ${starsCount} ‚≠ê!`);
            
            try {
                await bot.sendMessage(targetUserId, `üéâ **–ë–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!**\n\n–í–∞–º –¥–æ–±–∞–≤–ª–µÔøΩÔøΩ–æ **${starsCount} ‚≠ê** –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\nüí´ –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`, { parse_mode: 'Markdown' });
            } catch (error) {
                console.log('Could not notify user about stars bonus');
            }
        } else {
            bot.sendMessage(chatId, ` –ü–æÔøΩÔøΩ—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error in starsupplayer:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤—ë–∑ÔøΩÔøΩ.');
    }
});

// Admin command handler
bot.onText(/\/admin/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    console.log(`[ADMIN] /admin command called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–ºÔøΩÔøΩ–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        return;
    }

    try {
        const stats = await db.getUserStats();

        const message = `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–º –∑–≤—ë–∑–¥:**
üìã **/pending_withdrawals** - —Å–ø–∏—Å–æ–∫ pending –∑–∞—è–≤–æ–∫
üë§ **/find_user [ID]** - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥
üß™ **/test_subscriptions [ID]** - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üîç **/check_withdrawals** - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –≤—ã–≤–æ–¥–æ–º
üîß **/fix_withdrawals** - –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üé∞ **/endlottery [ID]** - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é –≤—Ä—É—á–Ω—É—é
üë• **/refupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚≠ê **/starsupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

**–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏:**
üîó **/create_tracking_link –Ω–∞–∑–≤–∞–Ω–∏–µ** - —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
üìä **/list_tracking** - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
üìà **/tracking_stats ID** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            ...getAdminMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in admin command:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
    }
});

// Admin task creation
bot.onText(/\/create_task (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length < 3) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/create_task –∫–∞–Ω–∞–ª|–Ω–∞–∑–≤–∞–Ω–∏–µ|–Ω–∞–≥—Ä–∞–¥–∞|–ª–∏–º–∏—Ç`\n\n–ì–¥–µ –ª–∏–º–∏—Ç - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `/create_task @channel|–ú–æ–π –∫–∞–Ω–∞–ª|1.5`\n‚Ä¢ `/create_task @channel|–ú–æ–π –∫–∞–Ω–∞–ª|1.5|100`', { parse_mode: 'Markdown' });
            return;
        }

        const [channelId, channelName, reward, maxCompletions] = params;
        const rewardAmount = parseFloat(reward) || 1.0;
        const limit = maxCompletions ? parseInt(maxCompletions) : null;

        console.log('[CREATE-TASK] Creating task:', { channelId, channelName, rewardAmount, limit });

        await db.executeQuery(
            'INSERT INTO tasks (channel_id, channel_name, reward, max_completions) VALUES ($1, $2, $3, $4) ON CONFLICT (channel_id) DO UPDATE SET channel_name = $2, reward = $3, max_completions = $4',
            [channelId.trim(), channelName.trim(), rewardAmount, limit]
        );

        let message = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüì∫ –ö–∞–Ω–∞–ª: ${channelId.trim()}\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${channelName.trim()}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: ${rewardAmount} ‚≠ê`;
        if (limit) {
            message += `\nüî¢ –õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${limit}`;
        } else {
            message += `\nüî¢ –õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µÔøΩÔøΩ–∏–π: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π`;
        }

        bot.sendMessage(chatId, message);
        console.log('[CREATE-TASK] Task created successfully');

    } catch (error) {
        console.error('Error creating task:', error);
        console.error('Full error:', error.stack);
        bot.sendMessage(chatId, ` –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    }
});

// Admin task deletion
bot.onText(/\/delete_task (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const taskId = parseInt(match[1]);

        // Check if task exists
        const taskResult = await db.executeQuery('SELECT * FROM tasks WHERE id = $1', [taskId]);
        if (taskResult.rows.length === 0) {
            bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
            return;
        }

        const task = taskResult.rows[0];

        // Delete task (this will also delete related user_tasks due to foreign key)
        await db.executeQuery('DELETE FROM tasks WHERE id = $1', [taskId]);

        bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\nüì∫ –ö–∞–Ω–∞–ª: ${task.channel_name || task.channel_id}\n –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê`);

    } catch (error) {
        console.error('Error deleting task:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    }
});

// Admin channel management
bot.onText(/\/add_channel (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        const channelId = params[0].trim();
        const channelName = params[1] ? params[1].trim() : channelId;

        await db.executeQuery(
            'INSERT INTO required_channels (channel_id, channel_name) VALUES ($1, $2) ON CONFLICT (channel_id) DO NOTHING',
            [channelId, channelName]
        );

        bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\nüì∫ ${channelName} (${channelId})`);

    } catch (error) {
        console.error('Error adding channel:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.');
    }
});

// Admin lottery creation
bot.onText(/\/create_lottery (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length !== 5) {
            bot.sendMessage(chatId, '‚ùå –ùÔøΩÔøΩ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_lottery –Ω–∞–∑–≤ÔøΩÔøΩ–Ω–∏–µ|–±–∏–ª–µ—Ç—ã|—Ü–µ–Ω–∞|–ø–æ–±–µ–¥–∏—Ç–µ–ª–∏|–ø—Ä–æ—Ü–µ–Ω—Ç');
            return;
        }

        const [name, maxTickets, ticketPrice, winnersCount, botPercent] = params;
        const lotteryName = name.trim();
        const maxTicketsNum = parseInt(maxTickets);
        const ticketPriceNum = parseFloat(ticketPrice);
        const winnersCountNum = parseInt(winnersCount);
        const botPercentNum = parseInt(botPercent);

        console.log('[CREATE-LOTTERY] Creating lottery:', { lotteryName, maxTicketsNum, ticketPriceNum, winnersCountNum, botPercentNum });

        await db.executeQuery(
            'INSERT INTO lotteries (name, ticket_price, max_tickets, winners_count, bot_percent, current_tickets) VALUES ($1, $2, $3, $4, $5, 0)',
            [lotteryName, ticketPriceNum, maxTicketsNum, winnersCountNum, botPercentNum]
        );

        bot.sendMessage(chatId, `‚úÖ –õ–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞!\n ${lotteryName}\nüé´ ${maxTicketsNum} –±–∏–ª–µ—Ç–æ–≤ –ø–æ ${ticketPriceNum} ‚≠ê\nüèÜ ${winnersCountNum} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –±–æ—Ç–∞: ${botPercentNum}%`);
        console.log('[CREATE-LOTTERY] Lottery created successfully');

    } catch (error) {
        console.error('Error creating lottery:', error);
        console.error('Full error:', error.stack);
        bot.sendMessage(chatId, `‚ùå –ûÔøΩÔøΩ–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
});

// Admin referral lottery creation (Type 1: with condition)
bot.onText(/\/create_referral_lottery (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length < 5) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
\`/create_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|–≤—Ä–µ–º—è_—á–∞—Å–æ–≤|–º–∏–Ω_—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤|—Ü–µ–Ω–∞_–±–∏–ª–µ—Ç–∞|–º–µ—Å—Ç–æ1:–ø—Ä–∏–∑1|–º–µ—Å—Å–æ2:–ø—Ä–∏–∑2|...\`

–ü—Ä–∏–º–µ—Ä:
\`/create_referral_lottery –ù–µ–¥–µ–ª—å–Ω–∞—è|168|3|1.5|1:50|2:30|3:20\`

üë• –ù–∞–∑–≤–∞–Ω–∏–µ: –ù–µ–¥–µ–ª—å–Ω–∞—è
‚Ä¢ –í—Ä–µ–º—è: 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)
‚Ä¢ –£—Å–ª–æ–≤–∏–µ: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚Ä¢ –¶–µ–Ω–∞ –¥–æ–ø. –±–∏–ª–µ—Ç–∞: 1.5 ‚≠ê
‚Ä¢ –ü—Ä–∏–∑—ã: 1–º-50‚≠ê, 2–º-30‚≠ê, 3–º-20‚≠ê`, { parse_mode: 'Markdown' });
            return;
        }

        const [name, timeHours, minReferrals, ticketPrice, ...prizeParams] = params;

        // Parse prizes
        const prizes = [];
        for (const prizeParam of prizeParams) {
            const [place, amount] = prizeParam.split(':');
            if (!place || !amount) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ÔøΩÔøΩ–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–µ—Å—Ç–æ:—Å—É–º–º–∞');
                return;
            }
            prizes.push(parseFloat(amount));
        }

        if (prizes.length === 0) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑!');
            return;
        }

        // Create lottery
        const timeHoursNum = parseInt(timeHours);
        const endsAt = new Date();
        endsAt.setHours(endsAt.getHours() + timeHoursNum);

        const lotteryData = {
            name: name.trim(),
            ticket_price: 0, // Free base ticket
            max_tickets: 999999, // No limit for referral lotteries
            winners_count: prizes.length,
            lottery_type: 'referral_condition'
        };

        const refLotteryData = {
            required_referrals: parseInt(minReferrals),
            referral_time_hours: timeHoursNum,
            additional_ticket_price: parseFloat(ticketPrice),
            ends_at: endsAt
        };

        const lotteryId = await db.createReferralLottery(lotteryData, refLotteryData, prizes);

        let message = `‚úÖ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æÔøΩÔøΩ–µÔøΩÔøΩ–µ—è —Å–æ–∑–¥–∞–Ω–∞!**

üé∞ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${name}
   **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${timeHours} —á–∞—Å–æ–≤
üë• **–£—Å–ª–æ–≤–∏–µ:** –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å ${minReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
üí∞ **–¶–µ–Ω–∞ –¥–æ–ø. –±–∏–ª–µ—Ç–∞:** ${ticketPrice} ‚≠ê
üèÜ **–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞:** ${prizes.length}

**–ü—Ä–∏–∑—ã:**`;

        for (let i = 0; i < prizes.length; i++) {
            const place = i + 1;
            const emoji = place === 1 ? 'ü•á' : place === 2 ? 'ü•à' : place === 3 ? 'ü•â' : 'üèÖ';
            message += `\n${emoji} ${place} –º–µ—Å—Ç–æ: ${prizes[i]} ‚≠ê`;
        }

        message += `\n\n‚è∞ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** ${endsAt.toLocaleString('ru-RU')}`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log('[CREATE-REF-LOTTERY] Referral lottery created successfully, ID:', lotteryId);

    } catch (error) {
        console.error('Error creating referral lottery:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
});

// Admin auto referral lottery creation (Type 2: automatic)
bot.onText(/\/create_auto_referral_lottery (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length < 3) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
\`/create_auto_referral_lottery –Ω–∞–∑–≤–∞–Ω–∏–µ|–≤—Ä–µ–º—è_—á–∞—Å–æ–≤|–º–µ—Å—Ç–æ1:–ø—Ä–∏–∑1|–º–µ—Å—Ç–æ2:–ø—Ä–∏–∑2|...\`

–ü—Ä–∏–º–µ—Ä:
\`/create_auto_referral_lottery –ê–≤—Ç–æ|72|1:100|2:60|3:40|4:20|5:10\`

‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: –ê–≤—Ç–æ
‚Ä¢ –í—Ä–µ–º—è: 72 —á–∞—Å–∞ (3 –¥–Ω—è)
‚Ä¢ –ü—Ä–∏–∑—ã: 1–º-100‚≠ê, 2–º-60‚≠ê, 3–º-40‚≠ê, 4–º-20‚≠ê, 5–º-10‚≠ê
‚Ä¢ –ë–∏–ª–µ—Ç—ã: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞`, { parse_mode: 'Markdown' });
            return;
        }

        const [name, timeHours, ...prizeParams] = params;

        // Parse prizes
        const prizes = [];
        for (const prizeParam of prizeParams) {
            const [place, amount] = prizeParam.split(':');
            if (!place || !amount) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–∑–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –º–µ—Å—Ç–æ:—Å—É–º–º–∞');
                return;
            }
            prizes.push(parseFloat(amount));
        }

        if (prizes.length === 0) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æÔøΩÔøΩ–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑!');
            return;
        }

        // Create lottery
        const timeHoursNum = parseInt(timeHours);
        const endsAt = new Date();
        endsAt.setHours(endsAt.getHours() + timeHoursNum);

        const lotteryData = {
            name: name.trim(),
            ticket_price: 0, // No purchasing for auto referral
            max_tickets: 999999, // No limit
            winners_count: prizes.length,
            lottery_type: 'referral_auto'
        };

        const refLotteryData = {
            required_referrals: 1, // Each referral = 1 ticket
            referral_time_hours: timeHoursNum,
            additional_ticket_price: 0, // No additional tickets
            ends_at: endsAt
        };

        const lotteryId = await db.createReferralLottery(lotteryData, refLotteryData, prizes);

        let message = `‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å–æ–∑–¥–∞–Ω–∞!**

üé∞ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${name}
‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${timeHours} —á–∞—Å–æ–≤
üé´ **–ë–∏–ª–µ—Ç—ã:** –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∏–ª–µ—Ç
üèÜ **–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞:** ${prizes.length}

**–ü—Ä–∏–∑—ã:**`;

        for (let i = 0; i < prizes.length; i++) {
            const place = i + 1;
            const emoji = place === 1 ? 'ü•á' : place === 2 ? 'ü•à' : place === 3 ? 'ü•â' : 'üèÖ';
            message += `\n${emoji} ${place} –º–µ—Å—Ç–æ: ${prizes[i]} ‚≠ê`;
        }

        message += `\n\n‚è∞ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** ${endsAt.toLocaleString('ru-RU')}`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log('[CREATE-AUTO-REF-LOTTERY] Auto referral lottery created successfully, ID:', lotteryId);

    } catch (error) {
        console.error('Error creating auto referral lottery:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–µ—Ä–µ–∏: ${error.message}`);
    }
});

// Admin command to select lottery winners manually
bot.onText(/\/select_lottery_winners (\d+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const lotteryId = parseInt(match[1]);
        const winnersData = match[2].split(' ');

        const winners = {};
        for (const winnerStr of winnersData) {
            const [place, winnerUserId] = winnerStr.split(':');
            if (!place || !winnerUserId) {
                bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ªÔøΩÔøΩ–∑—É–π—Ç–µ: /select_lottery_winners ID –º–µ—Å—Ç–æ1:userID –º–µ—Å—Ç–æ2:userID');
                return;
            }
            winners[place] = parseInt(winnerUserId);
        }

        // Select winners and distribute prizes
        await db.selectLotteryWinners(lotteryId, winners);

        // Get lottery info and prizes for broadcast
        const lotteryResult = await db.executeQuery('SELECT name FROM lotteries WHERE id = $1', [lotteryId]);
        const prizes = await db.getLotteryPrizes(lotteryId);

        if (lotteryResult.rows.length === 0) {
            bot.sendMessage(chatId, '‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        const lotteryName = lotteryResult.rows[0].name;

        // Send broadcast message to all users
        await broadcastLotteryResults(lotteryName, prizes);

        bot.sendMessage(chatId, `‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!\n\nüéâ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ª–æ—Ç–µ—Ä–µ–∏ "${lotteryName}".`);

    } catch (error) {
        console.error('Error selecting lottery winners:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${error.message}`);
    }
});

// Referral lottery handlers
async function handleReferralLotteryCheck(chatId, messageId, userId, lotteryId) {
    try {
        // Check if user meets referral condition
        const condition = await db.checkReferralCondition(lotteryId, userId);

        if (condition.qualified) {
            // Add free ticket for qualified user
            await db.addReferralTicket(lotteryId, userId, 'free');

            await bot.editMessageText(`‚úÖ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ!\n\nüë• –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${condition.referralCount}/${condition.required}\nüé´ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç!\n\nüí∞ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –Ω–∞ –ø–æ–±–µ–¥—É.`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üé´ –ö—É–ø–∏—Ç—å –¥–æ–ø. –±–∏–ª–µ—Ç', callback_data: `ref_lottery_buy_${lotteryId}` }],
                        [{ text: 'üé∞ –ö –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
        } else {
            await bot.editMessageText(`‚ùå **–£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${condition.referralCount}/${condition.required}\n\nüìã –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ª–æ—Ç–µ—Ä–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ ${condition.required - condition.referralCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\nüí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
                        [{ text: 'üé∞ –ö –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });
        }
    } catch (error) {
        console.error('Error checking referral lottery condition:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —É—á–∞—Å—Ç–∏—è.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleReferralLotteryBuy(chatId, messageId, userId, lotteryId) {
    try {
        // Get lottery details
        const lotteryResult = await db.executeQuery(`
            SELECT l.name, rl.additional_ticket_price, rl.ends_at
            FROM lotteries l
            JOIN referral_lotteries rl ON l.id = rl.lottery_id
            WHERE l.id = $1 AND l.is_active = TRUE
        `, [lotteryId]);

        if (lotteryResult.rows.length === 0) {
            await bot.editMessageText('‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const lottery = lotteryResult.rows[0];

        // Check if lottery is still active
        if (new Date() > new Date(lottery.ends_at)) {
            await bot.editMessageText('‚ùå –õ–æ—Ç–µ—Ä–µ—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check user balance
        const user = await db.getUser(userId);
        if (user.balance < lottery.additional_ticket_price) {
            await bot.editMessageText(`‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω—É–∂–Ω–æ: ${lottery.additional_ticket_price} ‚≠ê\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' }],
                        [{ text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'invite' }],
                        [{ text: 'üé∞ –ö –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }]
                    ]
                }
            });
            return;
        }

        // Buy additional ticket
        await db.executeQuery('BEGIN');

        try {
            // Deduct balance
            await db.updateUserBalance(userId, -lottery.additional_ticket_price);

            // Add weekly points for lottery ticket purchase
            try {
                await db.addWeeklyPoints(userId, 1, 'lottery_ticket_purchase');
            } catch (pointsError) {
                console.error('Error adding weekly points for lottery purchase:', pointsError);
            }

            // Add purchased ticket
            await db.addReferralTicket(lotteryId, userId, 'purchased');

            await db.executeQuery('COMMIT');

            await bot.editMessageText(`‚úÖ **–ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!**\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–∏–ª–µ—Ç –≤ –ª–æ—Ç–µ—Ä–µ—é "${lottery.name}"!\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ: ${lottery.additional_ticket_price} ‚≠ê\nüíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance - lottery.additional_ticket_price} ‚≠ê\n\nüçÄ –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üé´ –ö—É–ø–∏—Ç—å –µ—â–µ –±–∏–ª–µ—Ç', callback_data: `ref_lottery_buy_${lotteryId}` }],
                        [{ text: 'üé∞ –ö –ª–æ—Ç–µ—Ä–µ—è–º', callback_data: 'lottery' }],
                        [{ text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                    ]
                }
            });

        } catch (error) {
            await db.executeQuery('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('Error buying referral lottery ticket:', error);
        await bot.editMessageText('‚ùå –ûÔøΩÔøΩ–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

// Function to send completed withdrawal notification to payments channel
async function sendPaymentNotification(withdrawalId, user, amount, type) {
    try {
        const completedCount = await db.getCompletedWithdrawalsCount();

        // Clean user display name
        const displayName = cleanDisplayText(user.first_name);
        const usernameText = user.username ? ` | @${user.username}` : '';

        const typeText = type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : `${amount}‚≠êÔ∏è`;

        const message = `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ${completedCount} –æ–¥–æ–±—Ä–µ–Ω–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${displayName}${usernameText}| ID: ${user.id}
üí´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${typeText}

‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üìß
üìù –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üì∫ –û—ÅÔøΩÔøΩ–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª', url: 'https://t.me/kirbyvivodstars' },
                        { text: 'üí¨ –ù–∞ÔøΩÔøΩ —á–∞—Ç', url: 'https://t.me/kirbychat_stars' },
                        { text: 'ü§ñ –ë–æ—Ç', url: 'https://t.me/kirby_stars_bot' }
                    ]
                ]
            }
        };

        await bot.sendMessage(PAYMENTS_CHANNEL, message, {
            parse_mode: 'Markdown',
            ...keyboard
        });

        console.log(`[PAYMENT] Notification sent to ${PAYMENTS_CHANNEL} for withdrawal #${completedCount}`);
        return true;
    } catch (error) {
        console.error('Error sending payment notification:', error);
        return false;
    }
}

// Function to broadcast lottery results to all users
async function broadcastLotteryResults(lotteryName, prizes) {
    try {
        const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');

        let message = `üéâ **–õ–æ—Ç–µ—Ä–µ—è "${lotteryName}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\nüèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n`;

        for (const prize of prizes) {
            if (prize.winner_user_id) {
                const winnerResult = await db.executeQuery('SELECT first_name, username FROM users WHERE id = $1', [prize.winner_user_id]);
                if (winnerResult.rows.length > 0) {
                    const winner = winnerResult.rows[0];
                    const displayName = winner.username ? `@${winner.username}` : winner.first_name;
                    const emoji = prize.place === 1 ? 'ü•á' : prize.place === 2 ? 'ü•à' : prize.place === 3 ? 'ü•â' : 'üèÖ';
                    message += `${emoji} ${prize.place} –º–µ—Å—Ç–æ: ${displayName} - ${prize.prize_amount} ‚≠ê\n`;
                }
            }
        }

        message += '\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéä';

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üé∞ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö', callback_data: 'lottery' }],
                    [{ text: 'üè† –ì–ª–∞–≤ÔøΩÔøΩ–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        // Use throttler for broadcast
        const result = await throttler.broadcastMessages(
            users.rows,
            (user) => bot.sendMessage(user.id, message, {
                parse_mode: 'Markdown',
                ...keyboard
            })
        );

        console.log(`[LOTTERY-BROADCAST] Results sent to ${result.success} out of ${result.total} users, ${result.errors} errors`);
        return result.success;

    } catch (error) {
        console.error('Error broadcasting lottery results:', error);
        throw error;
    }
}

// Admin promocode creation
bot.onText(/\/create_promo (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const params = match[1].split('|');
        if (params.length !== 3) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_promo –ö–û–î|–Ω–∞–≥—Ä–∞–¥–∞|–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
            return;
        }

        const [code, reward, maxUses] = params;

        await db.executeQuery(
            'INSERT INTO promocodes (code, reward, max_uses, created_by) VALUES ($1, $2, $3, $4)',
            [code.trim().toUpperCase(), parseFloat(reward), parseInt(maxUses), userId]
        );

        bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\nüéÅ –ö–æ–¥: ${code.toUpperCase()}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: ${reward} ‚≠ê\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${maxUses}`);

    } catch (error) {
        console.error('Error creating promocode:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).');
    }
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`[CALLBACK] Received: ${data} from userId: ${userId}`);

    try {
        // Check subscription for all important buttons (except admin functions and withdrawal actions)
        const skipSubscriptionCheck = [
            'check_subscriptions',
            'main_menu',
            'withdraw',
            'withdraw_15',
            'withdraw_25',
            'withdraw_50',
            'withdraw_100',
            'withdraw_premium'
        ];

        if (!skipSubscriptionCheck.includes(data) && !data.startsWith('admin_') && !data.startsWith('approve_withdrawal_') && !data.startsWith('reject_withdrawal_') && !isAdmin(userId)) {
            const isSubscribed = await checkAllSubscriptions(userId);
            if (!isSubscribed) {
                const subData = await getSubscriptionMessage();
                await bot.editMessageText(subData.message, {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    reply_markup: { inline_keyboard: subData.buttons }
                });
                await bot.answerCallbackQuery(callbackQuery.id);
                return;
            }
        }

        // Get user data
        const user = await db.getUser(userId);
        
        if (!user && !data.startsWith('admin_') && data !== 'main_menu' && data !== 'check_subscriptions') {
            await bot.editMessageText(
                '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
                {
                    chat_id: chatId,
                    message_id: msg.message_id
                }
            );
            return;
        }

        // Handle different callback data
        switch (data) {
            case 'check_subscriptions':
                const isSubscribed = await checkAllSubscriptions(userId);
                
                if (isSubscribed) {
                    await db.updateUserField(userId, 'is_subscribed', true);

                    // Add weekly points for bot activation
                    try {
                        await db.addWeeklyPoints(userId, 1, 'bot_activation');
                    } catch (pointsError) {
                        console.error('Error adding weekly points for bot activation:', pointsError);
                    }
                    
                    // Process pending referral if exists
                    const user = await db.getUser(userId);
                    if (user && user.pending_referrer) {
                        const invitedBy = user.pending_referrer;

                        // Update referrer stats
                        await db.executeQuery(
                            'UPDATE users SET referrals_count = referrals_count + 1, referrals_today = referrals_today + 1, balance = balance + 3 WHERE id = $1',
                            [invitedBy]
                        );

                        // Add weekly points for successful referral
                        try {
                            await db.addWeeklyPoints(invitedBy, 1, 'referral_success');
                        } catch (pointsError) {
                            console.error('Error adding weekly points for referral:', pointsError);
                        }

                        // Add tickets to active auto-referral lotteries
                        try {
                            const autoLotteries = await db.executeQuery(`
                                SELECT l.id
                                FROM lotteries l
                                JOIN referral_lotteries rl ON l.id = rl.lottery_id
                                WHERE l.is_active = TRUE
                                AND l.lottery_type = 'referral_auto'
                                AND rl.ends_at > NOW()
                            `);

                            for (const lottery of autoLotteries.rows) {
                                await db.addReferralTicket(lottery.id, invitedBy, 'referral', userId);
                            }

                            console.log(`[AUTO-REFERRAL] Added tickets to ${autoLotteries.rows.length} auto-referral lotteries for user ${invitedBy}`);
                        } catch (error) {
                            console.error('Error adding auto-referral tickets:', error);
                        }

                        // Clear pending referrer
                        await db.updateUserField(userId, 'pending_referrer', null);
                        await db.updateUserField(userId, 'invited_by', invitedBy);

                        // Send notification to referrer
                        try {
                            const userInfo = await db.getUser(userId);
                            const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **${userInfo.first_name}**

üí∞ **–í—ã –ø–æ–ª—É—á–∏–ª–∏:** +3 ‚≠ê
üíé **–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!**

üë• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!`;

                            await bot.sendMessage(invitedBy, message, { parse_mode: 'Markdown' });
                        } catch (error) {
                            console.error('Error sending referral notification:', error);
                        }
                    }
                    
                    await handleMainMenu(chatId, msg.message_id);
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: '‚ùå –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ ÔøΩÔøΩ—Å–µ –∫–∞–Ω–∞–ª—ã!',
                        show_alert: true
                    });
                }
                break;
            case 'main_menu':
                await handleMainMenu(chatId, msg.message_id);
                break;
            case 'profile':
                await handleProfile(chatId, msg.message_id, user);
                break;
            case 'invite':
                await handleInvite(chatId, msg.message_id, user);
                break;
            case 'clicker':
                await handleClicker(chatId, msg.message_id, user);
                break;
            case 'withdraw':
                await handleWithdraw(chatId, msg.message_id, user);
                break;
            case 'tasks':
                await handleTasks(chatId, msg.message_id, user);
                break;
            case 'instruction':
                await handleInstruction(chatId, msg.message_id);
                break;
            case 'ratings':
                await handleRatings(chatId, msg.message_id);
                break;
            case 'ratings_all':
                await handleRatingsAll(chatId, msg.message_id);
                break;
            case 'ratings_week':
                await handleRatingsWeek(chatId, msg.message_id);
                break;
            case 'ratings_week_points':
                await handleRatingsWeekPoints(chatId, msg.message_id);
                break;
            case 'cases':
                await handleCases(chatId, msg.message_id, user);
                break;
            case 'lottery':
                await handleLottery(chatId, msg.message_id, userId);
                break;
            case 'promocode':
                await handlePromocodeInput(chatId, msg.message_id, userId);
                break;
            
            // Withdraw handlers
            case 'withdraw_15':
            case 'withdraw_25':
            case 'withdraw_50':
            case 'withdraw_100':
            case 'withdraw_premium':
                await handleWithdrawRequest(chatId, msg.message_id, userId, data);
                break;
            
            // Task handlers
            case 'task_skip':
                await handleTaskSkip(chatId, msg.message_id, userId);
                break;
            
            // Admin handlers
            case 'admin_stats':
                if (isAdmin(userId)) await handleAdminStats(chatId, msg.message_id);
                break;
            case 'admin_weekly_rewards':
                if (isAdmin(userId)) {
                    await handleAdminWeeklyRewards(chatId, msg.message_id);
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!', show_alert: true });
                }
                break;
            case 'admin_weekly_enable':
                if (isAdmin(userId)) {
                    await db.updateWeeklyRewardsSettings(true);
                    await handleAdminWeeklyRewards(chatId, msg.message_id);
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥ÔøΩÔøΩ–∞–¥—ã –≤–∫–ª—é—á–µ–Ω—ã!' });
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!', show_alert: true });
                }
                break;
            case 'admin_weekly_disable':
                if (isAdmin(userId)) {
                    await db.updateWeeklyRewardsSettings(false);
                    await handleAdminWeeklyRewards(chatId, msg.message_id);
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!' });
                } else {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –£ –≤ÔøΩÔøΩ—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!', show_alert: true });
                }
                break;
            case 'admin_weekly_trigger':
                if (isAdmin(userId)) {
                    await bot.answerCallbackQuery(callbackQuery.id, { text: 'üèÜ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥...' });
                    try {
                        const result = await distributeWeeklyRewards(true);
                        if (result.success) {
                            await bot.editMessageText(`‚úÖ **–ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!**\n\nüë• –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.users}\nüìä –û—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã\n\nüéØ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å!`, {
                                chat_id: chatId,
                                message_id: msg.message_id,
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏', callback_data: 'admin_weekly_rewards' }],
                                        [{ text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }]
                                    ]
                                }
                            });
                        } else {
                            await bot.editMessageText(`‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥**\n\n${result.message}`, {
                                chat_id: chatId,
                                message_id: msg.message_id,
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{ text: 'üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏', callback_data: 'admin_weekly_rewards' }],
                                        [{ text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }]
                                    ]
                                }
                            });
                        }
                    } catch (error) {
                        console.error('Error in manual weekly rewards trigger:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—ÉÔøΩÔøΩ–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏', callback_data: 'admin_weekly_rewards' }],
                                    [{ text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }]
                                ]
                            }
                        });
                    }
                }
                break;
            case 'admin_menu':
                if (isAdmin(userId)) {
                    const stats = await db.getUserStats();
                    const message = `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

ÔøΩÔøΩÔøΩÔøΩ **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

                    await bot.editMessageText(message, {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        ...getAdminMenuKeyboard()
                    });
                }
                break;

            // –°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

            case 'admin_tasks':
                console.log(`[MAIN] Admin tasks called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminTasks...');
                        console.log('[MAIN] adminHandlers object:', typeof adminHandlers);
                        console.log('[MAIN] handleAdminTasks function:', typeof adminHandlers.handleAdminTasks);

                        if (typeof adminHandlers.handleAdminTasks !== 'function') {
                            throw new Error('handleAdminTasks is not a function');
                        }

                        await adminHandlers.handleAdminTasks(bot, chatId, msg.message_id);
                        console.log('[MAIN] handleAdminTasks completed successfully');
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminTasks:', error);
                        console.error('[MAIN] Error stack:', error.stack);
                        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_channels':
                console.log(`[MAIN] Admin channels called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminChannels...');
                        console.log('[MAIN] handleAdminChannels function:', typeof adminHandlers.handleAdminChannels);

                        if (typeof adminHandlers.handleAdminChannels !== 'function') {
                            throw new Error('handleAdminChannels is not a function');
                        }

                        await adminHandlers.handleAdminChannels(bot, chatId, msg.message_id);
                        console.log('[MAIN] handleAdminChannels completed successfully');
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminChannels:', error);
                        console.error('[MAIN] Error stack:', error.stack);
                        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_lottery':
                console.log(`[MAIN] Admin lottery called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminLottery...');
                        await adminHandlers.handleAdminLottery(bot, chatId, msg.message_id);
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminLottery:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–µ—Ä–µ—è–º–∏.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_promocodes':
                console.log(`[MAIN] Admin promocodes called by userId: ${userId}, isAdmin: ${isAdmin(userId)}`);
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling adminHandlers.handleAdminPromocodes...');
                        await adminHandlers.handleAdminPromocodes(bot, chatId, msg.message_id);
                    } catch (error) {
                        console.error('[MAIN] Error in handleAdminPromocodes:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]] }
                        });
                    }
                }
                break;
            case 'admin_broadcast':
                if (isAdmin(userId)) await adminHandlers.handleAdminBroadcast(bot, chatId, msg.message_id);
                break;
            case 'broadcast_tasks':
                if (isAdmin(userId)) await adminHandlers.handleBroadcastTasks(bot, chatId, msg.message_id);
                break;
            case 'broadcast_referrals':
                if (isAdmin(userId)) await adminHandlers.handleBroadcastReferrals(bot, chatId, msg.message_id);
                break;
            case 'broadcast_custom':
                if (isAdmin(userId)) {
                    try {
                        console.log('[MAIN] Calling handleBroadcastCustom...');
                        await handleBroadcastCustom(chatId, msg.message_id, userId);
                        console.log('[MAIN] handleBroadcastCustom completed successfully');
                    } catch (error) {
                        console.error('[MAIN] Error in handleBroadcastCustom:', error);
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.', {
                            chat_id: chatId,
                            message_id: msg.message_id,
                            reply_markup: { inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]] }
                        });
                    }
                }
                break;
            case 'admin_list_tasks':
                if (isAdmin(userId)) await adminHandlers.handleAdminListTasks(bot, chatId, msg.message_id);
                break;
            case 'admin_list_channels':
                if (isAdmin(userId)) await adminHandlers.handleAdminListChannels(bot, chatId, msg.message_id);
                break;
            case 'admin_list_lotteries':
                if (isAdmin(userId)) await adminHandlers.handleAdminListLotteries(bot, chatId, msg.message_id);
                break;
            case 'admin_list_promos':
                if (isAdmin(userId)) await adminHandlers.handleAdminListPromos(bot, chatId, msg.message_id);
                break;
            case 'admin_menu':
                if (isAdmin(userId)) await handleAdminMenu(chatId, msg.message_id);
                break;
            case 'cancel_broadcast':
                if (isAdmin(userId)) {
                    await db.updateUserField(userId, 'temp_action', null);
                    await bot.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        reply_markup: {
                            inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]]
                        }
                    });
                }
                break;

            default:
                // Handle dynamic callback data
                if (data.startsWith('task_check_')) {
                    const taskId = data.replace('task_check_', '');
                    await handleTaskCheck(chatId, msg.message_id, userId, taskId);
                } else if (data.startsWith('lottery_buy_')) {
                    const lotteryId = data.replace('lottery_buy_', '');
                    await handleLotteryBuy(chatId, msg.message_id, userId, lotteryId);
                } else if (data.startsWith('ref_lottery_check_')) {
                    const lotteryId = data.replace('ref_lottery_check_', '');
                    await handleReferralLotteryCheck(chatId, msg.message_id, userId, lotteryId);
                } else if (data.startsWith('ref_lottery_buy_')) {
                    const lotteryId = data.replace('ref_lottery_buy_', '');
                    await handleReferralLotteryBuy(chatId, msg.message_id, userId, lotteryId);
                } else if (data === 'lottery_sold_out') {
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: 'üö´ –í—Å–µ –±–∏–ª–µ—Ç—ã –≤ —ç—Ç—É –ª–æ—Ç–µ—Ä–µ—é –ø—Ä–æ–¥–∞–Ω—ã!',
                        show_alert: true
                    });
                    return; // Don't process further
                } else if (data.startsWith('approve_withdrawal_')) {
                    if (isAdmin(userId)) await handleWithdrawalApproval(chatId, msg.message_id, data);
                } else if (data.startsWith('reject_withdrawal_')) {
                    if (isAdmin(userId)) await handleWithdrawalRejection(chatId, msg.message_id, data, userId);
                }
                break;
        }

        // Answer callback query
        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('Error handling callback query:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true
        });
    }
});

// Lottery reward distribution
async function distributeLotteryRewards(lotteryId, lottery) {
    try {
        console.log(`[LOTTERY] Starting reward distribution for lottery ${lotteryId}`);

        // Get all participants
        const participants = await db.executeQuery(
            'SELECT user_id FROM lottery_tickets WHERE lottery_id = $1',
            [lotteryId]
        );

        if (participants.rows.length === 0) {
            console.log('[LOTTERY] No participants found');
            return;
        }

        // Select random winners
        const winnersCount = Math.min(lottery.winners_count, participants.rows.length);
        const shuffled = [...participants.rows].sort(() => 0.5 - Math.random());
        const winners = shuffled.slice(0, winnersCount);

        // Calculate reward per winner (with bot percentage)
        const totalPrizePool = lottery.ticket_price * lottery.max_tickets;
        const botPercent = lottery.bot_percent || 20; // Default 20% if not set
        const playersPrizePool = totalPrizePool * (1 - botPercent / 100);
        const botTake = totalPrizePool - playersPrizePool;
        const rewardPerWinner = Math.floor(playersPrizePool / winnersCount * 100) / 100; // Round to 2 decimals

        console.log(`[LOTTERY] Total pool: ${totalPrizePool} ‚≠ê, Bot take (${botPercent}%): ${botTake} ‚≠ê, Players pool: ${playersPrizePool} ‚≠ê, ${winnersCount} winners, ${rewardPerWinner} ‚≠ê each`);

        // Distribute rewards
        for (const winner of winners) {
            await db.updateUserBalance(winner.user_id, rewardPerWinner);

            // Notify winner
            try {
                const user = await db.getUser(winner.user_id);
                const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ!**

üé∞ –õ–æ—Ç–µ—Ä–µ—è: **${lottery.name}**
üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: **${rewardPerWinner} ‚≠ê**
üèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winnersCount}

üéâ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!`;

                await bot.sendMessage(winner.user_id, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                console.log(`[LOTTERY] Winner ${winner.user_id} notified`);
            } catch (notifyError) {
                console.error(`[LOTTERY] Failed to notify winner ${winner.user_id}:`, notifyError);
            }
        }

        // Mark lottery as inactive
        await db.executeQuery(
            'UPDATE lotteries SET is_active = FALSE WHERE id = $1',
            [lotteryId]
        );

        console.log(`[LOTTERY] Lottery ${lotteryId} completed successfully`);

    } catch (error) {
        console.error('[LOTTERY] Error distributing rewards:', error);
    }
}

// Menu handlers
async function handleMainMenu(chatId, messageId) {
    const welcomeMessage = `üåü **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é StarBot**

üí∞ **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üéØ **–ö–ª–∏–∫–µ—Ä** - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ 0.1 ‚≠ê
‚Ä¢ üìã **–ó–∞–¥–∞–Ω–∏—è** - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∑–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
‚Ä¢ üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã** - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π (3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ)
‚Ä¢ üéÅ **–ö–µ–π—Å—ã** - –ø—Ä–∏–∑—ã –æ—Ç 1 –¥–æ 10 ‚≠ê
‚Ä¢ üé∞ **–õÔøΩÔøΩ—Ç–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

    await safeEditMessage(chatId, messageId, welcomeMessage, {
        parse_mode: 'Markdown',
        ...getMainMenuKeyboard()
    });
}

async function handleProfile(chatId, messageId, user) {
    const registrationDate = new Date(user.registered_at).toLocaleDateString('ru-RU');
    const totalEarned = user.referrals_count * 3; // From referrals

    const message = `üë§ **–õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å**

 **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**
‚Ä¢ –ò–º—è: **${user.first_name}**
‚Ä¢ ID: \`${user.id}\`
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: **${registrationDate}**

üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **${user.balance} ‚≠ê**
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: **${totalEarned} ‚≠ê**

üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: **${user.referrals_count}**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: **${user.referrals_today}**

üéØ **–ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
${user.last_click ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫: ${new Date(user.last_click).toLocaleDateString('ru-RU')}` : '‚Ä¢ –ö–ª–∏–∫–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}
${user.last_case_open ? `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–µ–π—Å: ${new Date(user.last_case_open).toLocaleDateString('ru-RU')}` : '‚Ä¢ –ö–µ–π—Å—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å'}`;

    await safeEditMessage(chatId, messageId, message, {
        parse_mode: 'Markdown',
        ...getProfileKeyboard()
    });
}

async function handleInvite(chatId, messageId, user) {
    // Get bot username
    let botUsername = 'starsbotexample'; // fallback
    try {
        const botInfo = await bot.getMe();
        botUsername = botInfo.username;
    } catch (error) {
        console.error('Error getting bot info:', error);
    }

    const inviteLink = `https://t.me/${botUsername}?start=${user.id}`;

    const message = `üåü **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**

üí∞ **–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏!**
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ **3 ‚≠ê** –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

üîó **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`${inviteLink}\`

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:**
üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π –ø—Ä–∏–≥–ªÔøΩÔøΩ—à–µ–Ω–æ: **${user.referrals_count}**
üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: **${user.referrals_today}**
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: **${user.referrals_count * 3} ‚≠ê**

üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞ÔøΩÔøΩ—Ç:**
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏
2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ
3. –î—Ä—É–≥ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
4. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3 ‚≠ê –Ω–∞ –±–∞–ª–∞–Ω—Å!

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üì• –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥! ${inviteLink}` }],
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        }
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...keyboard
    });
}

async function handleClicker(chatId, messageId, user) {
    const now = new Date();
    const lastClick = user.last_click ? new Date(user.last_click) : null;
    const clicksToday = user.clicks_today || 0;

    // Check if it's a new day (reset clicks)
    const isNewDay = !lastClick || now.toDateString() !== lastClick.toDateString();
    const currentClicks = isNewDay ? 0 : clicksToday;

    // Maximum 10 clicks per day
    if (currentClicks >= 10) {
        const nextDay = new Date(now);
        nextDay.setDate(nextDay.getDate() + 1);
        nextDay.setHours(0, 0, 0, 0);

        const timeUntilNext = nextDay - now;
        const hoursLeft = Math.floor(timeUntilNext / (1000 * 60 * 60));
        const minutesLeft = Math.floor((timeUntilNext % (1000 * 60 * 60)) / (1000 * 60));

        const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

‚ùå **–õ–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!**

üìä **–°–µ–≥–æ–¥–Ω—è –∫–ª–∏–∫–Ω—É—Ç–æ:** ${currentClicks}/10
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

‚è≥ **–î–æ ÔøΩÔøΩ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${hoursLeft}—á ${minutesLeft}–º
üéÅ **–ó–∞–≤—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ:** 10 –Ω–æ–≤—ã—Ö –∫–ª–∏–∫–æ–≤

üí° **–°–æ–≤–µ—Ç:** –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
        return;
    }

    // Check cooldown for next click (if not first click of the day)
    if (!isNewDay && lastClick && currentClicks > 0) {
        // Progressive delay: 5, 10, 15, 20, 25, 30, 35, 40, 45 minutes (max 45 for 9th click)
        const delayMinutes = Math.min(currentClicks * 5, 45);
        const nextClickTime = new Date(lastClick.getTime() + delayMinutes * 60 * 1000);

        if (now < nextClickTime) {
            const timeLeft = nextClickTime - now;
            const minutesLeft = Math.ceil(timeLeft / (1000 * 60));

            const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

‚è∞ **–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–∫–æ–º!**

üìä **–°–µ–≥–æ–¥–Ω—è –∫–ª–∏–∫–Ω—É–ª–æ:** ${currentClicks}/10
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

‚è≥ **–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞:** ${minutesLeft} –º–∏–Ω
‚è∞ **–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞:** 0.1 ‚≠ê

‚åõ **–í—Ä–µ–º—è –æ–∂ÔøΩÔøΩ–¥–∞–Ω–∏—è:** ${delayMinutes} –º–∏–Ω (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –∫–ª–∏–∫–æ–º)`;

            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'clicker' }],
                            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
            } catch (editError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                if (!editError.message?.includes('message is not modified')) {
                    console.error('Error editing clicker message:', editError);
                }
            }
            return;
        }
    }

    // Can click - award reward
    const reward = 0.1;
    const newClicks = currentClicks + 1;

    try {
        await db.executeQuery('BEGIN');

        await db.updateUserBalance(user.id, reward);
        await db.updateUserField(user.id, 'last_click', now);
        await db.updateUserField(user.id, 'clicks_today', newClicks);

        await db.executeQuery('COMMIT');

        // Add weekly points for click (separate transaction to not break main clicker if points fail)
        try {
            await db.addWeeklyPoints(user.id, 1, 'click');
        } catch (pointsError) {
            console.error('Error adding weekly points for click:', pointsError);
            // Continue - don't break clicker functionality for points error
        }

    } catch (error) {
        try {
            await db.executeQuery('ROLLBACK');
        } catch (rollbackError) {
            console.error('Error rolling back clicker transaction:', rollbackError);
        }

        console.error('Error in clicker operation:', error);

        try {
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
        } catch (botError) {
            console.error('Error sending clicker error message:', botError);
        }
        return;
    }

    // Calculate next wait time
    const nextDelayMinutes = newClicks < 10 ? newClicks * 5 : '–ó–∞–≤—Ç—Ä–∞';
    const remainingClicks = 10 - newClicks;

    const message = `üéØ **–ö–ª–∏–∫–µ—Ä**

üéâ **–û—Ç–ª–∏—á–Ω–æ!** –ö–ª–∏–∫ ${newClicks}/10 –≤—ã–ø–æ–ª–Ω–µ–Ω!
üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: **+${reward} ‚≠ê** (+1 –æ—á–∫–æ)

 **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${(parseFloat(user.balance) + parseFloat(reward)).toFixed(1)} ‚≠ê
üî¢ –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤: ${remainingClicks}
${remainingClicks > 0 ? `‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑: ${nextDelayMinutes} –º–∏–Ω` : 'üéâ –í—Å–µ –∫–ª–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!'}

 **–°–æ–≤–µ—Ç:** –° –∫–∞–∂–¥—ã–º –∫–ª–∏–∫–æ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 5 –º–∏–Ω—É—Ç`;

    try {
        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    remainingClicks > 0 ? [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'clicker' }] : [],
                    [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ].filter(row => row.length > 0)
            }
        });
    } catch (editError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (!editError.message?.includes('message is not modified')) {
            console.error('Error editing clicker success message:', editError);
        }
    }
}

async function handleWithdraw(chatId, messageId, user) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (—Å retry –∏ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
    const isSubscribed = await checkAllSubscriptions(user.id, false);

    if (!isSubscribed) {
        const subData = await getSubscriptionMessage();
        await safeEditMessage(chatId, messageId, subData.message, {
            reply_markup: { inline_keyboard: subData.buttons }
        });
        return;
    }

    const message = `‚≠ê **–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥**

**–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance} ‚≠ê

${user.referrals_count < 5 ?
    '‚ùå **–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**' :
    '‚úÖ **–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞**'
}

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;

    await safeEditMessage(chatId, messageId, message, {
        parse_mode: 'Markdown',
        ...getWithdrawKeyboard()
    });
}

async function handleWithdrawRequest(chatId, messageId, userId, data) {
    try {
        const user = await db.getUser(userId);

        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        if (user.referrals_count < 5) {
            await bot.editMessageText('‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const amounts = {
            'withdraw_15': 15,
            'withdraw_25': 25,
            'withdraw_50': 50,
            'withdraw_100': 100,
            'withdraw_premium': 1300
        };

        const amount = amounts[data];
        const type = data === 'withdraw_premium' ? 'premium' : 'stars';

        if (!amount) {
            await bot.editMessageText('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check balance BEFORE starting transaction
        if (parseFloat(user.balance) < amount) {
            await bot.editMessageText('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Start transaction for withdrawal - but DON'T deduct balance yet
        await db.executeQuery('BEGIN');

        try {
            // Double-check balance in transaction (in case of concurrent requests)
            const currentUser = await db.getUser(userId);
            if (parseFloat(currentUser.balance) < amount) {
                await db.executeQuery('ROLLBACK');
                await bot.editMessageText('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!', {
                    chat_id: chatId,
                    message_id: messageId,
                    ...getBackToMainKeyboard()
                });
                return;
            }

            // Create withdrawal request WITHOUT deducting balance first
            const withdrawalResult = await db.executeQuery(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES ($1, $2, $3) RETURNING id',
                [userId, amount, type]
            );
            const withdrawalId = withdrawalResult.rows[0].id;

            // Prepare admin notification
            const cleanName = cleanDisplayText(user.first_name);
            const adminMessage = `üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${withdrawalId}**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${cleanName}
üÜî **ID:** ${user.id}
${user.username ? `üì± **Username:** @${user.username}` : ''}
üîó **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id=${user.id})

üí∞ **–°—É–º–º–∞:** ${amount} ‚≠ê
üì¶ **–¢–∏–ø:** ${type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : '–ó–≤—ë–∑–¥—ã'}
üíé **–¢–µ–∫ÔøΩÔøΩ—â–∏–π –±–∞–ª–∞–ΩÔøΩÔøΩ:** ${currentUser.balance} ‚≠ê
${amount > 50 ? '\n‚ö†Ô∏è **–ö–†–£–ü–ù–ê–Ø –°–£–ú–ú–ê - —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏**' : ''}`;

            const adminKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `approve_withdrawal_${userId}_${amount}_${type}_${withdrawalId}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_data: `reject_withdrawal_${userId}_${amount}_${type}_${withdrawalId}` }
                        ]
                    ]
                }
            };

            // Send admin notification - if this fails, rollback
            await bot.sendMessage(ADMIN_CHANNEL, adminMessage, {
                parse_mode: 'Markdown',
                ...adminKeyboard
            });

            // ONLY deduct balance AFTER successful admin notification
            await db.updateUserBalance(userId, -amount);

            // Commit transaction only after everything succeeded
            await db.executeQuery('COMMIT');

            await bot.editMessageText('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });

            console.log(`[WITHDRAWAL] Request created safely: User ${userId}, Amount ${amount}, Type ${type}, ID ${withdrawalId}`);

        } catch (error) {
            // Rollback transaction on ANY error - this ensures balance is never deducted if something fails
            await db.executeQuery('ROLLBACK');
            console.error('[WITHDRAWAL] Error in transaction:', error);

            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –í–∞—à–∏ –∑–≤—ë–∑–¥—ã –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
        }

    } catch (error) {
        console.error('[WITHDRAWAL] Error in transaction:', error?.message || error);
        try {
            await bot.sendMessage(ADMIN_CHANNEL, adminMessage, {
                parse_mode: 'Markdown',
                ...adminKeyboard
            });
        } catch (sendError) {
            console.error('[WITHDRAWAL] Error sending admin message:', sendError.message, adminMessage);
            throw sendError; // —á—Ç–æ–±—ã –æ—Ç–∫–∞—Ç —Å—Ä–∞–±–æ—Ç–∞–ª
        }
    }
}

async function handleTasks(chatId, messageId, user) {
    try {
        // Get all tasks
        const allTasks = await db.getTasks();

        // Get completed tasks for user
        const completedTasks = await db.getUserCompletedTasks(user.id);
        const completedTaskIds = completedTasks.map(t => t.id);

        // Filter available tasks
        const availableTasks = allTasks.filter(task => !completedTaskIds.includes(task.id));

        if (availableTasks.length === 0) {
            await bot.editMessageText('‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Show first available task with channel link
        const task = availableTasks[0];
        const channelLink = task.channel_id.startsWith('@') ?
            `https://t.me/${task.channel_id.substring(1)}` :
            task.channel_id;

        const message = `üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è**

üìã **–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:**
–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª **${task.channel_name || task.channel_id}**

üí∞ **–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:** ${task.reward} ‚≠ê
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${completedTasks.length}/${allTasks.length} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ù–∞ÔøΩÔøΩ–º–∏—Ç–µ "–ü–æ–¥–ø–∏ÔøΩÔøΩ–∞—Ç—å—Å—è" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞–Ω–∞–ª—É
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
4. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getTaskKeyboard(task.id, channelLink)
        });

    } catch (error) {
        console.error('Error in tasks:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}


async function handleTaskCheck(chatId, messageId, userId, taskId) {
    try {
        const result = await db.executeQuery('SELECT * FROM tasks WHERE id = $1 AND is_active = TRUE', [taskId]);

        if (result.rows.length === 0) {
            await bot.editMessageText('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const task = result.rows[0];

        // Check if user is subscribed to the channel
        try {
            const member = await bot.getChatMember(task.channel_id, userId);
            
            if (member.status === 'left' || member.status === 'kicked') {
                await bot.editMessageText('‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                    chat_id: chatId,
                    message_id: messageId,
                    ...getTaskKeyboard(taskId)
                });
                return;
            }

            // Complete the task
            try {
                const completed = await db.completeTask(userId, taskId);

                if (completed) {
                    await bot.editMessageText(`‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ **${task.reward} ‚≠ê**\n\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å!`, {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        ...getBackToMainKeyboard()
                    });
                } else {
                    await bot.editMessageText('‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ.', {
                        chat_id: chatId,
                        message_id: messageId,
                        ...getBackToMainKeyboard()
                    });
                }
            } catch (taskError) {
                if (taskError.message === 'Task completion limit reached') {
                    await bot.editMessageText('‚ùå **–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!**\n\n–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è!', {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        ...getBackToMainKeyboard()
                    });
                } else {
                    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                        chat_id: chatId,
                        message_id: messageId,
                        ...getBackToMainKeyboard()
                    });
                }
            }

        } catch (error) {
            console.error(`Error checking task subscription: ${error.message}`);

            // Only auto-approve for specific errors (chat not found, private chat)
            if (error.response?.body?.error_code === 400 || error.response?.body?.description?.includes('chat not found')) {
                console.log(`Auto-approving task ${taskId} for user ${userId} - chat not accessible`);

                try {
                    const completed = await db.completeTask(userId, taskId);

                    if (completed) {
                        await bot.editMessageText(`‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ **${task.reward} ‚≠ê**\n\nüí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n‚ö†Ô∏è *–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏*`, {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            ...getBackToMainKeyboard()
                        });
                    } else {
                        await bot.editMessageText('‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ.', {
                            chat_id: chatId,
                            message_id: messageId,
                            ...getBackToMainKeyboard()
                        });
                    }
                } catch (taskError) {
                    if (taskError.message === 'Task completion limit reached') {
                        await bot.editMessageText(' **–õÔøΩÔøΩ–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!**\n\n–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.', {
                            chat_id: chatId,
                            message_id: messageId,
                            parse_mode: 'Markdown',
                            ...getBackToMainKeyboard()
                        });
                    } else {
                        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                            chat_id: chatId,
                            message_id: messageId,
                            ...getBackToMainKeyboard()
                        });
                    }
                }
            } else {
                await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.', {
                    chat_id: chatId,
                    message_id: messageId,
                    ...getBackToMainKeyboard()
                });
            }
        }

    } catch (error) {
        console.error('Error in task check:', error);
    }
}

async function handleTaskSkip(chatId, messageId, userId) {
    try {
        const user = await db.getUser(userId);

        // Get all tasks
        const allTasks = await db.getTasks();

        // Get completed tasks for user
        const completedTasks = await db.getUserCompletedTasks(userId);
        const completedTaskIds = completedTasks.map(t => t.id);

        // Filter available tasks
        const availableTasks = allTasks.filter(task => !completedTaskIds.includes(task.id));

        if (availableTasks.length <= 1) {
            // No more tasks available
            await bot.editMessageText('‚úÖ –ë–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç!\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Show next available task (skip first one)
        const nextTask = availableTasks[1];
        const channelLink = nextTask.channel_id.startsWith('@') ?
            `https://t.me/${nextTask.channel_id.substring(1)}` :
            nextTask.channel_id;

        const message = `üìã **–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ**

üéØ **–ó–∞–¥–∞–Ω–∏–µ:**
–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª **${nextTask.channel_name || nextTask.channel_id}**

üí∞ **–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:** ${nextTask.reward} ‚≠ê
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${completedTasks.length}/${allTasks.length + completedTasks.length} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

üìù **–ò–Ω—Å—Ç—ÄÔøΩÔøΩ–∫—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–∞–Ω–∞–ª—É
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
4. –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getTaskKeyboard(nextTask.id, channelLink)
        });

    } catch (error) {
        console.error('Error in task skip:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleInstruction(chatId, messageId) {
    const message = `üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É**

üéØ **–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—ÇÔøΩÔøΩ –∑–≤—ë–∑–¥—ã:**

1Ô∏è‚É£ **–ö–ª–∏–∫–µ—Ä** - –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 0.1 ‚≠ê
2Ô∏è‚É£ **–ó–∞–¥–∞–Ω–∏—è** - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∑–∞ –Ω–∞–≥—Ä–∞–¥—ã
3Ô∏è‚É£ **–†–µ—Ñ–µ—Ä–∞–ª—ã** - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ
4Ô∏è‚É£ **–ö–µ–π—Å—ã** - –æ—Ç–∫—ÄÔøΩÔøΩ–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —Å –ø—Ä–∏–∑–∞–º–∏ (–Ω—É–∂–Ω–æ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –¥–µ–Ω—å)
5Ô∏è‚É£ **–õ–æ—Ç–µ—Ä–µ—è** - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö

üí∞ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:**
‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã —Å—É–º–º—ã: 15, 25, 50, 100 ‚≠ê
‚Ä¢ Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –∑–∞ 1300 ‚≠ê

üìà **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –†–µ—Ñ–µÔøΩÔøΩ–∞–ª—ã –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getBackToMainKeyboard()
    });
}

async function handleRatings(chatId, messageId) {
    const message = `üèÜ **–†–µ–π—Ç–∏–Ω–≥–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:`;

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...getRatingsKeyboard()
    });
}

async function handleRatingsAll(chatId, messageId) {
    try {
        const result = await db.executeQuery(`
            SELECT first_name, referrals_count
            FROM users
            WHERE referrals_count > 0
            ORDER BY referrals_count DESC
            LIMIT 10
        `);

        let message = 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n\n';

        if (result.rows.length === 0) {
            message += 'üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.\n\n –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ!';
        } else {
            result.rows.forEach((user, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const safeName = cleanDisplayText(user.first_name);
                message += `${medal} ${safeName} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
            });
            message += '\nüí™ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!';
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: undefined, // –£–±–∏—Ä–∞–µ–º Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ...getBackToMainKeyboard()
        });
    } catch (error) {
        console.error('Error in ratings all:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleRatingsWeek(chatId, messageId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const result = await db.executeQuery(`
            SELECT first_name, referrals_count
            FROM users
            WHERE registered_at > NOW() - INTERVAL '7 days' OR updated_at > NOW() - INTERVAL '7 days'
            ORDER BY referrals_count DESC
            LIMIT 10
        `);

        let message = 'üìÖ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n\n';

        if (result.rows.length === 0) {
            message += '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.';
        } else {
            result.rows.forEach((user, index) => {
                const medal = index === 0 ? 'ÔøΩÔøΩ' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const safeName = cleanDisplayText(user.first_name);
                message += `${medal} ${safeName} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
            });
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: undefined, // –£–±–∏—Ä–∞–µ–º Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ...getBackToMainKeyboard()
        });
    } catch (error) {
        console.error('Error in ratings week:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleRatingsWeekPoints(chatId, messageId) {
    try {
        // Get weekly top users by points
        const users = await db.getWeeklyTopUsers(10);

        let message = '‚≠ê **–ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—á–∫–∞–º**\n\n';

        if (users.length === 0) {
            message += '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.';
        } else {
            message += 'üèÜ **–¢–æ–ø-10 –ø–æ –æ—á–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n';

            users.forEach((user, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const safeName = cleanDisplayText(user.first_name);
                message += `${medal} ${safeName} - ${user.weekly_points} –æ—á–∫–æ–≤\n`;
            });

            message += '\nüìà **–ö–∞–∫ –∑–∞—Ä–∞–±ÔøΩÔøΩ—Ç–∞—Ç—å –æ—á–∫–∏:**\n';
            message += '‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ - 1 –æ—á–∫–æ\n';
            message += '‚Ä¢ –ö–∞–∂–¥—ã–π –∫–ª–∏–∫ - 1 –æ—á–∫–æ\n';
            message += '‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ - 2 –æ—á–∫–∞\n';
            message += '‚Ä¢ –ö—É–ø–ª–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –ª–æ—Ç–µ—Ä–µ–∏ - 1 –æ—á–∫–æ\n';
            message += '‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª - 1 –æ—á–∫–æ\n';
            message += '\nüéÅ **–¢–æ–ø-5 –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –ø–æ–ª—É—á–∞—Ç –Ω–∞–≥—Ä–∞–¥—ã!**';
        }

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
    } catch (error) {
        console.error('Error in ratings week points:', error);
        await bot.editMessageText('‚ùå –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –æ—á–∫–∞–º.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleCases(chatId, messageId, user) {
    const now = new Date();
    const lastCaseOpen = user.last_case_open ? new Date(user.last_case_open) : null;
    const canOpen = !lastCaseOpen || now.toDateString() !== lastCaseOpen.toDateString();
    const hasEnoughReferrals = user.referrals_today >= 3;

    if (!hasEnoughReferrals) {
        const message = `üéÅ **–ö–µ–π—Å—ã**

‚ùå **–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –¥–µ–Ω—å**

**–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å–µ–≥–æ–¥–Ω—è:** ${user.referrals_today}/3

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
        return;
    }

    if (!canOpen) {
        const message = `üéÅ **–ö–µ–π—Å—ã**

‚è∞ **–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!**

–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º!`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getBackToMainKeyboard()
        });
        return;
    }

    // Open case
    const reward = Math.floor(Math.random() * 10) + 1; // 1-10 stars
    await db.updateUserBalance(user.id, reward);
    await db.updateUserField(user.id, 'last_case_open', now);

    const message = `üéÅ **ÔøΩÔøΩ–µ–π—Å—ã**

üéâ **–ü–æ–∑–¥ÔøΩÔøΩ–∞–≤–ª—è–µ–º!** –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ **${reward} ‚≠ê**

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.balance + reward} ‚≠ê

‚è∞ –í–æ–∑–≤—Ä–∞—à–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º!`;

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
        }
    };

    await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...keyboard
    });
}

async function handleLottery(chatId, messageId, userId = null) {
    try {
        // Get standard lotteries
        const standardResult = await db.executeQuery('SELECT * FROM lotteries WHERE is_active = TRUE AND (lottery_type = $1 OR lottery_type IS NULL) ORDER BY id', ['standard']);

        // Get referral lotteries
        const referralLotteries = await db.getReferralLotteries();

        if (standardResult.rows.length === 0 && referralLotteries.length === 0) {
            await bot.editMessageText('üé∞ **–õ–æ—Ç–µ—Ä–µ–∏**\n\n‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!', {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Get user's tickets if userId provided
        let userTickets = [];
        if (userId) {
            const ticketsResult = await db.executeQuery(
                'SELECT lottery_id FROM lottery_tickets WHERE user_id = $1',
                [userId]
            );
            userTickets = ticketsResult.rows.map(row => row.lottery_id);
        }

        let message = 'üé∞ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏**\n\n';
        const keyboards = [];

        // Standard lotteries
        standardResult.rows.forEach((lottery) => {
            const hasPurchased = userTickets.includes(lottery.id);

            message += `üé´ **${lottery.name}** (–æ–±—ã—á–Ω–∞—è)\n`;
            message += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} ‚≠ê\n`;
            message += `üéØ –ë–∏–ª–µ—Ç–æ–≤: ${lottery.current_tickets}/${lottery.max_tickets}\n`;
            message += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${lottery.winners_count}\n`;

            if (hasPurchased) {
                message += `‚úÖ **–í–∞—à –±–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!**\n\n`;
            } else {
                message += `\n`;
                if (lottery.current_tickets >= lottery.max_tickets) {
                    keyboards.push([{ text: `üö´ ${lottery.name} - ÔøΩÔøΩ–†–û–î–ê–ù–û`, callback_data: 'lottery_sold_out' }]);
                } else {
                    keyboards.push([{ text: `üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç - ${lottery.name}`, callback_data: `lottery_buy_${lottery.id}` }]);
                }
            }
        });

        // Referral lotteries
        for (const refLottery of referralLotteries) {
            const timeLeft = new Date(refLottery.ref_ends_at) - new Date();
            const hoursLeft = Math.max(0, Math.floor(timeLeft / (1000 * 60 * 60)));

            if (timeLeft <= 0) continue; // Skip expired lotteries

            // Get user participation info
            let participant = null;
            if (userId) {
                const participantResult = await db.executeQuery(
                    'SELECT * FROM lottery_participants WHERE lottery_id = $1 AND user_id = $2',
                    [refLottery.id, userId]
                );
                participant = participantResult.rows[0];
            }

            const totalTickets = participant ? participant.total_tickets : 0;

            if (refLottery.lottery_type === 'referral_condition') {
                message += `üë• **${refLottery.name}** (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è)\n`;
                message += `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤\n`;
                message += `üìã –£—Å–ª–æ–≤–∏–µ: –ø—Ä–∏–≥–ª–∞ÔøΩÔøΩ–∏—Ç—å ${refLottery.required_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
                message += `üí∞ –î–æ–ø. –±–∏–ª–µ—Ç: ${refLottery.additional_ticket_price} üé´\n`;
                message += `üé´ –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: ${totalTickets}\n`;

                if (participant && participant.qualified) {
                    message += `‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n`;
                    keyboards.push([{ text: `üé´ –ö—É–ø–∏—Ç—å –¥–æ–ø. –±–∏–ª–µ—Ç - ${refLottery.name}`, callback_data: `ref_lottery_buy_${refLottery.id}` }]);
                } else {
                    message += `‚ùå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${refLottery.required_referrals} —ÄÔøΩÔøΩ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è\n\n`;
                    keyboards.push([{ text: `üë• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ - ${refLottery.name}`, callback_data: `ref_lottery_check_${refLottery.id}` }]);
                }

            } else if (refLottery.lottery_type === 'referral_auto') {
                message += `üë• **${refLottery.name}** (–∞–≤—Ç–æ-—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è)\n`;
                message += `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤\n`;
                message += `üé´ –ë–∏–ª–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalTickets}\n`;
                message += `üìã –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∏–ª–µÔøΩÔøΩ\n\n`;

                keyboards.push([{ text: `üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π - ${refLottery.name}`, callback_data: 'invite' }]);
            }
        }

        keyboards.push([{ text: '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboards }
        });

    } catch (error) {
        console.error('Error in lottery:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handleLotteryBuy(chatId, messageId, userId, lotteryId) {
    try {
        const user = await db.getUser(userId);
        
        // Get lottery details
        const lotteryResult = await db.executeQuery('SELECT * FROM lotteries WHERE id = $1 AND is_active = TRUE', [lotteryId]);
        
        if (lotteryResult.rows.length === 0) {
            await bot.editMessageText('‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        const lottery = lotteryResult.rows[0];

        // Check if user already has a ticket
        const ticketCheck = await db.executeQuery(
            'SELECT 1 FROM lottery_tickets WHERE lottery_id = $1 AND user_id = $2',
            [lotteryId, userId]
        );

        if (ticketCheck.rows.length > 0) {
            await bot.editMessageText('‚ùå –í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –≤ —ç—Ç—É –ª–æ—Ç–µ—Ä–µ—é!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check balance
        if (user.balance < lottery.ticket_price) {
            await bot.editMessageText('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Check if lottery is full
        if (lottery.current_tickets >= lottery.max_tickets) {
            await bot.editMessageText('‚ùå –í—Å–µ –±–∏–ª–µ—Ç—ã –≤ –ª–æ—Ç–µ—Ä–µ—é –ø—Ä–æ–¥–∞–Ω—ã!', {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });
            return;
        }

        // Buy ticket
        await db.executeQuery('BEGIN');
        
        try {
            // Add ticket
            await db.executeQuery(
                'INSERT INTO lottery_tickets (lottery_id, user_id) VALUES ($1, $2)',
                [lotteryId, userId]
            );

            // Update lottery count
            const updatedLottery = await db.executeQuery(
                'UPDATE lotteries SET current_tickets = current_tickets + 1 WHERE id = $1 RETURNING current_tickets, max_tickets',
                [lotteryId]
            );

            // Deduct from balance
            await db.updateUserBalance(userId, -lottery.ticket_price);

            // Add weekly points for lottery ticket purchase
            try {
                await db.addWeeklyPoints(userId, 1, 'lottery_ticket_purchase');
            } catch (pointsError) {
                console.error('Error adding weekly points for lottery purchase:', pointsError);
            }

            await db.executeQuery('COMMIT');

            // Check if lottery is now full and distribute rewards
            const newTicketCount = updatedLottery.rows[0].current_tickets;
            const maxTickets = updatedLottery.rows[0].max_tickets;

            if (newTicketCount >= maxTickets) {
                console.log(`[LOTTERY] Lottery ${lotteryId} is full, distributing rewards...`);
                await distributeLotteryRewards(lotteryId, lottery);
            }

            await bot.editMessageText(`‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∑–∞ ${lottery.ticket_price} ‚≠ê!`, {
                chat_id: chatId,
                message_id: messageId,
                ...getBackToMainKeyboard()
            });

        } catch (error) {
            await db.executeQuery('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('Error in lottery buy:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

async function handlePromocodeInput(chatId, messageId, userId) {
    // Set temp action for user
    await db.updateUserField(userId, 'temp_action', 'awaiting_promocode');
    
    await bot.editMessageText('üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:', {
        chat_id: chatId,
        message_id: messageId,
        ...getBackToMainKeyboard()
    });
}

// Withdrawal approval handler
async function handleWithdrawalApproval(chatId, messageId, callbackData) {
    try {
        console.log('[WITHDRAWAL] Processing approval:', callbackData);
        const parts = callbackData.split('_');
        const targetUserId = parseInt(parts[2]);
        const amount = parseFloat(parts[3]);
        const type = parts[4];
        const withdrawalId = parts[5] ? parseInt(parts[5]) : null; // Support both old and new format

        console.log('[WITHDRAWAL] Parsed data:', { targetUserId, amount, type, withdrawalId });

        // Get user info
        const user = await db.getUser(targetUserId);
        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        console.log('[WITHDRAWAL] User found:', user.first_name);

        // Approve withdrawal in database - use specific withdrawal ID if available
        let approvedWithdrawalId;
        if (withdrawalId) {
            // Use specific withdrawal ID for newer format
            approvedWithdrawalId = await db.approveWithdrawalRequestById(withdrawalId, ADMIN_ID);
        } else {
            // Fallback to old method for backward compatibility
            approvedWithdrawalId = await db.approveWithdrawalRequest(targetUserId, amount, type, ADMIN_ID);
        }

        if (!approvedWithdrawalId) {
            await bot.editMessageText('‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ ÔøΩÔøΩ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        console.log('[WITHDRAWAL] Withdrawal approved in database, ID:', approvedWithdrawalId);

        // Send payment notification to payments channel
        await sendPaymentNotification(approvedWithdrawalId, user, amount, type);

        // Send congratulations to user
        const typeDisplay = type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : `${amount} ‚≠ê`;
        const congratsMessage = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!**

üí∞ **–°—É–º–º–∞:** ${typeDisplay}

‚è≥ **–ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!**

üìß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∑–≤—ë–∑–¥—ã –≤ Telegram.

üë• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ!`;

        await sendThrottledMessage(targetUserId, congratsMessage, { parse_mode: 'Markdown' });
        console.log('[WITHDRAWAL] Congratulations sent to user');

        // Update admin message
        const completedCount = await db.getCompletedWithdrawalsCount();
        await bot.editMessageText(`‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞** (#${completedCount})

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${cleanDisplayText(user.first_name)} (ID: ${targetUserId})
üí∞ –°—É–º–º–∞: ${typeDisplay}

‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢–°–Ø –î–ï–ô–°–¢–í–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**
üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ${typeDisplay} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${user.username || targetUserId} –≤—Ä—É—á–Ω—É—é –≤ Telegram

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –ø–ª–∞—Ç–µ–∂–µ–π.

üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –ø–æ–¥–∞—Ä–æ–∫ –∑–≤—ë–∑–¥–∞–º–∏`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
        });

        console.log('[WITHDRAWAL] Admin message updated');

    } catch (error) {
        console.error('Error in withdrawal approval:', error);
        console.error('Full error:', error.stack);
        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: ${error.message}`, {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

// Withdrawal rejection handler
async function handleWithdrawalRejection(chatId, messageId, callbackData, adminId) {
    try {
        const parts = callbackData.split('_');
        const targetUserId = parseInt(parts[2]);
        const amount = parseInt(parts[3]);
        const type = parts[4];
        const withdrawalId = parts[5] ? parseInt(parts[5]) : null; // Support both old and new format

        // Get user info
        const user = await db.getUser(targetUserId);
        if (!user) {
            await bot.editMessageText('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                chat_id: chatId,
                message_id: messageId
            });
            return;
        }

        // Set admin state to await rejection reason - include withdrawal ID if available
        const rejectionAction = withdrawalId ?
            `rejecting_withdrawal_${targetUserId}_${amount}_${type}_${withdrawalId}` :
            `rejecting_withdrawal_${targetUserId}_${amount}_${type}`;
        await db.updateUserField(adminId, 'temp_action', rejectionAction);

        // Update message to ask for reason
        const rejectionTitle = withdrawalId ? `‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${withdrawalId}**` : `‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏**`;
        await bot.editMessageText(`${rejectionTitle}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name}
üí∞ –°—É–º–º–∞: ${amount} ‚≠ê
üì¶ –¢–∏–ø: ${type === 'premium' ? 'Telegram Premium' : '–ó–≤—ë–∑–¥—ã'}

‚úèÔ∏è **–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**`, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown'
        });

    } catch (error) {
        console.error('Error in withdrawal rejection:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

// Handle text messages (for promocodes and rejection reasons)
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const userId = msg.from.id;
        const chatId = msg.chat.id;

        try {
            const user = await db.getUser(userId);

            if (user && user.temp_action) {
                if (user.temp_action === 'awaiting_promocode') {
                    const promocode = msg.text.trim().toUpperCase();

                    // Clear temp action
                    await db.updateUserField(userId, 'temp_action', null);

                    // Check promocode
                    const promoResult = await db.getPromocode(promocode);

                    if (!promoResult) {
                        bot.sendMessage(chatId, '‚ùå ÔøΩÔøΩ—Ä–æ–ºÔøΩÔøΩ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                        return;
                    }

                    // Use promocode
                    const success = await db.usePromocode(userId, promoResult.id);

                    if (success) {
                        bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promoResult.reward} ‚≠ê`);
                    } else {
                        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!');
                    }
                } else if (user.temp_action.startsWith('rejecting_withdrawal_')) {
                    console.log('[REJECTION] Processing rejection reason:', msg.text);
                    const rejectionReason = msg.text.trim();
                    const actionParts = user.temp_action.split('_');
                    const targetUserId = parseInt(actionParts[2]);
                    const amount = parseFloat(actionParts[3]);
                    const type = actionParts[4];
                    const withdrawalId = actionParts[5] ? parseInt(actionParts[5]) : null; // Support new format with ID

                    console.log('[REJECTION] Parsed data:', { targetUserId, amount, type, withdrawalId, rejectionReason });

                    // Clear temp action
                    await db.updateUserField(userId, 'temp_action', null);
                    console.log('[REJECTION] Temp action cleared');

                    // Reject withdrawal in database (this will also return money to user)
                    let rejectedWithdrawalId;
                    if (withdrawalId) {
                        // Use specific withdrawal ID for newer format
                        rejectedWithdrawalId = await db.rejectWithdrawalRequestById(withdrawalId, userId, rejectionReason);
                    } else {
                        // Fallback to old method for backward compatibility
                        rejectedWithdrawalId = await db.rejectWithdrawalRequest(targetUserId, amount, type, userId, rejectionReason);
                    }

                    if (!rejectedWithdrawalId) {
                        await bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
                        return;
                    }

                    console.log('[REJECTION] Withdrawal rejected in database, ID:', rejectedWithdrawalId);

                    // Get target user info
                    const targetUser = await db.getUser(targetUserId);
                    console.log('[REJECTION] Target user found:', targetUser.first_name);

                    // Send rejection notice to user
                    const typeDisplay = type === 'premium' ? 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞' : `${amount} ‚≠ê`;
                    const rejectionTitle = rejectedWithdrawalId ? `‚ùå **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${rejectedWithdrawalId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**` : `‚ùå **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**`;
                    const rejectionMessage = `${rejectionTitle}

 **–°—É–º–º–∞:** ${typeDisplay}

üìù **–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:**
${rejectionReason}

üí∏ **–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.**

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`;

                    await sendThrottledMessage(targetUserId, rejectionMessage, { parse_mode: 'Markdown' });
                    console.log('[REJECTION] Rejection message sent to user');

                    // Confirm to admin
                    const adminTitle = rejectedWithdrawalId ? `‚úÖ **–ó–∞—è–≤–∫–∞ #${rejectedWithdrawalId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**` : `‚úÖ **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**`;
                    await bot.sendMessage(chatId, `${adminTitle}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${cleanDisplayText(targetUser.first_name)}
üí∞ –°—É–º–º–∞: ${typeDisplay}
üìù –ü—Ä–∏—á–∏–Ω–∞: ${rejectionReason}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—ÄÔøΩÔøΩ–≤ÔøΩÔøΩ–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
üí∏ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.`, { parse_mode: 'Markdown' });
                    console.log('[REJECTION] Confirmation sent to admin');
                }
            }
        } catch (error) {
            console.error('Error handling message:', error);
        }
    }
});

// Admin handlers
async function handleAdminStats(chatId, messageId) {
    try {
        const stats = await db.getUserStats();
        
        // Get weekly active users
        const weeklyResult = await db.executeQuery(`
            SELECT COUNT(*) as weekly_active 
            FROM users 
            WHERE updated_at > CURRENT_DATE - INTERVAL '7 days'
        `);
        
        const dailyResult = await db.executeQuery(`
            SELECT COUNT(*) as daily_active 
            FROM users 
            WHERE updated_at > CURRENT_DATE
        `);

        const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** ${stats.total_users}
üìÖ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é:** ${weeklyResult.rows[0]?.weekly_active || 0}
üìÖ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –¥–µ–Ω—å:** ${dailyResult.rows[0]?.daily_active || 0}
üí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** ${stats.total_balance} ‚≠ê
üë• **–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:** ${stats.total_referrals}`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }]
                ]
            }
        });

    } catch (error) {
        console.error('Error in admin stats:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

async function handleAdminMenu(chatId, messageId) {
    try {
        const stats = await db.getUserStats();

        const message = `üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**

üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üí∞ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats.total_balance} ‚≠ê

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üé∞ **/endlottery [ID]** - –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é –≤—Ä—É—á–Ω—É—é
üë• **/refupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞ÔøΩÔøΩ–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚≠ê **/starsupplayer [ID] [—á–∏—Å–ª–æ]** - –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...getAdminMenuKeyboard()
        });

    } catch (error) {
        console.error('Error in admin menu:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.', {
            chat_id: chatId,
            message_id: messageId
        });
    }
}

// Tracking links system
bot.onText(/\/create_tracking_link (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const linkName = match[1].trim();

        if (!linkName) {
            bot.sendMessage(chatId, '‚ùå —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_tracking_link –ù–∞–∑–≤–∞–Ω–∏–µ_—Ä–µ–∫–ª–∞–º—ã');
            return;
        }

        // Generate unique tracking ID
        const trackingId = 'track_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

        // Get bot username
        let botUsername = 'starsbotexample';
        try {
            const botInfo = await bot.getMe();
            botUsername = botInfo.username;
        } catch (error) {
            console.error('Error getting bot info:', error);
        }

        // Create tracking link
        const trackingLink = `https://t.me/${botUsername}?start=${trackingId}`;

        // Save to database
        await db.executeQuery(
            'INSERT INTO tracking_links (tracking_id, name, created_by, created_at) VALUES ($1, $2, $3, NOW())',
            [trackingId, linkName, userId]
        );

        const message = `‚úÖ **–¢—Ä–µ–∫–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${linkName}
üîó **–°—Å—ã–ª–∫–∞:** \`${trackingLink}\`
üÜî **ID:** \`${trackingId}\`

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** /tracking_stats ${trackingId}
üìã **–í—Å–µ —Å—Å—ã–ª–∫–∏:** /list_tracking`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        console.log(`[TRACKING] Created tracking link: ${trackingId} for ${linkName}`);

    } catch (error) {
        console.error('Error creating tracking link:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: ${error.message}`);
    }
});

// List tracking links
bot.onText(/\/list_tracking/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const result = await db.executeQuery(
            'SELECT tracking_id, name, clicks_count, created_at FROM tracking_links ORDER BY created_at DESC'
        );

        if (result.rows.length === 0) {
            bot.sendMessage(chatId, 'üìã **–¢—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.**\n\n –°–æ–∑–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É: /create_tracking_link –Ω–∞–∑–≤–∞–Ω–∏–µ', { parse_mode: 'Markdown' });
            return;
        }

        let message = 'üìã **–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫**\n\n';

        result.rows.forEach((link, index) => {
            const date = new Date(link.created_at).toLocaleDateString('ru-RU');
            message += `${index + 1}. **${link.name}**\n`;
            message += `   üîó ID: \`${link.tracking_id}\`\n`;
            message += `     –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: ${link.clicks_count || 0}\n`;
            message += `   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${date}\n\n`;
        });

        message += 'üí° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–∫–∏:** /tracking_stats ID';

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error listing tracking links:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞: ${error.message}`);
    }
});

// Tracking stats
bot.onText(/\/tracking_stats (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const trackingId = match[1].trim();

        // Get tracking link info
        const linkResult = await db.executeQuery(
            'SELECT * FROM tracking_links WHERE tracking_id = $1',
            [trackingId]
        );

        if (linkResult.rows.length === 0) {
            bot.sendMessage(chatId, '‚ùå —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        const link = linkResult.rows[0];

        // Get detailed stats
        const statsResult = await db.executeQuery(
            'SELECT COUNT(*) as total_clicks, COUNT(DISTINCT user_id) as unique_users FROM tracking_clicks WHERE tracking_id = $1',
            [trackingId]
        );

        const recentResult = await db.executeQuery(
            'SELECT COUNT(*) as recent_clicks FROM tracking_clicks WHERE tracking_id = $1 AND clicked_at > NOW() - INTERVAL \'24 hours\'',
            [trackingId]
        );

        const stats = statsResult.rows[0];
        const recentStats = recentResult.rows[0];

        const createdDate = new Date(link.created_at).toLocaleDateString('ru-RU');

        const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤–æ–π —ÅÔøΩÔøΩ—ã–ª–∫–∏**\n\nüìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${link.name}\nüÜî **ID:** \`${trackingId}\`\nüìÖ **–°–æ–∑–¥–∞–Ω–∞:** ${createdDate}\n\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\nüë• –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: **${stats.total_clicks || 0}**\n –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${stats.unique_users || 0}**\n‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: **${recentStats.recent_clicks || 0}**\n\nüîó **–°—Å—ã–ª–∫–∞:** \`https://t.me/YOUR_BOT?start=${trackingId}\``;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error getting tracking stats:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }
});

// Admin delete commands
bot.onText(/\/delete_task (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const taskId = parseInt(match[1]);
        const result = await db.executeQuery('DELETE FROM tasks WHERE id = $1', [taskId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} —É–¥–∞–ª–µ–Ω–æ!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        }
    } catch (error) {
        console.error('Error deleting task:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.');
    }
});

bot.onText(/\/delete_channel (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const channelId = parseInt(match[1]);
        const result = await db.executeQuery('DELETE FROM required_channels WHERE id = $1', [channelId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ö–∞–Ω–∞–ª —Å ID ${channelId} —É–¥–∞–ª–µ–Ω!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –ö–∞–Ω–∞–ª —Å ID ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error deleting channel:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.');
    }
});

bot.onText(/\/delete_lottery (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const lotteryId = parseInt(match[1]);

        // Check if lottery has participants
        const ticketsResult = await db.executeQuery('SELECT COUNT(*) as count FROM lottery_tickets WHERE lottery_id = $1', [lotteryId]);
        const hasTickets = ticketsResult.rows[0].count > 0;

        if (hasTickets) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ª–æ—Ç–µ—Ä–µ—é —Å ID ${lotteryId} - –≤ –Ω–µ–π –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ—é –∫–æ–º–∞–Ω–¥–æ–π /endlottery ${lotteryId}`);
            return;
        }

        const result = await db.executeQuery('DELETE FROM lotteries WHERE id = $1', [lotteryId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –õ–æ—Ç–µ—Ä–µ—è —Å ID ${lotteryId} —É–¥–∞–ª–µ–Ω–∞!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –õ–æ—Ç–µ—Ä–µ—è —Å ID ${lotteryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
    } catch (error) {
        console.error('Error deleting lottery:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–µ—ÄÔøΩÔøΩ–∏.');
    }
});

// Custom broadcast command
bot.onText(/\/custom_broadcast\s+([\s\S]+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const broadcastMessage = match[1].trim();

        if (!broadcastMessage) {
            bot.sendMessage(chatId, '‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /custom_broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return;
        }

        // Get all users
        const users = await db.executeQuery('SELECT id FROM users');
        const totalUsers = users.rows.length;
        let successCount = 0;
        let failCount = 0;

        // Send confirmation
        const confirmMsg = await bot.sendMessage(chatId, `üì§ **–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%`);

        // Send to all users
        for (let i = 0; i < users.rows.length; i++) {
            const user = users.rows[i];
            try {
                await bot.sendMessage(user.id, `\n\n${broadcastMessage}`, { parse_mode: 'Markdown' });
                successCount++;
            } catch (error) {
                failCount++;
                console.log(`Failed to send to user ${user.id}: ${error.message}`);
            }

            // Update progress every 10 users
            if (i % 10 === 0 || i === users.rows.length - 1) {
                const progress = Math.round((i + 1) / totalUsers * 100);
                try {
                    await bot.editMessageText(`üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${failCount}\n‚è≥ –ø—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`, {
                        chat_id: chatId,
                        message_id: confirmMsg.message_id,
                        parse_mode: 'Markdown'
                    });
                } catch (e) {
                    // Ignore edit errors
                }
            }

            // Small delay to avoid rate limits
            await new Promise(resolve => setTimeout(resolve, 50));
        }

        // Final report
        await bot.editMessageText(`‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${failCount}\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(successCount/totalUsers*100)}%`, {
            chat_id: chatId,
            message_id: confirmMsg.message_id,
            parse_mode: 'Markdown'
        });

        console.log(`[BROADCAST] Custom broadcast completed: ${successCount}/${totalUsers} successful`);

    } catch (error) {
        console.error('Error in custom broadcast:', error);
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error.message}`);
    }
});

// Handle broadcast custom (inline interface)
async function handleBroadcastCustom(chatId, messageId, userId) {
    try {
        // Set user in broadcast mode
        await db.updateUserField(userId, 'temp_action', 'waiting_broadcast_message');

        const message = `‚úèÔ∏è **–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ä–∞—Å—Å—ã–ª–∫—É**

üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**

–ë–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–∑–æ—à–ª–µ—Ç –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è!

üí° **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**`;

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ÔøΩÔøΩ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_broadcast' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]
                ]
            }
        });
    } catch (error) {
        console.error('Error in handleBroadcastCustom:', error);
        throw error;
    }
}

bot.onText(/\/delete_promo (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const promoId = parseInt(match[1]);
        const result = await db.executeQuery('DELETE FROM promocodes WHERE id = $1', [promoId]);

        if (result.rowCount > 0) {
            bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å ID ${promoId} —É–¥–∞–ª–µ–Ω!`);
        } else {
            bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å ID ${promoId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    } catch (error) {
        console.error('Error deleting promocode:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.');
    }
});

// Daily reset cron job
cron.schedule('0 0 * * *', async () => {
    console.log('üîÑ Running daily reset...');
    try {
        await db.resetDailyData();
        console.log('‚úÖ Daily reset completed successfully');
    } catch (error) {
        console.error('‚ùå Critical error in daily reset:', error);
        // Send alert to admin if possible
        try {
            await bot.sendMessage(ADMIN_CHANNEL, ` **–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö**\n\n–û—à–∏–±–∫–∞: ${error.message}\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`, { parse_mode: 'Markdown' });
        } catch (alertError) {
            console.error('Failed to send alert to admin:', alertError);
        }
    }
}, {
    timezone: 'Europe/Moscow'
});

// Function to distribute weekly rewards
async function distributeWeeklyRewards(isManual = false) {
    console.log(`üèÜ ${isManual ? 'Manual' : 'Automatic'} weekly rewards distribution...`);
    try {
        // Get top 5 users by weekly points
        const users = await db.getWeeklyTopUsers(5);

        if (users.length === 0) {
            console.log('[WEEKLY-REWARDS] No users with points this week');
            if (isManual) {
                return { success: false, message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑ÔøΩÔøΩ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–∫–∞–º–∏ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é' };
            }
            return;
        }

        const rewards = [100, 75, 50, 25, 15]; // Stars for positions 1-5
        const positions = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏èÔøΩÔøΩÔøΩ'];

        let rewardMessage = 'üèÜ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!**\n\nüìÖ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n';

        for (let i = 0; i < users.length; i++) {
            const user = users[i];
            const reward = rewards[i];
            const position = positions[i];

            // Give reward to user
            await db.updateUserBalance(user.id, reward);

            // Add to message
            const safeName = cleanDisplayText(user.first_name);
            rewardMessage += `${position} **${safeName}** - ${user.weekly_points} –æ—á–∫–æ–≤ (+${reward} ‚≠ê)\n`;

            // Send personal congratulations
            try {
                const personalMessage = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n${position} **–í—ã –∑–∞–Ω—è–ª–∏ ${i + 1} –º–µ—Å—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ –æ—á–∫–∞–º!**\n\n‚≠ê **–û—á–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:** ${user.weekly_points}\nüí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +${reward} ‚≠ê\n\nüéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`;

                await sendThrottledMessage(user.id, personalMessage, { parse_mode: 'Markdown' });
                console.log(`[WEEKLY-REWARDS] Reward sent to ${user.first_name}: ${reward} stars`);
            } catch (error) {
                console.error(`[WEEKLY-REWARDS] Failed to notify user ${user.id}:`, error);
            }
        }

        rewardMessage += '\nüéØ **–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!**';

        // Send summary to admin channel
        try {
            await bot.sendMessage(ADMIN_CHANNEL, rewardMessage, { parse_mode: 'Markdown' });
            console.log('[WEEKLY-REWARDS] Summary sent to admin channel');
        } catch (error) {
            console.error('[WEEKLY-REWARDS] Failed to send summary to admin:', error);
        }

        // Reset weekly points for all users
        await db.resetWeeklyData();

        console.log('[WEEKLY-REWARDS] Weekly rewards completed successfully');

        if (isManual) {
            await db.recordManualRewardsTrigger();
            return { success: true, message: `–ù–∞–≥—Ä–∞–¥—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–µ–∂–¥—É ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`, users: users.length };
        }

    } catch (error) {
        console.error('Error in weekly rewards:', error);
        if (isManual) {
            return { success: false, message: `–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥: ${error.message}` };
        }
    }
}

// Weekly rewards for top 5 users (Sundays at 20:00 MSK)
cron.schedule('0 20 * * 0', async () => {
    try {
        // Check if automatic rewards are enabled
        const settings = await db.getWeeklyRewardsSettings();
        if (!settings.auto_rewards_enabled) {
            console.log('[WEEKLY-REWARDS] Automatic rewards are disabled, skipping...');
            return;
        }

        await distributeWeeklyRewards(false);
        const result = await db.executeQuery(`
            SELECT id, first_name, referrals_today
            FROM users
            WHERE referrals_today > 0
            ORDER BY referrals_today DESC
            LIMIT 5
        `);

        if (result.rows.length === 0) {
            console.log('[WEEKLY-REWARDS] No users with referrals this week');
            return;
        }

        const rewards = [100, 75, 50, 25, 15]; // Stars for positions 1-5
        const positions = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];

        let rewardMessage = 'üèÜ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!**\n\nüìÖ **–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:**\n\n';

        for (let i = 0; i < result.rows.length; i++) {
            const user = result.rows[i];
            const reward = rewards[i];
            const position = positions[i];

            // Give reward to user
            await db.updateUserBalance(user.id, reward);

            // Add to message
            rewardMessage += `${position} **${user.first_name}** - ${user.referrals_today} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (+${reward} ‚≠ê)\n`;

            // Send personal congratulations
            try {
                const personalMessage = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n${position} **–í—ã –∑–∞–Ω—è–ª–∏ ${i + 1} –º–µ—Å—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!**\n\nüë• **–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:** ${user.referrals_today}\nüí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +${reward} ‚≠ê\n\nüéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!`;

                await sendThrottledMessage(user.id, personalMessage, { parse_mode: 'Markdown' });
                console.log(`[WEEKLY-REWARDS] Reward sent to ${user.first_name}: ${reward} stars`);
            } catch (error) {
                console.error(`[WEEKLY-REWARDS] Failed to notify user ${user.id}:`, error);
            }
        }

        rewardMessage += '\nüéØ **–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!**';

        // Send summary to admin channel
        try {
            await bot.sendMessage(ADMIN_CHANNEL, rewardMessage, { parse_mode: 'Markdown' });
            console.log('[WEEKLY-REWARDS] Summary sent to admin channel');
        } catch (error) {
            console.error('[WEEKLY-REWARDS] Failed to send summary to admin:', error);
        }

        console.log('[WEEKLY-REWARDS] Weekly rewards completed successfully');

    } catch (error) {
        console.error('Error in scheduled weekly rewards:', error);
    }
}, {
    timezone: 'Europe/Moscow'
});

// Admin function for weekly rewards management
async function handleAdminWeeklyRewards(chatId, messageId) {
    try {
        const settings = await db.getWeeklyRewardsSettings();
        const status = settings.auto_rewards_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : ' –û—Ç–∫–ª—é—á–µ–Ω—ã';
        const lastManual = settings.last_manual_trigger ?
            new Date(settings.last_manual_trigger).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞';

        const message = `üèÜ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏**

üìä **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: ${status}
‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00 –ú–°–ö
üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫: ${lastManual}

üí° **–°–∏—Ç—Ç–µ–º–∞ –æ—á–∫–æ–≤:**
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ - 1 –æ—á–∫–æ
‚Ä¢ –ö–∞–∂–¥—ã–π –∫–ª–∏–∫ - 1 –æ—á–∫–æ
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ - 2 –æ—á–∫–∞
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ - 1 –æ—á–∫–æ
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª - 1 –æ—á–∫–æ

üèÜ **–ù–∞–≥—Ä–∞–¥—ã —Ç–æ–ø-5:**
ü•á 1 –º–µ—Å—Ç–æ: 100 ‚≠ê
ü•à 2 –º–µ—Å—Ç–æ: 75 ‚≠ê
ü•â 3 –º–µ—Å—Ç–æ: 50 ‚≠ê
4 –º–µ—Å—Ç–æ: 25 ‚≠ê
5 –º–µ—Å—Ç–æ: 15 ‚≠ê`;

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: settings.auto_rewards_enabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ',
                            callback_data: settings.auto_rewards_enabled ? 'admin_weekly_disable' : 'admin_weekly_enable'
                        },
                        { text: 'üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: 'admin_weekly_trigger' }
                    ],
                    [
                        { text: '‚≠ê –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'ratings_week_points' }
                    ],
                    [
                        { text: 'üè† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_menu' }
                    ]
                ]
            }
        };

        await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            ...keyboard
        });

    } catch (error) {
        console.error('Error in admin weekly rewards:', error);
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏.', {
            chat_id: chatId,
            message_id: messageId,
            ...getBackToMainKeyboard()
        });
    }
}

// Admin commands for managing weekly rewards
bot.onText(/\/weekly_rewards_status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, 'ÔøΩÔøΩÔøΩ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const settings = await db.getWeeklyRewardsSettings();
        const users = await db.getWeeklyTopUsers(5);

        let message = `üèÜ **–°—Ç–∞—Ç—É—Å –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥**\n\n`;
        message += `üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:** ${settings.auto_rewards_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n`;
        message += `üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:** ${settings.last_manual_trigger ? new Date(settings.last_manual_trigger).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}\n\n`;

        message += `üìä **–¢–µ–∫—É—â–∏–π —Ç–æ–ø-5 –ø–æ –æ—á–∫ÔøΩÔøΩ–º:**\n`;
        if (users.length === 0) {
            message += '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n';
        } else {
            users.forEach((user, i) => {
                const pos = i + 1;
                const emoji = pos === 1 ? 'ü•á' : pos === 2 ? 'ü•à' : pos === 3 ? 'ü•â' : `${pos}.`;
                message += `${emoji} ${cleanDisplayText(user.first_name)} - ${user.weekly_points} –æ—á–∫–æ–≤\n`;
            });
        }

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('Error in weekly rewards status:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥.');
    }
});

bot.onText(/\/weekly_rewards_enable/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        await db.updateWeeklyRewardsSettings(true);
        bot.sendMessage(chatId, '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –≤–∫–ª—é—á–µ–Ω—ã!');
    } catch (error) {
        console.error('Error enabling weekly rewards:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.');
    }
});

bot.onText(/\/weekly_rewards_disable/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        await db.updateWeeklyRewardsSettings(false);
        bot.sendMessage(chatId, '‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!');
    } catch (error) {
        console.error('Error disabling weekly rewards:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.');
    }
});

bot.onText(/\/weekly_rewards_trigger/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        bot.sendMessage(chatId, 'üèÜ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...');

        const result = await distributeWeeklyRewards(true);

        if (result.success) {
            bot.sendMessage(chatId, `‚úÖ ${result.message}!\n\nüéØ –û—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è –Ω–∞—á–∞–ª–∞—Å—å.`);
        } else {
            bot.sendMessage(chatId, `‚ùå ${result.message}`);
        }
    } catch (error) {
        console.error('Error triggering weekly rewards:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.');
    }
});



bot.onText(/\/send_stars_manual (\d+) (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        const targetUserId = parseInt(match[1]);
        const amount = parseInt(match[2]);

        bot.sendMessage(chatId, `ü§ñ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞: ${amount} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}...`);

        // –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const result = { success: false, error: '–°–∏—Å—Ç–µ–º–∞ –≤—ã–≤–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ' };

        if (result.success) {
            bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞ÔøΩÔøΩ–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∞–≥–µ–Ω—Ç–∞!\n\nüéØ ${amount} –∑–≤—ë–∑–¥ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
        } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }

    } catch (error) {
        console.error('Error manual stars send:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—èÔøΩÔøΩ–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
bot.onText(/\/process_old_withdrawals/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        // –ù–∞–π—Ç–∏ –≤—Å–µ pending –∑ÔøΩÔøΩ—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
        const oldWithdrawals = await db.executeQuery(`
            SELECT id, user_id, amount, type, created_at
            FROM withdrawal_requests
            WHERE status = 'pending'
            ORDER BY created_at ASC
        `);

        if (oldWithdrawals.rows.length === 0) {
            bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            return;
        }

        let message = `ÔøΩÔøΩÔøΩÔøΩ **–ù–∞–π–¥–µ–Ω–æ ${oldWithdrawals.rows.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥**\n\n`;
        let processedCount = 0;
        let skippedCount = 0;

        for (const withdrawal of oldWithdrawals.rows) {
            try {
                // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const user = await db.getUser(withdrawal.user_id);
                if (!user) {
                    skippedCount++;
                    continue;
                }

                const cleanName = cleanDisplayText(user.first_name);

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–æ 200
                if (withdrawal.type === 'stars' && withdrawal.amount <= 200) {
                    // –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                    const result = { success: false, error: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ' };

                    if (result.success) {
                        message += `‚úÖ ${cleanName} - ${withdrawal.amount}‚≠ê (–∞–≤—Ç–æ–º–∞—Ç)\n`;
                        processedCount++;
                    } else {
                        message += `‚ö†Ô∏è ${cleanName} - ${withdrawal.amount}‚≠ê (–æ—à–∏–±–∫–∞: ${result.error})\n`;
                        skippedCount++;
                    }
                } else {
                    message += `üî∂ ${cleanName} - ${withdrawal.amount}‚≠ê (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)\n`;
                    skippedCount++;
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
                if (processedCount > 0 && processedCount % 3 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }

            } catch (error) {
                console.error('Error processing old withdrawal:', error);
                skippedCount++;
            }
        }

        message += `\nüìä **–ò—Ç–æ–≥–æ:**\n`;
        message += `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${processedCount}\n`;
        message += `üî∂ –¢—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${skippedCount}\n`;
        message += `\nÔøΩÔøΩ –ö—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã –∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.`;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    } catch (error) {
        console.error('Error processing old withdrawals:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞
bot.onText(/\/agent_limits(?:\s+(\d+)\s+(\d+)\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!isAdmin(userId)) {
        bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.');
        return;
    }

    try {
        if (!match[1] || !match[2] || !match[3]) {
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
            const message = `‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã Stars Agent:**

üî¢ **–ó–≤—ë–∑–¥ –≤ —á–∞—Å:** 10 –º–∞–∫—Å–∏–º—É–º
üìÖ **–ó–≤—ë–∑–¥ –≤ –¥–µ–Ω—å:** 80 –º–∞–∫—Å–∏–º—É–º
üéØ **–ó–∞ —Ä–∞–∑ (—Ç–µ—Å—Ç-—Ä–µ–∂–∏–º):** 25 –º–∞–∫—Å–∏–º—É–º

üí° **–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
\`/agent_limits –î–ï–ù–¨ –ß–ê–° –ó–ê–†–ê–ó–†–ê–ó\`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ \`/agent_limits 150 20 50\` - 150/–¥–µ–Ω—å, 20/—á–∞—Å, 50 –∑–∞ —Ä–∞–∑
‚Ä¢ \`/agent_limits 200 25 100\` - —Å–Ω—è—Ç—å —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º

‚ö†Ô∏è **–û–°–¢–û–†–û–ñ–ù–û:** –í—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!

üîí **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∏–º–∏—Ç—ã:**
‚Ä¢ –ù–∞—á–∏–Ω–∞—é—â–∏–µ: 80/–¥–µ–Ω—å, 10/—á–∞—Å, 25 –∑–∞ —Ä–∞–∑
‚Ä¢ –û–ø—ã—Ç–Ω—ã–µ: 150/–¥–µ–Ω—å, 15/—á–∞—Å, 50 –∑–∞ —Ä–∞–∑
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ: 300/–¥–µ–Ω—å, 30/—á–∞—Å, 100 –∑–∞ —Ä–∞–∑`;

            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
            return;
        }

        const dayLimit = parseInt(match[1]);
        const hourLimit = parseInt(match[2]);
        const maxAmount = parseInt(match[3]);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤
        if (dayLimit < 10 || dayLimit > 100000) {
            bot.sendMessage(chatId, '‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 –∑–≤—ë–∑–¥.');
            return;
        }

        if (hourLimit < 5 || hourLimit > 10000) {
            bot.sendMessage(chatId, '‚ùå –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 –∑–≤—ë–∑–¥.');
            return;
        }

        if (maxAmount < 5 || maxAmount > 500) {
            bot.sendMessage(chatId, '‚ùå –ú–∞–∫—Å–∏–º—É–º –∑–∞ —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 500 –∑–≤—ë–∑–¥.');
            return;
        }

        if (hourLimit > dayLimit) {
            bot.sendMessage(chatId, '‚ùå –ß–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–Ω–µ–≤–Ω–æ–≥–æ.');
            return;
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –≤ –∞–≥–µ–Ω—Ç–µ
        const { execSync } = require('child_process');
        const updateScript = `
import sqlite3
import json

# –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ÔøΩÔøΩ–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn = sqlite3.connect('userbot_queue.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS agent_settings (
        id INTEGER PRIMARY KEY,
        daily_limit INTEGER DEFAULT 80,
        hourly_limit INTEGER DEFAULT 10,
        max_amount INTEGER DEFAULT 25,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')

# –û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ ÔøΩÔøΩ–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
cursor.execute('''
    INSERT OR REPLACE INTO agent_settings (id, daily_limit, hourly_limit, max_amount, updated_at)
    VALUES (1, ${dayLimit}, ${hourLimit}, ${maxAmount}, CURRENT_TIMESTAMP)
''')

conn.commit()
conn.close()
print('‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
`;

        try {
            execSync(`python3 -c "${updateScript}"`, { encoding: 'utf8' });

            const riskLevel = dayLimit > 200 ? 'üî¥ –í–´–°–û–ö–ò–ô' : dayLimit > 100 ? 'üü° –°–†–ï–î–ù–ò–ô' : 'üü¢ –ù–ò–ó–ö–ò–ô';

            const message = `‚úÖ **–õ–∏–º–∏—Ç—ã –∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**

üìä **–ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:**
üìÖ **–í –¥–µ–Ω—å:** ${dayLimit} –∑–≤—ë–∑–¥
üî¢ **–í —á–∞—Å:** ${hourLimit} –∑–≤—ë–∑–¥
üéØ **–ó–∞ —Ä–∞–∑:** ${maxAmount} –∑–≤—ë–∑–¥

‚ö†Ô∏è **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** ${riskLevel}

${dayLimit > 25 ? 'üîì **–¢–µ—Å—Ç-—Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω**' : 'üîí **–¢–µ—Å—Ç-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω**'}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –∞–≥–µ–Ω—Ç–∞: \`/agent_logs\`
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö FloodWait —Å–Ω–∏–∑—å—Ç–µ –ª–∏–º–∏—Ç—ã

ü§ñ **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≥–µ–Ω—Ç** –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:
\`/admin\` ‚Üí \` Stars Agent\` ‚Üí \`‚èπÔ∏è ÔøΩÔøΩ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\` ‚Üí \`‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å\``;

            bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('Error updating agent limits:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

    } catch (error) {
        console.error('Error in agent limits command:', error);
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ª–∏–º–∏—Ç–æ–≤.');
    }
});

// Error handling with 409 conflict management
bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
        console.log('‚ö†Ô∏è 409 Conflict detected - another bot instance is running');
        console.log('üîÑ This is normal when deploying updates');

        // Try to clear webhook just in case
        setTimeout(async () => {
            try {
                await bot.deleteWebHook();
                console.log('üßπ Webhook cleared due to 409 conflict');
            } catch (e) {
                console.log('‚ÑπÔ∏è Webhook clear attempt (may fail, that\'s ok)');
            }
        }, 5000);
    } else {
        console.error('Polling error:', error.message);
    }
});

process.on('SIGINT', async () => {
    console.log('üõë Shutting down bot...');
    await db.closeConnection();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë Shutting down bot...');
    await db.closeConnection();
    process.exit(0);
});

// Handle all messages for custom broadcast
bot.on('message', async (msg) => {
    // Skip commands and callback queries
    if (msg.text && msg.text.startsWith('/')) return;
    if (msg.from.is_bot) return;

    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const user = await db.getUser(userId);

        // Check if user is waiting to send broadcast message
        if (user && user.temp_action === 'waiting_broadcast_message' && isAdmin(userId)) {
            console.log('[BROADCAST] Admin sent custom broadcast message');

            // Clear temp action
            await db.updateUserField(userId, 'temp_action', null);

            const broadcastMessage = msg.text || msg.caption || 'üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏';

            // Get all users
            const users = await db.executeQuery('SELECT id FROM users WHERE is_subscribed = TRUE');
            const totalUsers = users.rows.length;

            // Send confirmation
            const confirmMsg = await bot.sendMessage(chatId, `üì§ **–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0%`, { parse_mode: 'Markdown' });

            // Use throttler for broadcast with progress tracking
            const result = await throttler.broadcastMessages(
                users.rows,
                (user) => bot.sendMessage(user.id, `üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n\n${broadcastMessage}`, { parse_mode: 'Markdown' }),
                // Progress callback
                async (progress) => {
                    try {
                        await bot.editMessageText(`üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${progress.total}\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${progress.success}\n‚ùå –û—à–∏–±–æ–∫: ${progress.errors}\n –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.percentage}%`, {
                            chat_id: chatId,
                            message_id: confirmMsg.message_id,
                            parse_mode: 'Markdown'
                        });
                    } catch (e) {
                        // Ignore edit errors
                    }
                }
            );

            // Final report
            await bot.editMessageText(`‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.total}\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.success}\n‚ùå –û—à–∏–±–æ–∫: ${result.errors}\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(result.success/result.total*100)}%`, {
                chat_id: chatId,
                message_id: confirmMsg.message_id,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ', callback_data: 'admin_broadcast' }]]
                }
            });

            console.log(`[BROADCAST] Custom broadcast completed: ${result.success}/${result.total} successful`);
        }
    } catch (error) {
        console.error('Error handling message for broadcast:', error);
    }
});

// Start the bot
startBot();
