const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');

// Bot token - should be set via environment variable
const token = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const bot = new TelegramBot(token, { polling: true });

// Admin channel for withdrawal requests
const ADMIN_CHANNEL = process.env.ADMIN_CHANNEL || '@kirbyvivodstars';

// Required channels/chats for registration
const REQUIRED_CHANNELS = [
    // Add your required channels here
    // '@yourchannel1',
    // '@yourchannel2'
];

// Initialize database
const db = new sqlite3.Database('bot.db');

// Create tables
db.serialize(() => {
    // Users table
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        referrals_count INTEGER DEFAULT 0,
        referrals_today INTEGER DEFAULT 0,
        invited_by INTEGER,
        last_click DATE,
        last_case_open DATE,
        registered_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        is_subscribed BOOLEAN DEFAULT 0
    )`);

    // Tasks table
    db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        channel_id TEXT,
        channel_name TEXT,
        reward REAL DEFAULT 1,
        is_active BOOLEAN DEFAULT 1
    )`);

    // User tasks completion
    db.run(`CREATE TABLE IF NOT EXISTS user_tasks (
        user_id INTEGER,
        task_id INTEGER,
        completed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (user_id, task_id)
    )`);

    // Lotteries table
    db.run(`CREATE TABLE IF NOT EXISTS lotteries (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        ticket_price REAL,
        max_tickets INTEGER,
        winners_count INTEGER,
        current_tickets INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // Lottery tickets
    db.run(`CREATE TABLE IF NOT EXISTS lottery_tickets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        lottery_id INTEGER,
        user_id INTEGER,
        purchased_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // Withdrawal requests
    db.run(`CREATE TABLE IF NOT EXISTS withdrawal_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        type TEXT,
        status TEXT DEFAULT 'pending',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        processed_at DATETIME
    )`);
});

// Helper function to check if user is subscribed to required channels
async function checkSubscriptions(userId) {
    if (REQUIRED_CHANNELS.length === 0) return true;
    
    try {
        for (const channel of REQUIRED_CHANNELS) {
            const member = await bot.getChatMember(channel, userId);
            if (member.status === 'left' || member.status === 'kicked') {
                return false;
            }
        }
        return true;
    } catch (error) {
        console.error('Error checking subscriptions:', error);
        return false;
    }
}

// Helper function to get user from database
function getUser(userId) {
    return new Promise((resolve, reject) => {
        db.get('SELECT * FROM users WHERE id = ?', [userId], (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });
}

// Helper function to create or update user
function createOrUpdateUser(user, invitedBy = null) {
    return new Promise((resolve, reject) => {
        const { id, username, first_name } = user;
        
        db.get('SELECT * FROM users WHERE id = ?', [id], (err, row) => {
            if (err) {
                reject(err);
                return;
            }
            
            if (row) {
                // Update existing user
                db.run(
                    'UPDATE users SET username = ?, first_name = ? WHERE id = ?',
                    [username, first_name, id],
                    function(err) {
                        if (err) reject(err);
                        else resolve(row);
                    }
                );
            } else {
                // Create new user
                db.run(
                    `INSERT INTO users (id, username, first_name, invited_by) 
                     VALUES (?, ?, ?, ?)`,
                    [id, username, first_name, invitedBy],
                    function(err) {
                        if (err) reject(err);
                        else {
                            // If user was invited, add referral bonus
                            if (invitedBy) {
                                addReferralBonus(invitedBy);
                            }
                            resolve({ id, username, first_name, balance: 0, referrals_count: 0 });
                        }
                    }
                );
            }
        });
    });
}

// Add referral bonus
function addReferralBonus(referrerId) {
    const bonus = 3; // 3 stars for each referral
    
    db.run(
        `UPDATE users SET 
         balance = balance + ?, 
         referrals_count = referrals_count + 1,
         referrals_today = referrals_today + 1
         WHERE id = ?`,
        [bonus, referrerId]
    );
}

// Keyboard layouts
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π'],
            ['üéØ –ö–ª–∏–∫–µ—Ä', 'üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥'],
            ['üìã –ó–∞–¥–∞–Ω–∏—è', 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'],
            ['üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', 'üéÅ –ö–µ–π—Å—ã'],
            ['üé∞ –õ–æ—Ç–µ—Ä–µ—è']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const backToMainKeyboard = {
    reply_markup: {
        keyboard: [['üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
        resize_keyboard: true
    }
};

// Start command handler
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const user = msg.from;
    const referralCode = match ? match[1] : null;
    
    try {
        // Check if user exists
        let dbUser = await getUser(userId);
        
        if (!dbUser) {
            // New user - check for referral
            let invitedBy = null;
            if (referralCode && !isNaN(referralCode)) {
                const referrer = await getUser(parseInt(referralCode));
                if (referrer) {
                    invitedBy = parseInt(referralCode);
                }
            }
            
            // Create user
            dbUser = await createOrUpdateUser(user, invitedBy);
        }
        
        // Check subscriptions
        const isSubscribed = await checkSubscriptions(userId);
        
        if (!isSubscribed && REQUIRED_CHANNELS.length > 0) {
            let message = 'üîî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n';
            
            REQUIRED_CHANNELS.forEach((channel, index) => {
                message += `${index + 1}. ${channel}\n`;
            });
            
            message += '\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞';
            
            bot.sendMessage(chatId, message);
            return;
        }
        
        // Update subscription status
        db.run('UPDATE users SET is_subscribed = 1 WHERE id = ?', [userId]);
        
        // Send welcome message with main menu
        const welcomeMessage = `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏ÔøΩÔøΩ
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:`;

        bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
        
    } catch (error) {
        console.error('Error in /start:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// Profile handler
bot.onText(/üë§ –ü—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        const user = await getUser(userId);
        
        if (!user) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            return;
        }
        
        const profileMessage = `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üëã –ò–º—è: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üÜî ID: ${user.id}
üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals_count}
üìà –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: ${user.referrals_today}
‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(1)} –∑–≤—ë–∑–¥`;

        const profileKeyboard = {
            reply_markup: {
                keyboard: [
                    ['üé´ –ü—Ä–æ–º–æ–∫–æ–¥', 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π'],
                    ['üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ],
                resize_keyboard: true
            }
        };
        
        bot.sendMessage(chatId, profileMessage, profileKeyboard);
        
    } catch (error) {
        console.error('Error in profile:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

// Invite friends handler
bot.onText(/üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    const referralLink = `https://t.me/${(await bot.getMe()).username}?start=${userId}`;
    
    const inviteMessage = `üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –ø–æ 3 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${referralLink}

–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—ë, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å!`;
    
    bot.sendMessage(chatId, inviteMessage, backToMainKeyboard);
});

// Clicker handler
bot.onText(/üéØ –ö–ª–∏–∫–µ—Ä/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        const user = await getUser(userId);
        
        if (!user) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            return;
        }
        
        const today = new Date().toDateString();
        const lastClick = user.last_click ? new Date(user.last_click).toDateString() : null;
        
        if (lastClick === today) {
            bot.sendMessage(chatId, '‚è∞ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–ª–∏–∫–µ—Ä —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.', backToMainKeyboard);
            return;
        }
        
        // Add clicker reward
        const reward = 0.1;
        
        db.run(
            'UPDATE users SET balance = balance + ?, last_click = CURRENT_TIMESTAMP WHERE id = ?',
            [reward, userId],
            function(err) {
                if (err) {
                    console.error('Clicker error:', err);
                    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
                    return;
                }
                
                bot.sendMessage(chatId, `üéØ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${reward} ‚≠êÔ∏è!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π!`, backToMainKeyboard);
            }
        );
        
    } catch (error) {
        console.error('Error in clicker:', error);
        bot.sendMessage(chatId, 'ÔøΩÔøΩ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// Withdrawal handler
bot.onText(/üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const user = await getUser(userId);

        if (!user) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            return;
        }

        if (user.referrals_count < 5) {
            const withdrawalMessage = `üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥

‚≠êÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(1)} –∑–≤—ë–∑–¥
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals_count}/5

‚ùå –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â—ë ${5 - user.referrals_count} –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥.`;

            bot.sendMessage(chatId, withdrawalMessage, backToMainKeyboard);
            return;
        }

        const withdrawalMessage = `üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥

‚≠êÔ∏è –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(1)} –∑–≤—ë–∑–¥
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals_count}

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;

        const withdrawalKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '15 ‚≠êÔ∏è', callback_data: 'withdraw_15' },
                        { text: '25 ‚≠êÔ∏è', callback_data: 'withdraw_25' }
                    ],
                    [
                        { text: '50 ‚≠êÔ∏è', callback_data: 'withdraw_50' },
                        { text: '100 ‚≠êÔ∏è', callback_data: 'withdraw_100' }
                    ],
                    [
                        { text: 'Telegram Premium (1300 ‚≠êÔ∏è)', callback_data: 'withdraw_premium' }
                    ]
                ]
            }
        };

        bot.sendMessage(chatId, withdrawalMessage, withdrawalKeyboard);

    } catch (error) {
        console.error('Error in withdrawal:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// Universal callback handler
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data.startsWith('withdraw_')) {
        const withdrawalType = data.replace('withdraw_', '');
        let amount;
        let displayName;

        switch (withdrawalType) {
            case '15':
                amount = 15;
                displayName = '15 ‚≠êÔ∏è';
                break;
            case '25':
                amount = 25;
                displayName = '25 ‚≠êÔ∏è';
                break;
            case '50':
                amount = 50;
                displayName = '50 ‚≠êÔ∏è';
                break;
            case '100':
                amount = 100;
                displayName = '100 ‚≠êÔ∏è';
                break;
            case 'premium':
                amount = 1300;
                displayName = 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (1300 ‚≠êÔ∏è)';
                break;
            default:
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
                return;
        }

        try {
            const user = await getUser(userId);

            if (!user) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            if (user.balance < amount) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                return;
            }

            // Create withdrawal request
            db.run(
                'INSERT INTO withdrawal_requests (user_id, amount, type) VALUES (?, ?, ?)',
                [userId, amount, displayName],
                function(err) {
                    if (err) {
                        console.error('Withdrawal request error:', err);
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
                        return;
                    }

                    const requestId = this.lastID;

                    // Send request to admin channel
                    const adminMessage = `üí∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${requestId}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî ID: ${user.id}
üë§ Username: @${user.username || '–Ω–µ—Ç'}
üîó –°—Å—ã–ª–∫–∞: tg://user?id=${user.id}
üí∞ –°—É–º–º–∞: ${displayName}
‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å –¥–æ –≤—ã–≤–æ–¥–∞: ${user.balance.toFixed(1)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

                    const adminKeyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `approve_${requestId}` },
                                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_data: `reject_${requestId}` }
                                ]
                            ]
                        }
                    };

                    bot.sendMessage(ADMIN_CHANNEL, adminMessage, adminKeyboard);

                    // Confirm to user
                    bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!');
                    bot.editMessageText(
                        `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${displayName} —Å–æ–∑–¥–∞–Ω–∞!

–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.`,
                        {
                            chat_id: message.chat.id,
                            message_id: message.message_id
                        }
                    );
                }
            );

        } catch (error) {
            console.error('Withdrawal callback error:', error);
            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }

    // Admin approval/rejection
    else if (data.startsWith('approve_') || data.startsWith('reject_')) {
        const [action, requestId] = data.split('_');

        db.get('SELECT * FROM withdrawal_requests WHERE id = ?', [requestId], (err, request) => {
            if (err || !request) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            if (request.status !== 'pending') {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
                return;
            }

            if (action === 'approve') {
                // Approve withdrawal
                db.run(
                    'UPDATE withdrawal_requests SET status = "approved", processed_at = CURRENT_TIMESTAMP WHERE id = ?',
                    [requestId]
                );

                // Deduct balance
                db.run(
                    'UPDATE users SET balance = balance - ? WHERE id = ?',
                    [request.amount, request.user_id]
                );

                // Notify user
                bot.sendMessage(request.user_id, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${request.type} –æ–¥–æ–±—Ä–µ–Ω–∞!

‚≠êÔ∏è –ó–≤—ë–∑–¥—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!`);

                // Update admin message
                bot.editMessageText(
                    `‚úÖ –û–î–û–ë–†–ï–ù–û\n\n${message.text}`,
                    {
                        chat_id: message.chat.id,
                        message_id: message.message_id
                    }
                );

                bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞');

            } else if (action === 'reject') {
                // For rejection, we should ask for reason, but for now just reject
                db.run(
                    'UPDATE withdrawal_requests SET status = "rejected", processed_at = CURRENT_TIMESTAMP WHERE id = ?',
                    [requestId]
                );

                // Notify user (TODO: add reason input)
                bot.sendMessage(request.user_id, `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${request.type} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);

                // Update admin message
                bot.editMessageText(
                    `‚ùå –û–¢–ö–õ–û–ù–ï–ù–û\n\n${message.text}`,
                    {
                        chat_id: message.chat.id,
                        message_id: message.message_id
                    }
                );

                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
            }
        });
    }

    // Ratings callbacks
    else if (data === 'rating_all') {
        db.all(`
            SELECT first_name, referrals_count, id
            FROM users
            WHERE referrals_count > 0
            ORDER BY referrals_count DESC
            LIMIT 10
        `, [], (err, rows) => {
            if (err) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
                return;
            }

            let ratingText = 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n\n';

            if (rows.length === 0) {
                ratingText += '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üòî';
            } else {
                rows.forEach((user, index) => {
                    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                    ratingText += `${medal} ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - ${user.referrals_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
                });
            }

            bot.editMessageText(ratingText, {
                chat_id: message.chat.id,
                message_id: message.message_id
            });
        });

        bot.answerCallbackQuery(callbackQuery.id);
    }

    else if (data === 'rating_week') {
        db.all(`
            SELECT first_name, referrals_today, id
            FROM users
            WHERE referrals_today > 0
            ORDER BY referrals_today DESC
            LIMIT 10
        `, [], (err, rows) => {
            if (err) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞');
                return;
            }

            let ratingText = 'üìÖ –†–µ–π—Ç–∏–Ω–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';

            if (rows.length === 0) {
                ratingText += '–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üòî';
            } else {
                rows.forEach((user, index) => {
                    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                    ratingText += `${medal} ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - ${user.referrals_today} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
                });
            }

            bot.editMessageText(ratingText, {
                chat_id: message.chat.id,
                message_id: message.message_id
            });
        });

        bot.answerCallbackQuery(callbackQuery.id);
    }

    // Case opening callback
    else if (data === 'open_case') {
        try {
            const user = await getUser(userId);

            if (!user || user.referrals_today < 3) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
                return;
            }

            const today = new Date().toDateString();
            const lastCaseOpen = user.last_case_open ? new Date(user.last_case_open).toDateString() : null;

            if (lastCaseOpen === today) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –£–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è');
                return;
            }

            // Generate random reward (1-10 stars)
            const reward = Math.floor(Math.random() * 10) + 1;

            // Update user
            db.run(
                `UPDATE users SET
                 balance = balance + ?,
                 last_case_open = CURRENT_TIMESTAMP
                 WHERE id = ?`,
                [reward, userId],
                function(err) {
                    if (err) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
                        return;
                    }

                    bot.answerCallbackQuery(callbackQuery.id, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! +${reward} ‚≠êÔ∏è`);
                    bot.editMessageText(
                        `üéÅ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${reward} ‚≠êÔ∏è!

–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º!`,
                        {
                            chat_id: message.chat.id,
                            message_id: message.message_id
                        }
                    );
                }
            );

        } catch (error) {
            console.error('Case opening error:', error);
            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }

    // Buy lottery ticket callback
    else if (data.startsWith('buy_ticket_')) {
        const lotteryId = data.replace('buy_ticket_', '');

        try {
            const user = await getUser(userId);

            if (!user) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // Check if lottery exists and is active
            db.get('SELECT * FROM lotteries WHERE id = ? AND is_active = 1', [lotteryId], (err, lottery) => {
                if (err || !lottery) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return;
                }

                // Check if user already has a ticket for this lottery
                db.get('SELECT * FROM lottery_tickets WHERE lottery_id = ? AND user_id = ?', [lotteryId, userId], (err, existingTicket) => {
                    if (err) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤');
                        return;
                    }

                    if (existingTicket) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–ª–µ—Ç –Ω–∞ —ç—Ç—É –ª–æ—Ç–µ—Ä–µ—é');
                        return;
                    }

                    // Check if user has enough balance
                    if (user.balance < lottery.ticket_price) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
                        return;
                    }

                    // Check if there are available tickets
                    if (lottery.current_tickets >= lottery.max_tickets) {
                        bot.answerCallbackQuery(callbackQuery.id, '‚ùå –í—Å–µ –±–∏–ª–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã');
                        return;
                    }

                    // Buy ticket
                    db.run('INSERT INTO lottery_tickets (lottery_id, user_id) VALUES (?, ?)', [lotteryId, userId], function(err) {
                        if (err) {
                            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞');
                            return;
                        }

                        // Deduct balance and update lottery
                        db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [lottery.ticket_price, userId]);
                        db.run('UPDATE lotteries SET current_tickets = current_tickets + 1 WHERE id = ?', [lotteryId]);

                        bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!');

                        // Check if lottery is full
                        if (lottery.current_tickets + 1 >= lottery.max_tickets) {
                            // Draw winners
                            setTimeout(() => drawLotteryWinners(lotteryId), 1000);
                        }

                        bot.editMessageText(
                            `üé´ –ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!

–í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç –Ω–∞ –ª–æ—Ç–µ—Ä–µ—é "${lottery.name}"
–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${lottery.ticket_price} ‚≠êÔ∏è

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –≤—Å–µ –±–∏–ª–µ—Ç—ã.`,
                            {
                                chat_id: message.chat.id,
                                message_id: message.message_id
                            }
                        );
                    });
                });
            });

        } catch (error) {
            console.error('Ticket purchase error:', error);
            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
});

// Tasks handler
bot.onText(/üìã –ó–∞–¥–∞–Ω–∏—è/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // Get available task for user
        db.get(`
            SELECT t.* FROM tasks t
            LEFT JOIN user_tasks ut ON t.id = ut.task_id AND ut.user_id = ?
            WHERE t.is_active = 1 AND ut.task_id IS NULL
            ORDER BY t.id ASC
            LIMIT 1
        `, [userId], async (err, task) => {
            if (err) {
                console.error('Tasks error:', err);
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π.');
                return;
            }

            if (!task) {
                bot.sendMessage(chatId, 'üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!\n\n–ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.', backToMainKeyboard);
                return;
            }

            const taskMessage = `üìã –î–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:

üì∫ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: ${task.channel_name}
üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠êÔ∏è

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;

            const taskKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üì∫ –í—ã–ø–æ–ª–Ω–∏—Ç—å', url: `https://t.me/${task.channel_id.replace('@', '')}` },
                            { text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `check_task_${task.id}` }
                        ],
                        [
                            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: `skip_task_${task.id}` }
                        ]
                    ]
                }
            };

            bot.sendMessage(chatId, taskMessage, taskKeyboard);
        });

    } catch (error) {
        console.error('Error in tasks:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// Task check callback
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data.startsWith('check_task_')) {
        const taskId = data.replace('check_task_', '');

        // Get task details
        db.get('SELECT * FROM tasks WHERE id = ?', [taskId], async (err, task) => {
            if (err || !task) {
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            try {
                // Check if user is subscribed to the channel
                const member = await bot.getChatMember(task.channel_id, userId);

                if (member.status === 'left' || member.status === 'kicked') {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!');
                    return;
                }

                // Mark task as completed
                db.run(
                    'INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)',
                    [userId, taskId],
                    function(err) {
                        if (err) {
                            bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                            return;
                        }

                        // Add reward to user balance
                        db.run(
                            'UPDATE users SET balance = balance + ? WHERE id = ?',
                            [task.reward, userId]
                        );

                        bot.answerCallbackQuery(callbackQuery.id, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} ‚≠êÔ∏è`);
                        bot.editMessageText(
                            `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${task.reward} ‚≠êÔ∏è\n\n–î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–¥–∞–Ω–∏—è" –≤ –º–µ–Ω—é.`,
                            {
                                chat_id: message.chat.id,
                                message_id: message.message_id
                            }
                        );
                    }
                );

            } catch (checkError) {
                console.error('Subscription check error:', checkError);
                bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
            }
        });
    }

    else if (data.startsWith('skip_task_')) {
        const taskId = data.replace('skip_task_', '');

        // Mark task as completed (skipped)
        db.run(
            'INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)',
            [userId, taskId],
            function(err) {
                if (err) {
                    bot.answerCallbackQuery(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞');
                    return;
                }

                bot.answerCallbackQuery(callbackQuery.id, '‚è≠Ô∏è –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ');
                bot.editMessageText(
                    `‚è≠Ô∏è –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ\n\n–î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–¥–∞–Ω–∏—è" –≤ –º–µ–Ω—é.`,
                    {
                        chat_id: message.chat.id,
                        message_id: message.message_id
                    }
                );
            }
        );
    }
});

// Ratings handler
bot.onText(/üèÜ –†–µ–π—Ç–∏–Ω–≥–∏/, (msg) => {
    const chatId = msg.chat.id;

    const ratingsMessage = `üèÜ –†–µ–π—Ç–∏–Ω–≥–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:`;

    const ratingsKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'rating_all' },
                    { text: 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'rating_week' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, ratingsMessage, ratingsKeyboard);
});

// Cases handler
bot.onText(/üéÅ –ö–µ–π—Å—ã/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        const user = await getUser(userId);

        if (!user) {
            bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            return;
        }

        const today = new Date().toDateString();
        const lastCaseOpen = user.last_case_open ? new Date(user.last_case_open).toDateString() : null;

        if (lastCaseOpen === today) {
            bot.sendMessage(chatId, 'üì¶ –í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º.', backToMainKeyboard);
            return;
        }

        if (user.referrals_today < 3) {
            const casesMessage = `üéÅ –ö–µ–π—Å—ã

üì¶ –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å.

üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${user.referrals_today}/3

–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â—ë ${3 - user.referrals_today} –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å!`;

            bot.sendMessage(chatId, casesMessage, backToMainKeyboard);
            return;
        }

        const casesMessage = `üéÅ –î–æ—Å—Ç—É–ø–µ–Ω –∫–µ–π—Å!

üì¶ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 –¥–æ 10 ‚≠êÔ∏è!
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${user.referrals_today}

–û—Ç–∫—Ä–æ–µ—Ç–µ –∫–µ–π—Å?`;

        const casesKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', callback_data: 'open_case' }]
                ]
            }
        };

        bot.sendMessage(chatId, casesMessage, casesKeyboard);

    } catch (error) {
        console.error('Error in cases:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// Lottery handler
bot.onText(/üé∞ –õ–æ—Ç–µ—Ä–µ—è/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        // Get active lotteries
        db.all('SELECT * FROM lotteries WHERE is_active = 1', [], (err, lotteries) => {
            if (err) {
                console.error('Lottery error:', err);
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π.');
                return;
            }

            if (lotteries.length === 0) {
                bot.sendMessage(chatId, 'üé∞ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!', backToMainKeyboard);
                return;
            }

            let lotteryMessage = 'üé∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏:\n\n';
            const lotteryKeyboard = {
                reply_markup: {
                    inline_keyboard: []
                }
            };

            lotteries.forEach((lottery, index) => {
                const remainingTickets = lottery.max_tickets - lottery.current_tickets;
                lotteryMessage += `${index + 1}. ${lottery.name}\n`;
                lotteryMessage += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} ‚≠êÔ∏è\n`;
                lotteryMessage += `üé´ –û—Å—Ç–∞–ª–æ—Å—å –±–∏–ª–µ—Ç–æ–≤: ${remainingTickets}/${lottery.max_tickets}\n`;
                lotteryMessage += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${lottery.winners_count}\n\n`;

                if (remainingTickets > 0) {
                    lotteryKeyboard.reply_markup.inline_keyboard.push([
                        { text: `üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç (${lottery.ticket_price} ‚≠êÔ∏è)`, callback_data: `buy_ticket_${lottery.id}` }
                    ]);
                }
            });

            if (lotteryKeyboard.reply_markup.inline_keyboard.length === 0) {
                lotteryMessage += '‚ùå –í—Å–µ –±–∏–ª–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!';
            }

            bot.sendMessage(chatId, lotteryMessage, lotteryKeyboard);
        });

    } catch (error) {
        console.error('Error in lottery:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});

// Function to draw lottery winners
function drawLotteryWinners(lotteryId) {
    db.get('SELECT * FROM lotteries WHERE id = ?', [lotteryId], (err, lottery) => {
        if (err || !lottery) return;

        // Get all participants
        db.all('SELECT * FROM lottery_tickets WHERE lottery_id = ?', [lotteryId], (err, tickets) => {
            if (err || tickets.length === 0) return;

            // Shuffle and select winners
            const shuffled = tickets.sort(() => 0.5 - Math.random());
            const winners = shuffled.slice(0, lottery.winners_count);

            // Calculate prize per winner (90% of total, 10% for bot)
            const totalPrize = lottery.max_tickets * lottery.ticket_price;
            const prizePool = totalPrize * 0.9;
            const prizePerWinner = prizePool / lottery.winners_count;

            // Award prizes
            winners.forEach(winner => {
                db.run('UPDATE users SET balance = balance + ? WHERE id = ?', [prizePerWinner, winner.user_id]);

                // Notify winner
                bot.sendMessage(winner.user_id, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ "${lottery.name}"!

üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${prizePerWinner.toFixed(1)} ‚≠êÔ∏è

–ü—Ä–∏–∑ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!`);
            });

            // Mark lottery as inactive
            db.run('UPDATE lotteries SET is_active = 0 WHERE id = ?', [lotteryId]);

            // Notify all participants about results
            tickets.forEach(ticket => {
                const isWinner = winners.some(w => w.user_id === ticket.user_id);
                if (!isWinner) {
                    bot.sendMessage(ticket.user_id, `üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏ "${lottery.name}" –æ–±—ä—è–≤–ª–µ–Ω—ã!

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ—Ç —Ä–∞–∑.
–ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å - —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –ª–æ—Ç–µ—Ä–µ–∏!`);
                }
            });
        });
    });
}

// Instruction handler
bot.onText(/üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è/, (msg) => {
    const chatId = msg.chat.id;

    const instruction = `üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üåü –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã:

1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ 3 ‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ
2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è - –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã
3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫–µ—Ä - –ø–æ–ª—É—á–∞–π—Ç–µ 0.1 ‚≠êÔ∏è –≤ –¥–µ–Ω—å
4Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã (–ø—Ä–∏ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –≤ –¥–µ–Ω—å)
5Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –ª–æ—Ç–µ—Ä–µ—è—Ö

üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:
- –ú–∏–Ω–∏–º—É–º 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã: 15, 25, 50, 100 ‚≠êÔ∏è
- Telegram Premium –∑–∞ 1300 ‚≠êÔ∏è

üèÜ –†–µ–π—Ç–∏–Ω–≥–∏:
- –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
- –†–µ–π—Ç–∏–Ω–≥ –∑–∞ –Ω–µ–¥–µ–ª—é

‚ùì –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

    bot.sendMessage(chatId, instruction, backToMainKeyboard);
});

// Back to main menu handler
bot.onText(/üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/, (msg) => {
    const chatId = msg.chat.id;

    bot.sendMessage(chatId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard);
});

// Reset daily referrals at midnight
cron.schedule('0 0 * * *', () => {
    db.run('UPDATE users SET referrals_today = 0');
    console.log('Daily referrals reset');
});

console.log('Bot started successfully!');
