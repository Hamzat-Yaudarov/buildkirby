/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã SubGram
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
 */

const smartSubGram = require('./subgram-smart-handler');
const db = require('./database');

// –ú–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockBot = {
    getChatMember: async (chat, userId) => {
        console.log(`[MOCK] Checking membership: user ${userId} in chat ${chat}`);
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ - –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        return { status: 'member' }; // –∏–ª–∏ 'left', 'kicked'
    }
};

async function testSmartSubGram() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã SubGram...\n');

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.initializeDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n');

        // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID –∞–¥–º–∏–Ω–∞)
        const testUserId = 7972065986;

        console.log('='.repeat(50));
        console.log('1Ô∏è‚É£ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è SubGram');
        console.log('='.repeat(50));

        const state = await smartSubGram.getSubGramState(testUserId);
        console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ SubGram:');
        console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${state.state}`);
        console.log(`   ‚Ä¢ –î–æ–ª–∂–µ–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ${state.shouldBlock}`);
        console.log(`   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${state.channels.length}`);
        console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${state.message}`);
        if (state.error) {
            console.log(`   ‚Ä¢ –û—à–∏–±–∫–∞: ${state.error}`);
        }

        console.log('\n' + '='.repeat(50));
        console.log('2Ô∏è‚É£ –¢–ï–°–¢: –†–µ—à–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–∞');
        console.log('='.repeat(50));

        const accessCheck = await smartSubGram.shouldBlockBotAccess(testUserId);
        console.log('üîí –†–µ—à–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ:');
        console.log(`   ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å: ${accessCheck.shouldBlock}`);
        console.log(`   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${accessCheck.reason}`);
        console.log(`   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${accessCheck.channels.length}`);
        console.log(`   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${accessCheck.message}`);

        console.log('\n' + '='.repeat(50));
        console.log('3Ô∏è‚É£ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        console.log('='.repeat(50));

        const subscriptionMessage = await smartSubGram.getSubscriptionMessage(testUserId);
        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        console.log(`   ‚Ä¢ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: ${subscriptionMessage.accessAllowed}`);
        console.log(`   ‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${subscriptionMessage.reason || 'N/A'}`);
        if (subscriptionMessage.channelsCount) {
            console.log(`   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionMessage.channelsCount}`);
        }

        console.log('\n' + '='.repeat(50));
        console.log('4Ô∏è‚É£ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (—Å –º–æ–∫-–±–æ—Ç–æ–º)');
        console.log('='.repeat(50));

        const subscriptionCheck = await smartSubGram.checkUserSubscriptions(mockBot, testUserId);
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:');
        console.log(`   ‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${subscriptionCheck.allSubscribed}`);
        console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${subscriptionCheck.channels.length}`);
        if (subscriptionCheck.refreshed) {
            console.log('   ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }

        console.log('\n' + '='.repeat(50));
        console.log('5Ô∏è‚É£ –¢–ï–°–¢: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
        console.log('='.repeat(50));

        const stats = await smartSubGram.getSubGramStats();
        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        if (stats.api) {
            console.log(`   ‚Ä¢ API –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.api.total_requests || 0}`);
            console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.api.successful_requests || 0}`);
        }
        if (stats.channels) {
            console.log(`   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–Ω–∞–ª–∞–º–∏: ${stats.channels.users_with_channels || 0}`);
        }

        console.log('\nüéØ –ò–¢–û–ì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('='.repeat(50));

        if (!accessCheck.shouldBlock) {
            console.log('‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
            console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${accessCheck.reason}`);
        } else {
            console.log('‚ö†Ô∏è –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã');
            console.log(`   –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${accessCheck.channels.length}`);
        }

        console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ SubGram —Å —Ç–æ–∫–µ–Ω–æ–º');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ SubGram API –∑–∞–ø—Ä–æ—Å–æ–≤');
        console.log('4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /smart_subgram_test –≤ –±–æ—Ç–µ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        try {
            await db.closeConnection();
            console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeError);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
    testSmartSubGram().then(() => {
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        process.exit(0);
    }).catch(error => {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = { testSmartSubGram };
