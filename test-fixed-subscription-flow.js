/**
 * –¢–µ—Å—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ—ç—Ç–∞–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */

const subscriptionFlow = require('./subscription-flow-manager');

// –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockBot = {
    getChatMember: async (chatId, userId) => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫
        console.log(`[MOCK] Checking membership for user ${userId} in channel ${chatId}`);
        
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "subscribed"
        if (chatId.includes('subscribed') || chatId.includes('_ok')) {
            return { status: 'member' };
        } else {
            return { status: 'left' };
        }
    }
};

// –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–∞–Ω–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockSponsorChannels = [
    { id: 'https://t.me/sponsor1_subscribed', name: '–°–ø–æ–Ω—Å–æ—Ä 1', type: 'sponsor', link: 'https://t.me/sponsor1_subscribed' },
    { id: 'https://t.me/sponsor2_not', name: '–°–ø–æ–Ω—Å–æ—Ä 2', type: 'sponsor', link: 'https://t.me/sponsor2_not' }
];

const mockRequiredChannels = [
    { id: '@required1_ok', name: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π 1', type: 'required' },
    { id: '@required2_not', name: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π 2', type: 'required' }
];

async function testSubscriptionFlow() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...\n');

    const testUserId = 12345;

    try {
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤...');
        
        // –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        const originalGetSponsorChannels = subscriptionFlow.getSponsorChannels;
        const originalGetRequiredChannels = subscriptionFlow.getRequiredChannels;
        
        subscriptionFlow.getSponsorChannels = async () => mockSponsorChannels;
        subscriptionFlow.getRequiredChannels = async () => mockRequiredChannels;

        const stageInfo = await subscriptionFlow.getCurrentSubscriptionStage(testUserId);
        
        console.log(`   –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã: ${stageInfo.sponsorChannels.length}`);
        console.log(`   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${stageInfo.requiredChannels.length}`);
        console.log('   ‚úÖ –ö–∞–Ω–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n');

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        console.log('2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫...');
        
        const updatedStageInfo = await subscriptionFlow.updateSubscriptionStage(mockBot, testUserId);
        
        console.log(`   –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: ${updatedStageInfo.stage}`);
        console.log(`   –°—Ç–∞—Ç—É—Å —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: ${updatedStageInfo.sponsorStatus?.subscribedCount}/${updatedStageInfo.sponsorStatus?.totalCount}`);
        console.log(`   –°—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö: ${updatedStageInfo.requiredStatus?.subscribedCount}/${updatedStageInfo.requiredStatus?.totalCount}`);
        console.log(`   –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${updatedStageInfo.channelsToShow?.length || 0}`);
        console.log(`   –í—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${updatedStageInfo.allCompleted}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æÔøΩÔøΩ—Ç–∏ –ª–æ–≥–∏–∫–∏
        if (updatedStageInfo.stage === subscriptionFlow.SUBSCRIPTION_STAGES.SPONSORS) {
            console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —ç—Ç–∞–ø SPONSORS');
        } else if (updatedStageInfo.stage === subscriptionFlow.SUBSCRIPTION_STAGES.REQUIRED) {
            console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —ç—Ç–∞–ø REQUIRED');
        } else if (updatedStageInfo.stage === subscriptionFlow.SUBSCRIPTION_STAGES.COMPLETED) {
            console.log('   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —ç—Ç–∞–ø COMPLETED');
        } else {
            console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —ç—Ç–∞–ø:', updatedStageInfo.stage);
        }

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ calculateSubscriptionStatus
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ calculateSubscriptionStatus...');
        
        const testChannels = [
            { subscribed: true },
            { subscribed: false },
            { subscribed: true }
        ];
        
        const status = subscriptionFlow.calculateSubscriptionStatus(testChannels);
        console.log(`   –ü–æ–¥–ø–∏—Å–∞–Ω–æ: ${status.subscribedCount}/${status.totalCount}`);
        console.log(`   –í—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: ${status.allSubscribed}`);
        
        if (status.subscribedCount === 2 && status.totalCount === 3 && !status.allSubscribed) {
            console.log('   ‚úÖ calculateSubscriptionStatus —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('   ‚ùå calculateSubscriptionStatus —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }

        // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...');
        
        const message = subscriptionFlow.formatStageMessage(updatedStageInfo);
        console.log(`   –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.message.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: ${message.buttons.length}`);
        console.log('   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');

        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        subscriptionFlow.getSponsorChannels = originalGetSponsorChannels;
        subscriptionFlow.getRequiredChannels = originalGetRequiredChannels;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
    testSubscriptionFlow();
}

module.exports = { testSubscriptionFlow };
