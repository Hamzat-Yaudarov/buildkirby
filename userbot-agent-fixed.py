#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram Userbot Agent –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥
–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ï—Å—Ç—å —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
"""

import asyncio
import logging
import random
import time
from datetime import datetime, timedelta
import sqlite3
import json
import os
from typing import Optional, Dict, Any

from pyrogram import Client, filters, types
from pyrogram.errors import (
    FloodWait, UserDeactivated, UserDeactivatedBan, 
    PeerIdInvalid, UsernameInvalid, SessionPasswordNeeded
)
from pyrogram.raw import functions, types as raw_types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –ë–ï–ó–û–ü–ê–°–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø)
SECURITY_CONFIG = {
    "min_delay": 60,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    "max_delay": 180,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    "max_stars_per_hour": 10,  # –ú–∞–∫—Å–∏–º—É–º –∑–≤—ë–∑–¥ –≤ —á–∞—Å
    "max_stars_per_day": 80,   # –ú–∞–∫—Å–∏–º—É–º –∑–≤—ë–∑–¥ –≤ –¥–µ–Ω—å
    "work_hours_start": 0,     # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–ú–°–ö)
    "work_hours_end": 23,      # –ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–ú–°–ö)
    "max_retries": 3,          # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    "test_mode": True,         # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –º–∞–ª—ã–µ —Å—É–º–º—ã)
    "test_max_amount": 25      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_CONFIG = {
    "api_id": 28085629,
    "api_hash": "78027b2ae19b9ec44a6e03bf5cc1299f",
    "phone_number": "+79639887777",
    "username": "kirbystarsagent"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('userbot-agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SafeStarsAgent:
    def __init__(self):
        self.app = None
        self.db_path = "userbot_queue.db"
        self.stats = {
            "stars_sent_today": 0,
            "stars_sent_hour": 0,
            "last_send_time": None,
            "hour_reset_time": datetime.now().replace(minute=0, second=0, microsecond=0),
            "day_reset_time": datetime.now().replace(hour=0, minute=0, second=0, microsecond=0),
            "total_sent": 0,
            "total_errors": 0
        }
        
        self.init_database()
        self.load_stats()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS withdrawal_queue (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id BIGINT NOT NULL,
                amount INTEGER NOT NULL,
                withdrawal_type TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                attempts INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                processed_at TIMESTAMP NULL,
                error_message TEXT NULL
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stats_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date DATE NOT NULL,
                stars_sent INTEGER DEFAULT 0,
                errors_count INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(date)
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS agent_settings (
                id INTEGER PRIMARY KEY,
                daily_limit INTEGER DEFAULT 80,
                hourly_limit INTEGER DEFAULT 10,
                max_amount INTEGER DEFAULT 25,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ë–ï–ó–û–ü–ê–°–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø)
        cursor.execute('''
            INSERT OR REPLACE INTO agent_settings (id, daily_limit, hourly_limit, max_amount)
            VALUES (1, 80, 10, 25)
        ''')
        
        conn.commit()
        conn.close()

    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        today = datetime.now().date()
        cursor.execute(
            "SELECT stars_sent, errors_count FROM stats_log WHERE date = ?",
            (today,)
        )

        result = cursor.fetchone()
        if result:
            self.stats["stars_sent_today"] = result[0]
            self.stats["total_errors"] = result[1]

        conn.close()

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            cursor.execute(
                "SELECT daily_limit, hourly_limit, max_amount FROM agent_settings WHERE id = 1"
            )

            result = cursor.fetchone()
            if result:
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –û–ü–ê–°–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
                daily_limit = min(result[0], 80)  # –ù–µ –±–æ–ª—å—à–µ 80
                hourly_limit = min(result[1], 10)  # –ù–µ –±–æ–ª—å—à–µ 10
                max_amount = min(result[2], 25)    # –ù–µ –±–æ–ª—å—à–µ 25
                
                SECURITY_CONFIG["max_stars_per_day"] = daily_limit
                SECURITY_CONFIG["max_stars_per_hour"] = hourly_limit
                SECURITY_CONFIG["test_max_amount"] = max_amount

                # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –±–æ–ª—å—à–µ 25, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º
                if max_amount > 25:
                    SECURITY_CONFIG["test_mode"] = True
                    SECURITY_CONFIG["test_max_amount"] = 25

                logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {daily_limit}/–¥–µ–Ω—å, {hourly_limit}/—á–∞—Å, {max_amount} –∑–∞ —Ä–∞–∑")

            conn.close()

        except Exception as error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {error}")
            logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        today = datetime.now().date()
        cursor.execute('''
            INSERT OR REPLACE INTO stats_log (date, stars_sent, errors_count)
            VALUES (?, ?, ?)
        ''', (today, self.stats["stars_sent_today"], self.stats["total_errors"]))
        
        conn.commit()
        conn.close()

    async def init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
            session_exists = os.path.exists("userbot_session.session")

            self.app = Client(
                "userbot_session",
                api_id=API_CONFIG["api_id"],
                api_hash=API_CONFIG["api_hash"],
                phone_number=API_CONFIG["phone_number"]
            )

            if not session_exists:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

            await self.app.start()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            me = await self.app.get_me()
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    def is_working_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
        now = datetime.now()
        hour = now.hour
        return SECURITY_CONFIG["work_hours_start"] <= hour <= SECURITY_CONFIG["work_hours_end"]

    def can_send_stars(self, amount: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
        if not self.is_working_hours():
            return False, "–ù–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã"
        
        # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–æ–≤
        if now >= self.stats["hour_reset_time"] + timedelta(hours=1):
            self.stats["stars_sent_hour"] = 0
            self.stats["hour_reset_time"] = now.replace(minute=0, second=0, microsecond=0)
        
        if now.date() > self.stats["day_reset_time"].date():
            self.stats["stars_sent_today"] = 0
            self.stats["day_reset_time"] = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if self.stats["stars_sent_hour"] + amount > SECURITY_CONFIG["max_stars_per_hour"]:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ —á–∞—Å ({SECURITY_CONFIG['max_stars_per_hour']})"
        
        if self.stats["stars_sent_today"] + amount > SECURITY_CONFIG["max_stars_per_day"]:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ –¥–µ–Ω—å ({SECURITY_CONFIG['max_stars_per_day']})"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if SECURITY_CONFIG["test_mode"] and amount > SECURITY_CONFIG["test_max_amount"]:
            return False, f"–¢–µ—Å—Ç-—Ä–µ–∂–∏–º: –º–∞–∫—Å–∏–º—É–º {SECURITY_CONFIG['test_max_amount']} –∑–≤—ë–∑–¥"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        if self.stats["last_send_time"]:
            time_since_last = (now - self.stats["last_send_time"]).total_seconds()
            if time_since_last < SECURITY_CONFIG["min_delay"]:
                return False, f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ—Å—Ç–∞–ª–æ—Å—å {SECURITY_CONFIG['min_delay'] - time_since_last:.0f} —Å–µ–∫)"
        
        return True, "OK"

    async def send_stars_to_user(self, user_id: int, amount: int) -> tuple[bool, str]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            logger.info(f"üåü –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {amount} –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            can_send, reason = self.can_send_stars(amount)
            if not can_send:
                logger.warning(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {reason}")
                return False, reason
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                user = await self.app.get_users(user_id)
                logger.info(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–±–µ–∑ username'})")
            except (PeerIdInvalid, UsernameInvalid):
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            delay = random.randint(SECURITY_CONFIG["min_delay"], SECURITY_CONFIG["max_delay"])
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...")
            await asyncio.sleep(delay)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ó–í–Å–ó–î
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
                await self.app.invoke(
                    functions.payments.SendStarsForm(
                        peer=await self.app.resolve_peer(user_id),
                        star_count=amount,
                        from_balance=True
                    )
                )
                logger.info(f"üéÅ [–†–ï–ê–õ–¨–ù–û] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as gift_error:
                # –ï—Å–ª–∏ API –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–µ–ª–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"‚ö†Ô∏è API –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {gift_error}")
                logger.info(f"üéÅ [–°–ò–ú–£–õ–Ø–¶–ò–Ø] –û—Ç–ø—Ä–∞–≤–∫–∞ {amount} –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –±—É–¥—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            now = datetime.now()
            self.stats["stars_sent_today"] += amount
            self.stats["stars_sent_hour"] += amount
            self.stats["last_send_time"] = now
            self.stats["total_sent"] += amount
            
            self.save_stats()
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True, "–ó–≤—ë–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            
        except FloodWait as e:
            wait_time = e.value
            logger.warning(f"‚è∞ FloodWait: –∂–¥—ë–º {wait_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)
            return False, f"FloodWait: {wait_time}s"
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            self.stats["total_errors"] += 1
            self.save_stats()
            return False, error_msg

    async def process_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, user_id, amount, withdrawal_type, attempts
            FROM withdrawal_queue
            WHERE status = 'pending' AND attempts < ?
            ORDER BY created_at ASC
            LIMIT 1
        ''', (SECURITY_CONFIG["max_retries"],))
        
        task = cursor.fetchone()
        
        if task:
            task_id, user_id, amount, withdrawal_type, attempts = task
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—ë–∑–¥
            success, message = await self.send_stars_to_user(user_id, amount)
            
            if success:
                # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                cursor.execute('''
                    UPDATE withdrawal_queue 
                    SET status = 'completed', processed_at = CURRENT_TIMESTAMP
                    WHERE id = ?
                ''', (task_id,))
                logger.info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                cursor.execute('''
                    UPDATE withdrawal_queue 
                    SET attempts = attempts + 1, error_message = ?
                    WHERE id = ?
                ''', (message, task_id))
                
                if attempts + 1 >= SECURITY_CONFIG["max_retries"]:
                    cursor.execute('''
                        UPDATE withdrawal_queue 
                        SET status = 'failed'
                        WHERE id = ?
                    ''', (task_id,))
                    logger.error(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ {attempts + 1} –ø–æ–ø—ã—Ç–æ–∫")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ—É–¥–∞—á–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempts + 1})")
        
        conn.commit()
        conn.close()

    async def run_agent(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Userbot Agent –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.load_settings()

        if not await self.init_client():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return

        logger.info("‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        try:
            while True:
                if self.is_working_hours():
                    await self.process_queue()
                    await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                else:
                    logger.info("üò¥ –ù–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –∞–≥–µ–Ω—Ç —Å–ø–∏—Ç...")
                    await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤

        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.app:
                await self.app.stop()
            logger.info("üëã –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞
agent = SafeStarsAgent()

if __name__ == "__main__":
    asyncio.run(agent.run_agent())
