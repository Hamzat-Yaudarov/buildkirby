#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import logging
import sqlite3
from datetime import datetime
from pyrogram import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_CONFIG = {
    "api_id": 28085629,
    "api_hash": "78027b2ae19b9ec44a6e03bf5cc1299f",
    "phone_number": "+79639887777"
}

async def test_stars_sending():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –ó–í–Å–ó–î\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    session_file = "userbot_session.session"
    if not os.path.exists(session_file):
        print("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python3 fix-userbot-auth.py")
        return False
    
    print("‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–∞–π–¥–µ–Ω")
    
    # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    try:
        app = Client(
            "userbot_session",
            api_id=API_CONFIG["api_id"],
            api_hash=API_CONFIG["api_hash"]
        )
        
        print("üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
        await app.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        me = await app.get_me()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {me.first_name} (@{me.username})")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π...")
        
        db_path = "userbot_queue.db"
        if os.path.exists(db_path):
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            cursor.execute("""
                SELECT id, user_id, amount, withdrawal_type, status, created_at
                FROM withdrawal_queue 
                WHERE status = 'pending'
                ORDER BY created_at ASC
                LIMIT 1
            """)
            
            task = cursor.fetchone()
            
            if task:
                task_id, user_id, amount, withdrawal_type, status, created_at = task
                print(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {amount} –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # 4. –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò (–ù–ï –†–ï–ê–õ–¨–ù–ê–Ø!)
                print(f"\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –û–¢–ü–†–ê–í–ö–£ {amount} –ó–í–Å–ó–î...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user = await app.get_users(user_id)
                    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.first_name}")
                    
                    # –°–ò–ú–£–õ–Ø–¶–ò–Ø –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∞)
                    print("üéÅ [–¢–ï–°–¢] –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥...")
                    await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
                    
                    print("‚úÖ [–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                    cursor.execute("""
                        UPDATE withdrawal_queue 
                        SET status = 'completed', processed_at = ?
                        WHERE id = ?
                    """, (datetime.now(), task_id))
                    
                    conn.commit()
                    print("üìä –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
                    
                except Exception as send_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}")
                    
                    if "peer id invalid" in str(send_error).lower():
                        print("‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    
            else:
                print("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ - –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                print("\nüß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
                cursor.execute("""
                    INSERT INTO withdrawal_queue (user_id, amount, withdrawal_type)
                    VALUES (?, ?, ?)
                """, (me.id, 1, 'test'))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ 1 –∑–≤–µ–∑–¥—É
                
                conn.commit()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            
            conn.close()
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        await app.stop()
        
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        
        if "auth key duplicated" in str(e).lower():
            print("üîß –í—Å–µ –µ—â–µ AUTH_KEY_DUPLICATED - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏")
        
        return False

if __name__ == "__main__":
    import os
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤—ë–∑–¥\n")
    
    result = asyncio.run(test_stars_sending())
    
    if result:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python3 userbot-agent.py")
    else:
        print("\n‚ùå –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
