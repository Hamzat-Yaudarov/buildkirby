/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */

const { subgramAPI } = require('./subgram-api');

// –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function mockProcessAPIResponse(needsSubscription, channelsToSubscribe = []) {
    return {
        needsSubscription: needsSubscription,
        channelsToSubscribe: channelsToSubscribe,
        channels: channelsToSubscribe,
        status: needsSubscription ? 'warning' : 'ok',
        code: needsSubscription ? 400 : 200,
        allSubscribed: !needsSubscription
    };
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
function testSponsorLogic() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤...\n');

    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: needsSubscription=true, –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã
    console.log('1Ô∏è‚É£ needsSubscription=true + –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã:');
    const scenario1 = mockProcessAPIResponse(true, [
        { link: 'https://t.me/channel1', name: '–ö–∞–Ω–∞–ª 1' },
        { link: 'https://t.me/channel2', name: '–ö–∞–Ω–∞–ª 2' }
    ]);
    
    if (scenario1.needsSubscription && scenario1.channelsToSubscribe.length > 0) {
        console.log('   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
        console.log(`   üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${scenario1.channelsToSubscribe.length}`);
    } else {
        console.log('   ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: needsSubscription=true, –ù–ï–¢ –∫–∞–Ω–∞–ª–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
    console.log('\n2Ô∏è‚É£ needsSubscription=true + –ù–ï–¢ –∫–∞–Ω–∞–ª–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞):');
    const scenario2 = mockProcessAPIResponse(true, []);
    
    if (scenario2.needsSubscription && scenario2.channelsToSubscribe.length === 0) {
        console.log('   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–ï –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø (–ò–°–ü–†–ê–í–õ–ï–ù–û!)');
        console.log('   üí° –ü—Ä–∏—á–∏–Ω–∞: –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    } else {
        console.log('   ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (—Å—Ç–∞—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞)');
    }

    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: needsSubscription=false
    console.log('\n3Ô∏è‚É£ needsSubscription=false:');
    const scenario3 = mockProcessAPIResponse(false, []);
    
    if (!scenario3.needsSubscription) {
        console.log('   ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–ï –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
        console.log('   üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç');
    } else {
        console.log('   ‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
    }

    console.log('\nüìä –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ù–ï–°–ï–ù–´:');
    console.log('‚úÖ 1. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ getSubGramState()');
    console.log('‚úÖ 2. –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ checkUserSubscriptions()');
    console.log('‚úÖ 3. –î–æ–±–∞–≤–ª–µ–Ω–∞ retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤');
    console.log('‚úÖ 4. –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /diagnose_sponsors');

    console.log('\nüéØ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê:');
    console.log('–ë–æ—Ç –±–æ–ª—å—à–µ –ù–ï –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('–∫–æ–≥–¥–∞ SubGram –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã!');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SubGram API
async function testSubGramConfig() {
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SubGram API:');
    
    const config = subgramAPI.getConfig();
    console.log(`API URL: ${config.apiUrl}`);
    console.log(`API –∫–ª—é—á: ${config.hasApiKey ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
    console.log(`–î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${config.apiKeyLength} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    if (config.hasApiKey && config.apiKeyLength > 10) {
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SubGram –≤ –ø–æ—Ä—è–¥–∫–µ');
    } else {
        console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π SubGram');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n');
    console.log('=' * 50);
    
    testSponsorLogic();
    testSubGramConfig();
    
    console.log('\n' + '=' * 50);
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìù –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å—Ç–∏—ÇÔøΩÔøΩ –∫–æ–º–∞–Ω–¥—É: /diagnose_sponsors');
    console.log('üìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: /check_smart_state');
    console.log('üìù –î–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞: /reset_subgram_cache');
}

module.exports = {
    testSponsorLogic,
    testSubGramConfig,
    mockProcessAPIResponse
};
