#!/usr/bin/env node

/**
 * –°–ö–†–ò–ü–¢ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –õ–û–ì–û–í RAILWAY
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ª–æ–≥–æ–≤:
 * - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ Railway
 * - CSV —Ñ–∞–π–ª—ã
 * - JSON –ª–æ–≥–∏
 * - –õ–æ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram Bot API
 */

const fs = require('fs');
const path = require('path');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö ID –≤ –ª–æ–≥–∞—Ö
const USER_ID_PATTERNS = [
    // Telegram user ID patterns
    /user[_\s]*id[:\s]*(\d{6,15})/gi,
    /userId[:\s]*(\d{6,15})/gi,
    /from[:\s]*(\d{6,15})/gi,
    /chat[_\s]*id[:\s]*(\d{6,15})/gi,
    /chatId[:\s]*(\d{6,15})/gi,
    
    // –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã ID
    /"id"[:\s]*(\d{6,15})/gi,
    /'id'[:\s]*(\d{6,15})/gi,
    /\bid[:\s]*(\d{6,15})/gi,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞
    /–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª[—å—è–µ][^\d]*(\d{6,15})/gi,
    /user[^\d]*(\d{6,15})/gi,
    /–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è[^\d]*(\d{6,15})/gi,
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Telegram Bot API –ª–æ–≥–æ–≤
    /"from":\s*{"id":(\d{6,15})/gi,
    /"chat":\s*{"id":(\d{6,15})/gi,
    /"user_id"[:\s]*(\d{6,15})/gi,
    
    // –ö–∞–ø—á–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    /–∫–∞–ø—á[–∞–µ—É][^\d]*(\d{6,15})/gi,
    /–ø–æ–¥–ø–∏—Å–∫[–∞–µ—É][^\d]*(\d{6,15})/gi,
    /subscription[^\d]*(\d{6,15})/gi,
    /captcha[^\d]*(\d{6,15})/gi,
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractUserIds(text) {
    const userIds = new Set();
    
    for (const pattern of USER_ID_PATTERNS) {
        let match;
        while ((match = pattern.exec(text)) !== null) {
            const userId = parseInt(match[1]);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram User ID (–æ–±—ã—á–Ω–æ –æ—Ç 100000 –¥–æ 9999999999)
            if (userId >= 100000 && userId <= 9999999999) {
                userIds.add(userId);
            }
        }
    }
    
    return Array.from(userIds).sort((a, b) => a - b);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞
function parseCSV(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        const userIds = new Set();
        
        for (const line of lines) {
            // –ò—â–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å user ID
            const numbers = line.match(/\d{6,15}/g);
            if (numbers) {
                for (const num of numbers) {
                    const userId = parseInt(num);
                    if (userId >= 100000 && userId <= 9999999999) {
                        userIds.add(userId);
                    }
                }
            }
        }
        
        return Array.from(userIds).sort((a, b) => a - b);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞
function parseJSON(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        let jsonData;
        
        try {
            jsonData = JSON.parse(content);
        } catch {
            // –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            return extractUserIds(content);
        }
        
        const userIds = new Set();
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –≤ JSON
        function searchInObject(obj) {
            if (typeof obj === 'object' && obj !== null) {
                for (const [key, value] of Object.entries(obj)) {
                    if ((key === 'id' || key === 'user_id' || key === 'userId' || key === 'from') && 
                        typeof value === 'number' && value >= 100000 && value <= 9999999999) {
                        userIds.add(value);
                    }
                    
                    if (typeof value === 'object') {
                        searchInObject(value);
                    } else if (Array.isArray(value)) {
                        value.forEach(searchInObject);
                    }
                }
            }
        }
        
        if (Array.isArray(jsonData)) {
            jsonData.forEach(searchInObject);
        } else {
            searchInObject(jsonData);
        }
        
        return Array.from(userIds).sort((a, b) => a - b);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return [];
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async function parseLogFile(filePath) {
    try {
        if (!fs.existsSync(filePath)) {
            throw new Error(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        const stats = fs.statSync(filePath);
        const fileSize = (stats.size / 1024 / 1024).toFixed(2); // MB
        
        console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
        console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSize} MB`);
        
        const fileExtension = path.extname(filePath).toLowerCase();
        let userIds = [];
        
        switch (fileExtension) {
            case '.csv':
                console.log('üîç –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: CSV');
                userIds = parseCSV(filePath);
                break;
                
            case '.json':
                console.log('üîç –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: JSON');
                userIds = parseJSON(filePath);
                break;
                
            case '.txt':
            case '.log':
            case '':
            default:
                console.log('üîç –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑');
                const content = fs.readFileSync(filePath, 'utf8');
                userIds = extractUserIds(content);
                break;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: ${userIds.length}`);
        
        if (userIds.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö ID –≤ —Ñ–∞–π–ª–µ');
            console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞');
            return [];
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ID
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ID:');
        userIds.slice(0, 10).forEach((id, index) => {
            console.log(`   ${index + 1}. ${id}`);
        });
        
        if (userIds.length > 10) {
            console.log(`   ... –∏ –µ—â–µ ${userIds.length - 10} ID`);
        }
        
        return userIds;
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤ —Ñ–∞–π–ª
function saveUserIds(userIds, outputFile = 'extracted_user_ids.txt') {
    try {
        const content = userIds.join('\n');
        fs.writeFileSync(outputFile, content, 'utf8');
        
        console.log(`\nüíæ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${outputFile}`);
        console.log(`üìä –í—Å–µ–≥–æ ID: ${userIds.length}`);
        
        return outputFile;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${outputFile}:`, error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function analyzeAndFilter(userIds, filterOptions = {}) {
    const {
        excludeBlocked = false,
        onlyFailedCaptcha = false,
        onlyNotSubscribed = false
    } = filterOptions;
    
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô');
    
    if (userIds.length === 0) {
        console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return [];
    }
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${userIds.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const ranges = {
        '–û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ (< 1M)': userIds.filter(id => id < 1000000),
        '–°—Ç–∞—Ä—ã–µ (1M-100M)': userIds.filter(id => id >= 1000000 && id < 100000000),
        '–°—Ä–µ–¥–Ω–∏–µ (100M-1B)': userIds.filter(id => id >= 100000000 && id < 1000000000),
        '–ù–æ–≤—ã–µ (> 1B)': userIds.filter(id => id >= 1000000000)
    };
    
    console.log('\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤:');
    for (const [range, ids] of Object.entries(ranges)) {
        if (ids.length > 0) {
            console.log(`   ${range}: ${ids.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }
    }
    
    return userIds;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.log('üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–°–ï–† –õ–û–ì–û–í RAILWAY\n');
            console.log('–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:');
            console.log('  node parse-railway-logs.js <—Ñ–∞–π–ª_–ª–æ–≥–æ–≤> [–æ–ø—Ü–∏–∏]');
            console.log('');
            console.log('–ü–†–ò–ú–ï–†–´:');
            console.log('  node parse-railway-logs.js railway_logs.txt');
            console.log('  node parse-railway-logs.js logs.csv');
            console.log('  node parse-railway-logs.js data.json');
            console.log('  node parse-railway-logs.js *.log');
            console.log('');
            console.log('–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –§–û–†–ú–ê–¢–´:');
            console.log('  ‚Ä¢ .txt - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏');
            console.log('  ‚Ä¢ .log - —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤');
            console.log('  ‚Ä¢ .csv - CSV —Ñ–∞–π–ª—ã');
            console.log('  ‚Ä¢ .json - JSON —Ñ–∞–π–ª—ã');
            console.log('  ‚Ä¢ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
            return;
        }
        
        const inputFile = args[0];
        const outputFile = args[1] || 'extracted_user_ids.txt';
        
        console.log('üåü ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–°–ï–† –õ–û–ì–û–í RAILWAY =====\n');
        console.log('üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
        
        // –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        const userIds = await parseLogFile(inputFile);
        
        if (userIds.length === 0) {
            console.log('\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            return;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const filteredIds = await analyzeAndFilter(userIds);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const savedFile = saveUserIds(filteredIds, outputFile);
        
        if (savedFile) {
            console.log('\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
            console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${savedFile}`);
            console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
            console.log(`1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª ${savedFile}`);
            console.log(`2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node railway-reminder-script.js ${savedFile}`);
        }
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main();
}

module.exports = {
    parseLogFile,
    extractUserIds,
    saveUserIds,
    analyzeAndFilter
};
