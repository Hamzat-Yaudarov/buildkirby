const XLSX = require('xlsx');
const Database = require('./database');

// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
const RESUME_FROM_USER = 2130; // –ù–∞—á–∞—Ç—å —Å –∑–∞–ø–∏—Å–∏ –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å

async function resumeMigration() {
    try {
        console.log(`üîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${RESUME_FROM_USER}`);

        const workbook = XLSX.readFile('./xlsx-data/users.xlsx');
        const data = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);

        console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.length}`);
        console.log(`üéØ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ ${RESUME_FROM_USER} –∑–∞–ø–∏—Å–µ–π`);

        const remainingData = data.slice(RESUME_FROM_USER);
        console.log(`‚è≠Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${remainingData.length} –∑–∞–ø–∏—Å–µ–π`);

        const client = await Database.pool.connect();
        let processed = 0;
        let errors = 0;

        try {
            for (let i = 0; i < remainingData.length; i++) {
                const row = remainingData[i];
                const globalIndex = RESUME_FROM_USER + i + 1;

                try {
                    await client.query(`
                        INSERT INTO users (
                            user_id, username, first_name, language_code, is_premium,
                            balance, total_earned, referral_earned, total_referrals,
                            referrer_id, referral_completed, captcha_passed, created_at
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
                        ON CONFLICT (user_id) DO NOTHING
                    `, [
                        row.user_id,
                        row.username || null,
                        row.first_name || null,
                        row.language_code || 'ru',
                        row.is_premium || false,
                        parseFloat(row.balance) || 0,
                        parseFloat(row.total_earned) || 0,
                        parseFloat(row.referral_earned) || 0,
                        parseInt(row.total_referrals) || 0,
                        row.referrer_id || null,
                        row.referral_completed || false,
                        row.captcha_passed || false,
                        row.created_at || new Date()
                    ]);

                    processed++;

                    if (globalIndex % 100 === 0) {
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –∑–∞–ø–∏—Å–µ–π (–ø–æ–∑–∏—Ü–∏—è ${globalIndex})`);
                    }

                } catch (error) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${globalIndex}: ${error.message}`);
                    errors++;
                }
            }

            console.log(`üéâ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${processed}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);

        } finally {
            client.release();
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', error);
    }
}

resumeMigration();
