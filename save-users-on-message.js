const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');
const config = require('./config');

const bot = new TelegramBot(config.BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
async function getUserInfo(userId) {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ getChat
        const chat = await bot.getChat(userId);
        
        return {
            userId: userId,
            username: chat.username || '',
            firstName: chat.first_name || '',
            lastName: chat.last_name || '',
            languageCode: chat.language_code || 'ru',
            isPremium: chat.is_premium || false
        };
    } catch (error) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ getChat, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId} —á–µ—Ä–µ–∑ Telegram API`);
        return {
            userId: userId,
            username: '',
            firstName: `User_${userId}`,
            lastName: '',
            languageCode: 'ru',
            isPremium: false
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async function ensureUserInDatabase(userId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        let user = await Database.getUser(userId);
        
        if (user) {
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ –µ—Å—Ç—å –≤ –ë–î`);
            return user;
        }
        
        console.log(`üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfo = await getUserInfo(userId);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = await Database.createUser({
            userId: userInfo.userId,
            username: userInfo.username,
            firstName: userInfo.firstName,
            languageCode: userInfo.languageCode,
            isPremium: userInfo.isPremium,
            referrerId: null // –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        });
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userInfo.firstName}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
        
        // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∫–∞–ø—á–∞ –ù–ï –ø—Ä–æ–π–¥–µ–Ω–∞ (–ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
        await Database.setCaptchaPassed(userId, false);
        
        return user;
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –ë–î:`, error.message);
        return null;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
async function sendReminderWithDbSave(userIds) {
    try {
        console.log('üöÄ –û–¢–ü–†–ê–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –ë–î\n');

        await Database.init();

        if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {
            console.log('‚ùå –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return;
        }

        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        const reminderMessage = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ';

        let successCount = 0;
        let errorCount = 0;
        let blockedCount = 0;
        let notFoundCount = 0;
        let savedToDbCount = 0;
        let alreadyInDbCount = 0;

        console.log(`\nüì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î...\n`);

        for (let i = 0; i < userIds.length; i++) {
            const userId = parseInt(userIds[i]);
            const progress = `[${i + 1}/${userIds.length}]`;
            
            try {
                // –®–ê–ì–ò:
                // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                console.log(`${progress} üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –ë–î...`);
                
                const existingUser = await Database.getUser(userId);
                let userName = '';
                
                if (existingUser) {
                    alreadyInDbCount++;
                    userName = existingUser.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                    console.log(`${progress} ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) —É–∂–µ –≤ –ë–î`);
                } else {
                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                    const newUser = await ensureUserInDatabase(userId);
                    if (newUser) {
                        savedToDbCount++;
                        userName = newUser.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
                        console.log(`${progress} üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                    } else {
                        userName = `User_${userId}`;
                        console.log(`${progress} ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –ë–î`);
                    }
                }

                // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                console.log(`${progress} üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}...`);
                await bot.sendMessage(userId, reminderMessage);
                
                console.log(`${progress} ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} (${userName})`);
                successCount++;

                // 3. –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 150)); // 150ms –∑–∞–¥–µ—Ä–∂–∫–∞

            } catch (error) {
                if (error.response && error.response.body) {
                    const errorCode = error.response.body.error_code;
                    const description = error.response.body.description;

                    if (errorCode === 403) {
                        console.log(`${progress} üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
                        blockedCount++;
                        
                        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
                        const existingUser = await Database.getUser(userId);
                        if (!existingUser) {
                            await ensureUserInDatabase(userId);
                            savedToDbCount++;
                        }
                        
                    } else if (errorCode === 400 && description.includes('chat not found')) {
                        console.log(`${progress} ‚ùå –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        notFoundCount++;
                    } else {
                        console.log(`${progress} ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${description}`);
                        errorCount++;
                    }
                } else {
                    console.log(`${progress} ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
                    errorCount++;
                }
            }
        }

        console.log('\nüìä –ò–¢–û–ì–ò –û–¢–ü–†–ê–í–ö–ò –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –ë–î:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${blockedCount}`);
        console.log(`‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${notFoundCount}`);
        console.log(`‚ùå –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: ${errorCount}`);
        console.log(`üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount + blockedCount + notFoundCount + errorCount}`);
        
        console.log('\nüíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•:');
        console.log(`üë§ –£–∂–µ –±—ã–ª–∏ –≤ –ë–î: ${alreadyInDbCount}`);
        console.log(`üíæ –ù–æ–≤—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${savedToDbCount}`);
        console.log(`üìä –í—Å–µ–≥–æ –≤ –ë–î –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${alreadyInDbCount + savedToDbCount}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const totalInDb = await Database.pool.query('SELECT COUNT(*) as count FROM users WHERE user_id = ANY($1)', [userIds]);
        const finalCount = parseInt(totalInDb.rows[0].count);
        
        console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:`);
        console.log(`üì• –ò–∑ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${finalCount}`);
        console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${((finalCount / userIds.length) * 100).toFixed(1)}%`);

        if (finalCount === userIds.length) {
            console.log(`üéâ –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´ –í –ë–î!`);
        } else {
            console.log(`‚ö†Ô∏è ${userIds.length - finalCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î`);
        }

        return {
            totalProcessed: userIds.length,
            successCount,
            blockedCount,
            notFoundCount,
            errorCount,
            alreadyInDb: alreadyInDbCount,
            savedToDb: savedToDbCount,
            finalDbCount: finalCount
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function sendRemindersToFailedUsersWithSave() {
    try {
        console.log('üîç –ü–û–ò–°–ö –ò –û–¢–ü–†–ê–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –ë–î\n');

        await Database.init();

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        const captchaFailedUsers = await Database.pool.query(`
            SELECT user_id FROM users 
            WHERE captcha_passed = FALSE OR captcha_passed IS NULL
            ORDER BY created_at DESC
        `);

        const subscriptionFailedUsers = await Database.pool.query(`
            SELECT user_id FROM users 
            WHERE captcha_passed = TRUE 
            AND referral_completed = FALSE
            AND created_at < CURRENT_TIMESTAMP - INTERVAL '1 hour'
            ORDER BY created_at DESC
        `);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const allFailedUserIds = new Set();
        
        captchaFailedUsers.rows.forEach(row => allFailedUserIds.add(row.user_id));
        subscriptionFailedUsers.rows.forEach(row => allFailedUserIds.add(row.user_id));

        const userIds = Array.from(allFailedUserIds);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${userIds.length}`);
        console.log(`   ü§ñ –ù–ï –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É: ${captchaFailedUsers.rows.length}`);
        console.log(`   üì¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: ${subscriptionFailedUsers.rows.length}`);

        if (userIds.length === 0) {
            console.log('‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
            return;
        }

        // ÔøΩÔøΩ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        return await sendReminderWithDbSave(userIds);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
async function main() {
    try {
        const args = process.argv.slice(2);
        
        console.log('üåü ===== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –° –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í –ë–î =====\n');
        console.log('üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
        
        if (args.length === 0) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ªÔøΩÔøΩ–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('üîç –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            await sendRemindersToFailedUsersWithSave();
            
        } else if (args.length === 1 && args[0].endsWith('.txt')) {
            // –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
            const fs = require('fs');
            const filePath = args[0];
            
            if (!fs.existsSync(filePath)) {
                console.log(`‚ùå –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                process.exit(1);
            }

            const fileContent = fs.readFileSync(filePath, 'utf8');
            const userIds = fileContent
                .split('\n')
                .map(line => line.trim())
                .filter(line => line && !isNaN(line))
                .map(line => parseInt(line));

            console.log(`üìÅ –†–µ–∂–∏–º: –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ ${filePath}`);
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ID: ${userIds.length}`);
            
            await sendReminderWithDbSave(userIds);
            
        } else {
            // ID –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            const userIds = args.map(id => parseInt(id)).filter(id => !isNaN(id));
            
            console.log('üë§ –†–µ–∂–∏–º: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤');
            console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ID: ${userIds.length}`);
            
            await sendReminderWithDbSave(userIds);
        }

        console.log('\nüéâ ===== –û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û =====');

    } catch (error) {
        console.error('\n‚ùå ===== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê =====');
        console.error('–í—Ä–µ–º—è –æ—à–∏–±–∫–∏:', new Date().toLocaleString('ru-RU'));
        console.error('–î–µ—Ç–∞–ª–∏:', error);
        process.exit(1);
    } finally {
        await Database.pool.end();
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main();
}

module.exports = {
    sendReminderWithDbSave,
    ensureUserInDatabase,
    sendRemindersToFailedUsersWithSave
};
